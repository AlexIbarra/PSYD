
lab8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002850  0c100000  0c100000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       000008b4  0c102850  0c102850  0000a850  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .bss          00000008  0c103104  0c103104  0000b104  2**2
                  ALLOC
  3 .debug_abbrev 00000440  00000000  00000000  0000b104  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000f96  00000000  00000000  0000b544  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000007e6  00000000  00000000  0000c4da  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_macinfo 0001d8fb  00000000  00000000  0000ccc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_loc    00000c08  00000000  00000000  0002a5bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 0000052d  00000000  00000000  0002b1c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_pubtypes 00000115  00000000  00000000  0002b6f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000000c0  00000000  00000000  0002b805  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000544  00000000  00000000  0002b8c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .comment      0000002a  00000000  00000000  0002be09  2**0
                  CONTENTS, READONLY
 13 .ARM.attributes 00000032  00000000  00000000  0002be33  2**0
                  CONTENTS, READONLY
 14 .debug_frame  00000ad8  00000000  00000000  0002be68  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0c100000 <main>:

#define AT24C04_WIDTH (8)
#define AT24C04_DEPTH (512)

void main( void )
{
 c100000:	e1a0c00d 	mov	ip, sp
 c100004:	e92dd800 	push	{fp, ip, lr, pc}
 c100008:	e24cb004 	sub	fp, ip, #4
 c10000c:	e24dde41 	sub	sp, sp, #1040	; 0x410
    uint8 buffer[AT24C04_DEPTH], buffer_aux[AT24C04_DEPTH];
    uint16 i, j, delay;

    uint32 addr, data;

    sys_init();
 c100010:	eb000352 	bl	c100d60 <sys_init>
    uart0_init();
 c100014:	eb000826 	bl	c1020b4 <uart0_init>
    timers_init();
 c100018:	eb0005c3 	bl	c10172c <timers_init>
    iic_init();
 c10001c:	eb000260 	bl	c1009a4 <iic_init>

    /************************************/

    uart0_puts( "\n\nCargando en RAM el contenido de IIC-EEPROM AT24C04:\n" );
 c100020:	e59f0584 	ldr	r0, [pc, #1412]	; c1005ac <main+0x5ac>
 c100024:	eb000868 	bl	c1021cc <uart0_puts>

    /************************************/

    timer3_start();
 c100028:	eb0006af 	bl	c101aec <timer3_start>
    for( i=0; i<AT24C04_DEPTH; i++ )
 c10002c:	e3a03000 	mov	r3, #0
 c100030:	e14b30be 	strh	r3, [fp, #-14]
 c100034:	ea000009 	b	c100060 <main+0x60>
        at24c04_byteread( i, &buffer[i] );
 c100038:	e15b30be 	ldrh	r3, [fp, #-14]
 c10003c:	e24b2f87 	sub	r2, fp, #540	; 0x21c
 c100040:	e0823003 	add	r3, r2, r3
 c100044:	e15b20be 	ldrh	r2, [fp, #-14]
 c100048:	e1a00002 	mov	r0, r2
 c10004c:	e1a01003 	mov	r1, r3
 c100050:	eb0001a9 	bl	c1006fc <at24c04_byteread>
    uart0_puts( "\n\nCargando en RAM el contenido de IIC-EEPROM AT24C04:\n" );

    /************************************/

    timer3_start();
    for( i=0; i<AT24C04_DEPTH; i++ )
 c100054:	e15b30be 	ldrh	r3, [fp, #-14]
 c100058:	e2833001 	add	r3, r3, #1
 c10005c:	e14b30be 	strh	r3, [fp, #-14]
 c100060:	e15b20be 	ldrh	r2, [fp, #-14]
 c100064:	e59f3544 	ldr	r3, [pc, #1348]	; c1005b0 <main+0x5b0>
 c100068:	e1520003 	cmp	r2, r3
 c10006c:	9afffff1 	bls	c100038 <main+0x38>
        at24c04_byteread( i, &buffer[i] );
    delay = timer3_stop( );
 c100070:	eb0006c9 	bl	c101b9c <timer3_stop>
 c100074:	e1a03000 	mov	r3, r0
 c100078:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
    uart0_puts( " - Lectura aleatoria (" );
 c10007c:	e59f0530 	ldr	r0, [pc, #1328]	; c1005b4 <main+0x5b4>
 c100080:	eb000851 	bl	c1021cc <uart0_puts>
    uart0_putint( AT24C04_DEPTH );
 c100084:	e3a00c02 	mov	r0, #512	; 0x200
 c100088:	eb000869 	bl	c102234 <uart0_putint>
    uart0_puts( " bytes): " );
 c10008c:	e59f0524 	ldr	r0, [pc, #1316]	; c1005b8 <main+0x5b8>
 c100090:	eb00084d 	bl	c1021cc <uart0_puts>
    uart0_putint( delay/10 );
 c100094:	e15b21b2 	ldrh	r2, [fp, #-18]	; 0xffffffee
 c100098:	e59f351c 	ldr	r3, [pc, #1308]	; c1005bc <main+0x5bc>
 c10009c:	e0830392 	umull	r0, r3, r2, r3
 c1000a0:	e1a031a3 	lsr	r3, r3, #3
 c1000a4:	e1a03803 	lsl	r3, r3, #16
 c1000a8:	e1a03823 	lsr	r3, r3, #16
 c1000ac:	e1a00003 	mov	r0, r3
 c1000b0:	eb00085f 	bl	c102234 <uart0_putint>
    uart0_puts( " ms\n" );
 c1000b4:	e59f0504 	ldr	r0, [pc, #1284]	; c1005c0 <main+0x5c0>
 c1000b8:	eb000843 	bl	c1021cc <uart0_puts>

    /************************************/

    timer3_start();
 c1000bc:	eb00068a 	bl	c101aec <timer3_start>
    at24c04_load( buffer_aux );
 c1000c0:	e24b3e41 	sub	r3, fp, #1040	; 0x410
 c1000c4:	e243300c 	sub	r3, r3, #12
 c1000c8:	e1a00003 	mov	r0, r3
 c1000cc:	eb0001ba 	bl	c1007bc <at24c04_load>
    delay = timer3_stop( );
 c1000d0:	eb0006b1 	bl	c101b9c <timer3_stop>
 c1000d4:	e1a03000 	mov	r3, r0
 c1000d8:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
    uart0_puts( " - Lectura secuencial (" );
 c1000dc:	e59f04e0 	ldr	r0, [pc, #1248]	; c1005c4 <main+0x5c4>
 c1000e0:	eb000839 	bl	c1021cc <uart0_puts>
    uart0_putint( AT24C04_DEPTH );
 c1000e4:	e3a00c02 	mov	r0, #512	; 0x200
 c1000e8:	eb000851 	bl	c102234 <uart0_putint>
    uart0_puts( " bytes): " );
 c1000ec:	e59f04c4 	ldr	r0, [pc, #1220]	; c1005b8 <main+0x5b8>
 c1000f0:	eb000835 	bl	c1021cc <uart0_puts>
    uart0_putint( delay/10 );
 c1000f4:	e15b21b2 	ldrh	r2, [fp, #-18]	; 0xffffffee
 c1000f8:	e59f34bc 	ldr	r3, [pc, #1212]	; c1005bc <main+0x5bc>
 c1000fc:	e0831392 	umull	r1, r3, r2, r3
 c100100:	e1a031a3 	lsr	r3, r3, #3
 c100104:	e1a03803 	lsl	r3, r3, #16
 c100108:	e1a03823 	lsr	r3, r3, #16
 c10010c:	e1a00003 	mov	r0, r3
 c100110:	eb000847 	bl	c102234 <uart0_putint>
    uart0_puts( " ms\n" );
 c100114:	e59f04a4 	ldr	r0, [pc, #1188]	; c1005c0 <main+0x5c0>
 c100118:	eb00082b 	bl	c1021cc <uart0_puts>

    /************************************/

    for( i=0; i<AT24C04_DEPTH; i++ )
 c10011c:	e3a03000 	mov	r3, #0
 c100120:	e14b30be 	strh	r3, [fp, #-14]
 c100124:	ea000012 	b	c100174 <main+0x174>
        if( buffer[i] != buffer_aux[i] )
 c100128:	e15b20be 	ldrh	r2, [fp, #-14]
 c10012c:	e59f3494 	ldr	r3, [pc, #1172]	; c1005c8 <main+0x5c8>
 c100130:	e24b000c 	sub	r0, fp, #12
 c100134:	e0802002 	add	r2, r0, r2
 c100138:	e0823003 	add	r3, r2, r3
 c10013c:	e5d32000 	ldrb	r2, [r3]
 c100140:	e15b10be 	ldrh	r1, [fp, #-14]
 c100144:	e59f3480 	ldr	r3, [pc, #1152]	; c1005cc <main+0x5cc>
 c100148:	e24b000c 	sub	r0, fp, #12
 c10014c:	e0801001 	add	r1, r0, r1
 c100150:	e0813003 	add	r3, r1, r3
 c100154:	e5d33000 	ldrb	r3, [r3]
 c100158:	e1520003 	cmp	r2, r3
 c10015c:	0a000001 	beq	c100168 <main+0x168>
            uart0_puts( "ERROR: lectura aleatoria y secuencial no son coincidentes\n" );
 c100160:	e59f0468 	ldr	r0, [pc, #1128]	; c1005d0 <main+0x5d0>
 c100164:	eb000818 	bl	c1021cc <uart0_puts>
    uart0_putint( delay/10 );
    uart0_puts( " ms\n" );

    /************************************/

    for( i=0; i<AT24C04_DEPTH; i++ )
 c100168:	e15b30be 	ldrh	r3, [fp, #-14]
 c10016c:	e2833001 	add	r3, r3, #1
 c100170:	e14b30be 	strh	r3, [fp, #-14]
 c100174:	e15b20be 	ldrh	r2, [fp, #-14]
 c100178:	e59f3430 	ldr	r3, [pc, #1072]	; c1005b0 <main+0x5b0>
 c10017c:	e1520003 	cmp	r2, r3
 c100180:	9affffe8 	bls	c100128 <main+0x128>
        if( buffer[i] != buffer_aux[i] )
            uart0_puts( "ERROR: lectura aleatoria y secuencial no son coincidentes\n" );

    /************************************/

    uart0_puts( "\nVolcado del contenido inicial de la memoria IIC-EEPROM AT24C04:\n" );
 c100184:	e59f0448 	ldr	r0, [pc, #1096]	; c1005d4 <main+0x5d4>
 c100188:	eb00080f 	bl	c1021cc <uart0_puts>

    for( i=0; i < (AT24C04_DEPTH>>4); i++ ){
 c10018c:	e3a03000 	mov	r3, #0
 c100190:	e14b30be 	strh	r3, [fp, #-14]
 c100194:	ea000066 	b	c100334 <main+0x334>
    	uart0_puts( "\n" );
 c100198:	e59f0438 	ldr	r0, [pc, #1080]	; c1005d8 <main+0x5d8>
 c10019c:	eb00080a 	bl	c1021cc <uart0_puts>
    	if( i<<4 <= 0xf )
 c1001a0:	e15b30be 	ldrh	r3, [fp, #-14]
 c1001a4:	e1a03203 	lsl	r3, r3, #4
 c1001a8:	e353000f 	cmp	r3, #15
 c1001ac:	ca000002 	bgt	c1001bc <main+0x1bc>
    		uart0_puts( "00" );
 c1001b0:	e59f0424 	ldr	r0, [pc, #1060]	; c1005dc <main+0x5dc>
 c1001b4:	eb000804 	bl	c1021cc <uart0_puts>
 c1001b8:	ea000005 	b	c1001d4 <main+0x1d4>
    	else if( i<<4 <= 0xff )
 c1001bc:	e15b30be 	ldrh	r3, [fp, #-14]
 c1001c0:	e1a03203 	lsl	r3, r3, #4
 c1001c4:	e35300ff 	cmp	r3, #255	; 0xff
 c1001c8:	ca000001 	bgt	c1001d4 <main+0x1d4>
    	    uart0_putchar( '0' );
 c1001cc:	e3a00030 	mov	r0, #48	; 0x30
 c1001d0:	eb0007e7 	bl	c102174 <uart0_putchar>
    	uart0_puthex( i<<4 );
 c1001d4:	e15b30be 	ldrh	r3, [fp, #-14]
 c1001d8:	e1a03203 	lsl	r3, r3, #4
 c1001dc:	e1a00003 	mov	r0, r3
 c1001e0:	eb00087f 	bl	c1023e4 <uart0_puthex>
        uart0_puts( "h:"  );
 c1001e4:	e59f03f4 	ldr	r0, [pc, #1012]	; c1005e0 <main+0x5e0>
 c1001e8:	eb0007f7 	bl	c1021cc <uart0_puts>
        for( j=0; j<16; j++ )
 c1001ec:	e3a03000 	mov	r3, #0
 c1001f0:	e14b31b0 	strh	r3, [fp, #-16]
 c1001f4:	ea00001a 	b	c100264 <main+0x264>
        {
            if( buffer[(i<<4)+j] <= 0xf )
 c1001f8:	e15b30be 	ldrh	r3, [fp, #-14]
 c1001fc:	e1a02203 	lsl	r2, r3, #4
 c100200:	e15b31b0 	ldrh	r3, [fp, #-16]
 c100204:	e0822003 	add	r2, r2, r3
 c100208:	e59f33b8 	ldr	r3, [pc, #952]	; c1005c8 <main+0x5c8>
 c10020c:	e24b100c 	sub	r1, fp, #12
 c100210:	e0812002 	add	r2, r1, r2
 c100214:	e0823003 	add	r3, r2, r3
 c100218:	e5d33000 	ldrb	r3, [r3]
 c10021c:	e353000f 	cmp	r3, #15
 c100220:	8a000001 	bhi	c10022c <main+0x22c>
                uart0_putchar( '0' );
 c100224:	e3a00030 	mov	r0, #48	; 0x30
 c100228:	eb0007d1 	bl	c102174 <uart0_putchar>
            uart0_puthex( buffer[(i<<4)+j] );
 c10022c:	e15b30be 	ldrh	r3, [fp, #-14]
 c100230:	e1a02203 	lsl	r2, r3, #4
 c100234:	e15b31b0 	ldrh	r3, [fp, #-16]
 c100238:	e0822003 	add	r2, r2, r3
 c10023c:	e59f3384 	ldr	r3, [pc, #900]	; c1005c8 <main+0x5c8>
 c100240:	e24b000c 	sub	r0, fp, #12
 c100244:	e0802002 	add	r2, r0, r2
 c100248:	e0823003 	add	r3, r2, r3
 c10024c:	e5d33000 	ldrb	r3, [r3]
 c100250:	e1a00003 	mov	r0, r3
 c100254:	eb000862 	bl	c1023e4 <uart0_puthex>
    		uart0_puts( "00" );
    	else if( i<<4 <= 0xff )
    	    uart0_putchar( '0' );
    	uart0_puthex( i<<4 );
        uart0_puts( "h:"  );
        for( j=0; j<16; j++ )
 c100258:	e15b31b0 	ldrh	r3, [fp, #-16]
 c10025c:	e2833001 	add	r3, r3, #1
 c100260:	e14b31b0 	strh	r3, [fp, #-16]
 c100264:	e15b31b0 	ldrh	r3, [fp, #-16]
 c100268:	e353000f 	cmp	r3, #15
 c10026c:	9affffe1 	bls	c1001f8 <main+0x1f8>
        {
            if( buffer[(i<<4)+j] <= 0xf )
                uart0_putchar( '0' );
            uart0_puthex( buffer[(i<<4)+j] );
        }
        uart0_puts( " ; " );
 c100270:	e59f036c 	ldr	r0, [pc, #876]	; c1005e4 <main+0x5e4>
 c100274:	eb0007d4 	bl	c1021cc <uart0_puts>
        for( j=0; j<16; j++ )
 c100278:	e3a03000 	mov	r3, #0
 c10027c:	e14b31b0 	strh	r3, [fp, #-16]
 c100280:	ea000025 	b	c10031c <main+0x31c>
              uart0_putchar( ( (31<buffer[(i<<4)+j]) && (buffer[(i<<4)+j]<127) ? buffer[(i<<4)+j] : '.' ) );
 c100284:	e15b30be 	ldrh	r3, [fp, #-14]
 c100288:	e1a02203 	lsl	r2, r3, #4
 c10028c:	e15b31b0 	ldrh	r3, [fp, #-16]
 c100290:	e0822003 	add	r2, r2, r3
 c100294:	e59f332c 	ldr	r3, [pc, #812]	; c1005c8 <main+0x5c8>
 c100298:	e24b100c 	sub	r1, fp, #12
 c10029c:	e0812002 	add	r2, r1, r2
 c1002a0:	e0823003 	add	r3, r2, r3
 c1002a4:	e5d33000 	ldrb	r3, [r3]
 c1002a8:	e353001f 	cmp	r3, #31
 c1002ac:	9a000014 	bls	c100304 <main+0x304>
 c1002b0:	e15b30be 	ldrh	r3, [fp, #-14]
 c1002b4:	e1a02203 	lsl	r2, r3, #4
 c1002b8:	e15b31b0 	ldrh	r3, [fp, #-16]
 c1002bc:	e0822003 	add	r2, r2, r3
 c1002c0:	e59f3300 	ldr	r3, [pc, #768]	; c1005c8 <main+0x5c8>
 c1002c4:	e24b000c 	sub	r0, fp, #12
 c1002c8:	e0802002 	add	r2, r0, r2
 c1002cc:	e0823003 	add	r3, r2, r3
 c1002d0:	e5d33000 	ldrb	r3, [r3]
 c1002d4:	e353007e 	cmp	r3, #126	; 0x7e
 c1002d8:	8a000009 	bhi	c100304 <main+0x304>
 c1002dc:	e15b30be 	ldrh	r3, [fp, #-14]
 c1002e0:	e1a02203 	lsl	r2, r3, #4
 c1002e4:	e15b31b0 	ldrh	r3, [fp, #-16]
 c1002e8:	e0822003 	add	r2, r2, r3
 c1002ec:	e59f32d4 	ldr	r3, [pc, #724]	; c1005c8 <main+0x5c8>
 c1002f0:	e24b100c 	sub	r1, fp, #12
 c1002f4:	e0812002 	add	r2, r1, r2
 c1002f8:	e0823003 	add	r3, r2, r3
 c1002fc:	e5d33000 	ldrb	r3, [r3]
 c100300:	ea000000 	b	c100308 <main+0x308>
 c100304:	e3a0302e 	mov	r3, #46	; 0x2e
 c100308:	e1a00003 	mov	r0, r3
 c10030c:	eb000798 	bl	c102174 <uart0_putchar>
            if( buffer[(i<<4)+j] <= 0xf )
                uart0_putchar( '0' );
            uart0_puthex( buffer[(i<<4)+j] );
        }
        uart0_puts( " ; " );
        for( j=0; j<16; j++ )
 c100310:	e15b31b0 	ldrh	r3, [fp, #-16]
 c100314:	e2833001 	add	r3, r3, #1
 c100318:	e14b31b0 	strh	r3, [fp, #-16]
 c10031c:	e15b31b0 	ldrh	r3, [fp, #-16]
 c100320:	e353000f 	cmp	r3, #15
 c100324:	9affffd6 	bls	c100284 <main+0x284>

    /************************************/

    uart0_puts( "\nVolcado del contenido inicial de la memoria IIC-EEPROM AT24C04:\n" );

    for( i=0; i < (AT24C04_DEPTH>>4); i++ ){
 c100328:	e15b30be 	ldrh	r3, [fp, #-14]
 c10032c:	e2833001 	add	r3, r3, #1
 c100330:	e14b30be 	strh	r3, [fp, #-14]
 c100334:	e15b30be 	ldrh	r3, [fp, #-14]
 c100338:	e353001f 	cmp	r3, #31
 c10033c:	9affff95 	bls	c100198 <main+0x198>
              uart0_putchar( ( (31<buffer[(i<<4)+j]) && (buffer[(i<<4)+j]<127) ? buffer[(i<<4)+j] : '.' ) );
    };

    /************************************/

    uart0_puts( "\n\nModificacion del contenido de la memoria IIC-EEPROM AT24C04:\n" );
 c100340:	e59f02a0 	ldr	r0, [pc, #672]	; c1005e8 <main+0x5e8>
 c100344:	eb0007a0 	bl	c1021cc <uart0_puts>

    for( i=0; i<5; i++ )
 c100348:	e3a03000 	mov	r3, #0
 c10034c:	e14b30be 	strh	r3, [fp, #-14]
 c100350:	ea000012 	b	c1003a0 <main+0x3a0>
    {
        uart0_puts( "  - Introduzca una direccion (0h-1ffh): " );
 c100354:	e59f0290 	ldr	r0, [pc, #656]	; c1005ec <main+0x5ec>
 c100358:	eb00079b 	bl	c1021cc <uart0_puts>
        addr = uart0_gethex( );
 c10035c:	eb0008b1 	bl	c102628 <uart0_gethex>
 c100360:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
        uart0_puts( "  - Introduzca el dato (0h-ffh): " );
 c100364:	e59f0284 	ldr	r0, [pc, #644]	; c1005f0 <main+0x5f0>
 c100368:	eb000797 	bl	c1021cc <uart0_puts>
        data = uart0_gethex( );
 c10036c:	eb0008ad 	bl	c102628 <uart0_gethex>
 c100370:	e50b001c 	str	r0, [fp, #-28]	; 0xffffffe4
        buffer[addr] = data;
 c100374:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c100378:	e20320ff 	and	r2, r3, #255	; 0xff
 c10037c:	e59f3244 	ldr	r3, [pc, #580]	; c1005c8 <main+0x5c8>
 c100380:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
 c100384:	e24b000c 	sub	r0, fp, #12
 c100388:	e0801001 	add	r1, r0, r1
 c10038c:	e0813003 	add	r3, r1, r3
 c100390:	e5c32000 	strb	r2, [r3]

    /************************************/

    uart0_puts( "\n\nModificacion del contenido de la memoria IIC-EEPROM AT24C04:\n" );

    for( i=0; i<5; i++ )
 c100394:	e15b30be 	ldrh	r3, [fp, #-14]
 c100398:	e2833001 	add	r3, r3, #1
 c10039c:	e14b30be 	strh	r3, [fp, #-14]
 c1003a0:	e15b30be 	ldrh	r3, [fp, #-14]
 c1003a4:	e3530004 	cmp	r3, #4
 c1003a8:	9affffe9 	bls	c100354 <main+0x354>
        buffer[addr] = data;
    }

    /************************************/

    uart0_puts( "\nVolcando en la IIC-EEPROM AT24C04 el contenido de la RAM:\n" );
 c1003ac:	e59f0240 	ldr	r0, [pc, #576]	; c1005f4 <main+0x5f4>
 c1003b0:	eb000785 	bl	c1021cc <uart0_puts>

    /************************************/

    timer3_start();
 c1003b4:	eb0005cc 	bl	c101aec <timer3_start>
    for( i=0; i<AT24C04_DEPTH; i++ )
 c1003b8:	e3a03000 	mov	r3, #0
 c1003bc:	e14b30be 	strh	r3, [fp, #-14]
 c1003c0:	ea00000c 	b	c1003f8 <main+0x3f8>
        at24c04_bytewrite( i, buffer[i] );
 c1003c4:	e15b20be 	ldrh	r2, [fp, #-14]
 c1003c8:	e59f31f8 	ldr	r3, [pc, #504]	; c1005c8 <main+0x5c8>
 c1003cc:	e24b100c 	sub	r1, fp, #12
 c1003d0:	e0812002 	add	r2, r1, r2
 c1003d4:	e0823003 	add	r3, r2, r3
 c1003d8:	e5d33000 	ldrb	r3, [r3]
 c1003dc:	e15b20be 	ldrh	r2, [fp, #-14]
 c1003e0:	e1a00002 	mov	r0, r2
 c1003e4:	e1a01003 	mov	r1, r3
 c1003e8:	eb0000a0 	bl	c100670 <at24c04_bytewrite>
    uart0_puts( "\nVolcando en la IIC-EEPROM AT24C04 el contenido de la RAM:\n" );

    /************************************/

    timer3_start();
    for( i=0; i<AT24C04_DEPTH; i++ )
 c1003ec:	e15b30be 	ldrh	r3, [fp, #-14]
 c1003f0:	e2833001 	add	r3, r3, #1
 c1003f4:	e14b30be 	strh	r3, [fp, #-14]
 c1003f8:	e15b20be 	ldrh	r2, [fp, #-14]
 c1003fc:	e59f31ac 	ldr	r3, [pc, #428]	; c1005b0 <main+0x5b0>
 c100400:	e1520003 	cmp	r2, r3
 c100404:	9affffee 	bls	c1003c4 <main+0x3c4>
        at24c04_bytewrite( i, buffer[i] );
    delay = timer3_stop( );
 c100408:	eb0005e3 	bl	c101b9c <timer3_stop>
 c10040c:	e1a03000 	mov	r3, r0
 c100410:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
    uart0_puts( " - Escritura aleatoria (" );
 c100414:	e59f01dc 	ldr	r0, [pc, #476]	; c1005f8 <main+0x5f8>
 c100418:	eb00076b 	bl	c1021cc <uart0_puts>
    uart0_putint( AT24C04_DEPTH );
 c10041c:	e3a00c02 	mov	r0, #512	; 0x200
 c100420:	eb000783 	bl	c102234 <uart0_putint>
    uart0_puts( " bytes): " );
 c100424:	e59f018c 	ldr	r0, [pc, #396]	; c1005b8 <main+0x5b8>
 c100428:	eb000767 	bl	c1021cc <uart0_puts>
    uart0_putint( delay/10 );
 c10042c:	e15b21b2 	ldrh	r2, [fp, #-18]	; 0xffffffee
 c100430:	e59f3184 	ldr	r3, [pc, #388]	; c1005bc <main+0x5bc>
 c100434:	e0830392 	umull	r0, r3, r2, r3
 c100438:	e1a031a3 	lsr	r3, r3, #3
 c10043c:	e1a03803 	lsl	r3, r3, #16
 c100440:	e1a03823 	lsr	r3, r3, #16
 c100444:	e1a00003 	mov	r0, r3
 c100448:	eb000779 	bl	c102234 <uart0_putint>
    uart0_puts( " ms\n" );
 c10044c:	e59f016c 	ldr	r0, [pc, #364]	; c1005c0 <main+0x5c0>
 c100450:	eb00075d 	bl	c1021cc <uart0_puts>

    at24c04_load( buffer_aux );
 c100454:	e24b3e41 	sub	r3, fp, #1040	; 0x410
 c100458:	e243300c 	sub	r3, r3, #12
 c10045c:	e1a00003 	mov	r0, r3
 c100460:	eb0000d5 	bl	c1007bc <at24c04_load>
    for( i=0; i<AT24C04_DEPTH; i++ )
 c100464:	e3a03000 	mov	r3, #0
 c100468:	e14b30be 	strh	r3, [fp, #-14]
 c10046c:	ea000012 	b	c1004bc <main+0x4bc>
        if( buffer[i] != buffer_aux[i] )
 c100470:	e15b20be 	ldrh	r2, [fp, #-14]
 c100474:	e59f314c 	ldr	r3, [pc, #332]	; c1005c8 <main+0x5c8>
 c100478:	e24b100c 	sub	r1, fp, #12
 c10047c:	e0812002 	add	r2, r1, r2
 c100480:	e0823003 	add	r3, r2, r3
 c100484:	e5d32000 	ldrb	r2, [r3]
 c100488:	e15b10be 	ldrh	r1, [fp, #-14]
 c10048c:	e59f3138 	ldr	r3, [pc, #312]	; c1005cc <main+0x5cc>
 c100490:	e24b000c 	sub	r0, fp, #12
 c100494:	e0801001 	add	r1, r0, r1
 c100498:	e0813003 	add	r3, r1, r3
 c10049c:	e5d33000 	ldrb	r3, [r3]
 c1004a0:	e1520003 	cmp	r2, r3
 c1004a4:	0a000001 	beq	c1004b0 <main+0x4b0>
            uart0_puts( "ERROR: La escritura aleatoria falla.\n" );
 c1004a8:	e59f014c 	ldr	r0, [pc, #332]	; c1005fc <main+0x5fc>
 c1004ac:	eb000746 	bl	c1021cc <uart0_puts>
    uart0_puts( " bytes): " );
    uart0_putint( delay/10 );
    uart0_puts( " ms\n" );

    at24c04_load( buffer_aux );
    for( i=0; i<AT24C04_DEPTH; i++ )
 c1004b0:	e15b30be 	ldrh	r3, [fp, #-14]
 c1004b4:	e2833001 	add	r3, r3, #1
 c1004b8:	e14b30be 	strh	r3, [fp, #-14]
 c1004bc:	e15b20be 	ldrh	r2, [fp, #-14]
 c1004c0:	e59f30e8 	ldr	r3, [pc, #232]	; c1005b0 <main+0x5b0>
 c1004c4:	e1520003 	cmp	r2, r3
 c1004c8:	9affffe8 	bls	c100470 <main+0x470>
        if( buffer[i] != buffer_aux[i] )
            uart0_puts( "ERROR: La escritura aleatoria falla.\n" );

    /************************************/

    timer3_start();
 c1004cc:	eb000586 	bl	c101aec <timer3_start>
    at24c04_store( buffer );
 c1004d0:	e24b3f87 	sub	r3, fp, #540	; 0x21c
 c1004d4:	e1a00003 	mov	r0, r3
 c1004d8:	eb0000f7 	bl	c1008bc <at24c04_store>
    delay = timer3_stop( );
 c1004dc:	eb0005ae 	bl	c101b9c <timer3_stop>
 c1004e0:	e1a03000 	mov	r3, r0
 c1004e4:	e14b31b2 	strh	r3, [fp, #-18]	; 0xffffffee
    uart0_puts( " - Escritura secuencial (" );
 c1004e8:	e59f0110 	ldr	r0, [pc, #272]	; c100600 <main+0x600>
 c1004ec:	eb000736 	bl	c1021cc <uart0_puts>
    uart0_putint( AT24C04_DEPTH );
 c1004f0:	e3a00c02 	mov	r0, #512	; 0x200
 c1004f4:	eb00074e 	bl	c102234 <uart0_putint>
    uart0_puts( " bytes): " );
 c1004f8:	e59f00b8 	ldr	r0, [pc, #184]	; c1005b8 <main+0x5b8>
 c1004fc:	eb000732 	bl	c1021cc <uart0_puts>
    uart0_putint( delay/10 );
 c100500:	e15b21b2 	ldrh	r2, [fp, #-18]	; 0xffffffee
 c100504:	e59f30b0 	ldr	r3, [pc, #176]	; c1005bc <main+0x5bc>
 c100508:	e0831392 	umull	r1, r3, r2, r3
 c10050c:	e1a031a3 	lsr	r3, r3, #3
 c100510:	e1a03803 	lsl	r3, r3, #16
 c100514:	e1a03823 	lsr	r3, r3, #16
 c100518:	e1a00003 	mov	r0, r3
 c10051c:	eb000744 	bl	c102234 <uart0_putint>
    uart0_puts( " ms\n" );
 c100520:	e59f0098 	ldr	r0, [pc, #152]	; c1005c0 <main+0x5c0>
 c100524:	eb000728 	bl	c1021cc <uart0_puts>

    at24c04_load( buffer_aux );
 c100528:	e24b3e41 	sub	r3, fp, #1040	; 0x410
 c10052c:	e243300c 	sub	r3, r3, #12
 c100530:	e1a00003 	mov	r0, r3
 c100534:	eb0000a0 	bl	c1007bc <at24c04_load>
    for( i=0; i<AT24C04_DEPTH; i++ )
 c100538:	e3a03000 	mov	r3, #0
 c10053c:	e14b30be 	strh	r3, [fp, #-14]
 c100540:	ea000012 	b	c100590 <main+0x590>
        if( buffer[i] != buffer_aux[i] )
 c100544:	e15b20be 	ldrh	r2, [fp, #-14]
 c100548:	e59f3078 	ldr	r3, [pc, #120]	; c1005c8 <main+0x5c8>
 c10054c:	e24b000c 	sub	r0, fp, #12
 c100550:	e0802002 	add	r2, r0, r2
 c100554:	e0823003 	add	r3, r2, r3
 c100558:	e5d32000 	ldrb	r2, [r3]
 c10055c:	e15b10be 	ldrh	r1, [fp, #-14]
 c100560:	e59f3064 	ldr	r3, [pc, #100]	; c1005cc <main+0x5cc>
 c100564:	e24b000c 	sub	r0, fp, #12
 c100568:	e0801001 	add	r1, r0, r1
 c10056c:	e0813003 	add	r3, r1, r3
 c100570:	e5d33000 	ldrb	r3, [r3]
 c100574:	e1520003 	cmp	r2, r3
 c100578:	0a000001 	beq	c100584 <main+0x584>
            uart0_puts( "ERROR: La escritura secuencial falla.\n" );
 c10057c:	e59f0080 	ldr	r0, [pc, #128]	; c100604 <main+0x604>
 c100580:	eb000711 	bl	c1021cc <uart0_puts>
    uart0_puts( " bytes): " );
    uart0_putint( delay/10 );
    uart0_puts( " ms\n" );

    at24c04_load( buffer_aux );
    for( i=0; i<AT24C04_DEPTH; i++ )
 c100584:	e15b30be 	ldrh	r3, [fp, #-14]
 c100588:	e2833001 	add	r3, r3, #1
 c10058c:	e14b30be 	strh	r3, [fp, #-14]
 c100590:	e15b20be 	ldrh	r2, [fp, #-14]
 c100594:	e59f3014 	ldr	r3, [pc, #20]	; c1005b0 <main+0x5b0>
 c100598:	e1520003 	cmp	r2, r3
 c10059c:	9affffe8 	bls	c100544 <main+0x544>
        if( buffer[i] != buffer_aux[i] )
            uart0_puts( "ERROR: La escritura secuencial falla.\n" );

    /************************************/

    uart0_puts( "\nApague la placa y vuelva a cargar y ejecutar el programa.\n" );
 c1005a0:	e59f0060 	ldr	r0, [pc, #96]	; c100608 <main+0x608>
 c1005a4:	eb000708 	bl	c1021cc <uart0_puts>

    /************************************/

    while( 1 );
 c1005a8:	eafffffe 	b	c1005a8 <main+0x5a8>
 c1005ac:	0c102850 	.word	0x0c102850
 c1005b0:	000001ff 	.word	0x000001ff
 c1005b4:	0c102888 	.word	0x0c102888
 c1005b8:	0c1028a0 	.word	0x0c1028a0
 c1005bc:	cccccccd 	.word	0xcccccccd
 c1005c0:	0c1028ac 	.word	0x0c1028ac
 c1005c4:	0c1028b4 	.word	0x0c1028b4
 c1005c8:	fffffdf0 	.word	0xfffffdf0
 c1005cc:	fffffbf0 	.word	0xfffffbf0
 c1005d0:	0c1028cc 	.word	0x0c1028cc
 c1005d4:	0c102908 	.word	0x0c102908
 c1005d8:	0c10294c 	.word	0x0c10294c
 c1005dc:	0c102950 	.word	0x0c102950
 c1005e0:	0c102954 	.word	0x0c102954
 c1005e4:	0c102958 	.word	0x0c102958
 c1005e8:	0c10295c 	.word	0x0c10295c
 c1005ec:	0c10299c 	.word	0x0c10299c
 c1005f0:	0c1029c8 	.word	0x0c1029c8
 c1005f4:	0c1029ec 	.word	0x0c1029ec
 c1005f8:	0c102a28 	.word	0x0c102a28
 c1005fc:	0c102a44 	.word	0x0c102a44
 c100600:	0c102a6c 	.word	0x0c102a6c
 c100604:	0c102a88 	.word	0x0c102a88
 c100608:	0c102ab0 	.word	0x0c102ab0

0c10060c <at24c04_clear>:
#define WRITE (0)

/*
** Borra al completo el contenido de la memoria
*/
void at24c04_clear( void ){
 c10060c:	e1a0c00d 	mov	ip, sp
 c100610:	e92dd800 	push	{fp, ip, lr, pc}
 c100614:	e24cb004 	sub	fp, ip, #4
 c100618:	e24dd008 	sub	sp, sp, #8
	uint8 limpia = 0;
 c10061c:	e3a03000 	mov	r3, #0
 c100620:	e54b300f 	strb	r3, [fp, #-15]
	uint16 indice;
	for( indice = 0; indice < AT24C04_DEPTH; ++indice){
 c100624:	e3a03000 	mov	r3, #0
 c100628:	e14b30be 	strh	r3, [fp, #-14]
 c10062c:	ea000007 	b	c100650 <at24c04_clear+0x44>
		at24c04_bytewrite(indice, limpia); // Escribes un 0 en todos los indices del at24c04
 c100630:	e15b20be 	ldrh	r2, [fp, #-14]
 c100634:	e55b300f 	ldrb	r3, [fp, #-15]
 c100638:	e1a00002 	mov	r0, r2
 c10063c:	e1a01003 	mov	r1, r3
 c100640:	eb00000a 	bl	c100670 <at24c04_bytewrite>
** Borra al completo el contenido de la memoria
*/
void at24c04_clear( void ){
	uint8 limpia = 0;
	uint16 indice;
	for( indice = 0; indice < AT24C04_DEPTH; ++indice){
 c100644:	e15b30be 	ldrh	r3, [fp, #-14]
 c100648:	e2833001 	add	r3, r3, #1
 c10064c:	e14b30be 	strh	r3, [fp, #-14]
 c100650:	e15b20be 	ldrh	r2, [fp, #-14]
 c100654:	e59f3010 	ldr	r3, [pc, #16]	; c10066c <at24c04_clear+0x60>
 c100658:	e1520003 	cmp	r2, r3
 c10065c:	9afffff3 	bls	c100630 <at24c04_clear+0x24>
		at24c04_bytewrite(indice, limpia); // Escribes un 0 en todos los indices del at24c04
	}
}
 c100660:	e24bd00c 	sub	sp, fp, #12
 c100664:	e89d6800 	ldm	sp, {fp, sp, lr}
 c100668:	e12fff1e 	bx	lr
 c10066c:	000001ff 	.word	0x000001ff

0c100670 <at24c04_bytewrite>:

/*
** Realiza una escritura aleatoria en la dirección indicada
*/
void at24c04_bytewrite( uint16 addr, uint8 data ){
 c100670:	e1a0c00d 	mov	ip, sp
 c100674:	e92dd800 	push	{fp, ip, lr, pc}
 c100678:	e24cb004 	sub	fp, ip, #4
 c10067c:	e24dd010 	sub	sp, sp, #16
 c100680:	e1a02000 	mov	r2, r0
 c100684:	e1a03001 	mov	r3, r1
 c100688:	e14b21b6 	strh	r2, [fp, #-22]	; 0xffffffea
 c10068c:	e54b3017 	strb	r3, [fp, #-23]	; 0xffffffe9
	uint8 page;
	page = ((addr & 0x100)>>8);
 c100690:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c100694:	e2033c01 	and	r3, r3, #256	; 0x100
 c100698:	e1a03443 	asr	r3, r3, #8
 c10069c:	e54b300d 	strb	r3, [fp, #-13]
	iic_start(IIC_Tx, DEVICE_ADDR | (page<<1) | WRITE);
 c1006a0:	e55b300d 	ldrb	r3, [fp, #-13]
 c1006a4:	e1a03083 	lsl	r3, r3, #1
 c1006a8:	e20330ff 	and	r3, r3, #255	; 0xff
 c1006ac:	e1e03003 	mvn	r3, r3
 c1006b0:	e203305f 	and	r3, r3, #95	; 0x5f
 c1006b4:	e1e03003 	mvn	r3, r3
 c1006b8:	e20330ff 	and	r3, r3, #255	; 0xff
 c1006bc:	e20330ff 	and	r3, r3, #255	; 0xff
 c1006c0:	e3a00003 	mov	r0, #3
 c1006c4:	e1a01003 	mov	r1, r3
 c1006c8:	eb0000c7 	bl	c1009ec <iic_start>
	iic_putByte(addr & 0xFF);
 c1006cc:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c1006d0:	e20330ff 	and	r3, r3, #255	; 0xff
 c1006d4:	e1a00003 	mov	r0, r3
 c1006d8:	eb0000e4 	bl	c100a70 <iic_putByte>
	iic_putByte(data);
 c1006dc:	e55b3017 	ldrb	r3, [fp, #-23]	; 0xffffffe9
 c1006e0:	e1a00003 	mov	r0, r3
 c1006e4:	eb0000e1 	bl	c100a70 <iic_putByte>
	iic_stop(5);
 c1006e8:	e3a00005 	mov	r0, #5
 c1006ec:	eb000120 	bl	c100b74 <iic_stop>
}
 c1006f0:	e24bd00c 	sub	sp, fp, #12
 c1006f4:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1006f8:	e12fff1e 	bx	lr

0c1006fc <at24c04_byteread>:

/*
** Realiza una lectura aleatoria de la dirección indicada
*/
void at24c04_byteread( uint16 addr, uint8 *data ){
 c1006fc:	e1a0c00d 	mov	ip, sp
 c100700:	e92dd800 	push	{fp, ip, lr, pc}
 c100704:	e24cb004 	sub	fp, ip, #4
 c100708:	e24dd010 	sub	sp, sp, #16
 c10070c:	e1a03000 	mov	r3, r0
 c100710:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
 c100714:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
	uint8 page;
	page = (addr & 0x100) >> 8;
 c100718:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c10071c:	e2033c01 	and	r3, r3, #256	; 0x100
 c100720:	e1a03443 	asr	r3, r3, #8
 c100724:	e54b300d 	strb	r3, [fp, #-13]
	iic_start( IIC_Tx, DEVICE_ADDR | (page << 1) | WRITE );
 c100728:	e55b300d 	ldrb	r3, [fp, #-13]
 c10072c:	e1a03083 	lsl	r3, r3, #1
 c100730:	e20330ff 	and	r3, r3, #255	; 0xff
 c100734:	e1e03003 	mvn	r3, r3
 c100738:	e203305f 	and	r3, r3, #95	; 0x5f
 c10073c:	e1e03003 	mvn	r3, r3
 c100740:	e20330ff 	and	r3, r3, #255	; 0xff
 c100744:	e20330ff 	and	r3, r3, #255	; 0xff
 c100748:	e3a00003 	mov	r0, #3
 c10074c:	e1a01003 	mov	r1, r3
 c100750:	eb0000a5 	bl	c1009ec <iic_start>
	iic_putByte( addr & 0xFF );
 c100754:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c100758:	e20330ff 	and	r3, r3, #255	; 0xff
 c10075c:	e1a00003 	mov	r0, r3
 c100760:	eb0000c2 	bl	c100a70 <iic_putByte>
	// Hasta aqui hacemos  lo mismo que en la anterior solo le tenemos que decir la direccion en la que queremos hacer la lectura
	iic_start(IIC_Rx, DEVICE_ADDR | (page << 1) | READ);
 c100764:	e55b300d 	ldrb	r3, [fp, #-13]
 c100768:	e1a03083 	lsl	r3, r3, #1
 c10076c:	e20330ff 	and	r3, r3, #255	; 0xff
 c100770:	e1e03003 	mvn	r3, r3
 c100774:	e203305e 	and	r3, r3, #94	; 0x5e
 c100778:	e1e03003 	mvn	r3, r3
 c10077c:	e20330ff 	and	r3, r3, #255	; 0xff
 c100780:	e20330ff 	and	r3, r3, #255	; 0xff
 c100784:	e3a00002 	mov	r0, #2
 c100788:	e1a01003 	mov	r1, r3
 c10078c:	eb000096 	bl	c1009ec <iic_start>
	*data = iic_getByte(NO_RxACK);
 c100790:	e3a00000 	mov	r0, #0
 c100794:	eb0000ce 	bl	c100ad4 <iic_getByte>
 c100798:	e1a03000 	mov	r3, r0
 c10079c:	e1a02003 	mov	r2, r3
 c1007a0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
 c1007a4:	e5c32000 	strb	r2, [r3]
	iic_stop(5);
 c1007a8:	e3a00005 	mov	r0, #5
 c1007ac:	eb0000f0 	bl	c100b74 <iic_stop>
}
 c1007b0:	e24bd00c 	sub	sp, fp, #12
 c1007b4:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1007b8:	e12fff1e 	bx	lr

0c1007bc <at24c04_load>:

/*
** Realiza una lectura secuencial de la memoria completa
*/
void at24c04_load( uint8 *buffer ){
 c1007bc:	e1a0c00d 	mov	ip, sp
 c1007c0:	e92dd810 	push	{r4, fp, ip, lr, pc}
 c1007c4:	e24cb004 	sub	fp, ip, #4
 c1007c8:	e24dd014 	sub	sp, sp, #20
 c1007cc:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
	uint16 indice;
	uint8 page = 0;
 c1007d0:	e3a03000 	mov	r3, #0
 c1007d4:	e54b3017 	strb	r3, [fp, #-23]	; 0xffffffe9
	uint16 addr = 0;
 c1007d8:	e3a03000 	mov	r3, #0
 c1007dc:	e14b31ba 	strh	r3, [fp, #-26]	; 0xffffffe6
	iic_start(IIC_Tx, DEVICE_ADDR | (page << 1) | WRITE);
 c1007e0:	e55b3017 	ldrb	r3, [fp, #-23]	; 0xffffffe9
 c1007e4:	e1a03083 	lsl	r3, r3, #1
 c1007e8:	e20330ff 	and	r3, r3, #255	; 0xff
 c1007ec:	e1e03003 	mvn	r3, r3
 c1007f0:	e203305f 	and	r3, r3, #95	; 0x5f
 c1007f4:	e1e03003 	mvn	r3, r3
 c1007f8:	e20330ff 	and	r3, r3, #255	; 0xff
 c1007fc:	e20330ff 	and	r3, r3, #255	; 0xff
 c100800:	e3a00003 	mov	r0, #3
 c100804:	e1a01003 	mov	r1, r3
 c100808:	eb000077 	bl	c1009ec <iic_start>
	iic_putByte(addr & 0xFF);
 c10080c:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
 c100810:	e20330ff 	and	r3, r3, #255	; 0xff
 c100814:	e1a00003 	mov	r0, r3
 c100818:	eb000094 	bl	c100a70 <iic_putByte>
	iic_start(IIC_Rx, DEVICE_ADDR | (page << 1) | READ);
 c10081c:	e55b3017 	ldrb	r3, [fp, #-23]	; 0xffffffe9
 c100820:	e1a03083 	lsl	r3, r3, #1
 c100824:	e20330ff 	and	r3, r3, #255	; 0xff
 c100828:	e1e03003 	mvn	r3, r3
 c10082c:	e203305e 	and	r3, r3, #94	; 0x5e
 c100830:	e1e03003 	mvn	r3, r3
 c100834:	e20330ff 	and	r3, r3, #255	; 0xff
 c100838:	e20330ff 	and	r3, r3, #255	; 0xff
 c10083c:	e3a00002 	mov	r0, #2
 c100840:	e1a01003 	mov	r1, r3
 c100844:	eb000068 	bl	c1009ec <iic_start>
	for(indice = 0; indice < AT24C04_DEPTH-1; indice++){
 c100848:	e3a03000 	mov	r3, #0
 c10084c:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
 c100850:	ea000009 	b	c10087c <at24c04_load+0xc0>
		buffer[indice] = iic_getByte(RxACK);
 c100854:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c100858:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
 c10085c:	e0824003 	add	r4, r2, r3
 c100860:	e3a00001 	mov	r0, #1
 c100864:	eb00009a 	bl	c100ad4 <iic_getByte>
 c100868:	e1a03000 	mov	r3, r0
 c10086c:	e5c43000 	strb	r3, [r4]
	uint8 page = 0;
	uint16 addr = 0;
	iic_start(IIC_Tx, DEVICE_ADDR | (page << 1) | WRITE);
	iic_putByte(addr & 0xFF);
	iic_start(IIC_Rx, DEVICE_ADDR | (page << 1) | READ);
	for(indice = 0; indice < AT24C04_DEPTH-1; indice++){
 c100870:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c100874:	e2833001 	add	r3, r3, #1
 c100878:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
 c10087c:	e15b21b6 	ldrh	r2, [fp, #-22]	; 0xffffffea
 c100880:	e59f3030 	ldr	r3, [pc, #48]	; c1008b8 <at24c04_load+0xfc>
 c100884:	e1520003 	cmp	r2, r3
 c100888:	9afffff1 	bls	c100854 <at24c04_load+0x98>
		buffer[indice] = iic_getByte(RxACK);
	}
	//La ultima posicion diferente
	buffer[AT24C04_DEPTH] = iic_getByte(NO_RxACK);
 c10088c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c100890:	e2834c02 	add	r4, r3, #512	; 0x200
 c100894:	e3a00000 	mov	r0, #0
 c100898:	eb00008d 	bl	c100ad4 <iic_getByte>
 c10089c:	e1a03000 	mov	r3, r0
 c1008a0:	e5c43000 	strb	r3, [r4]
	iic_stop(5);
 c1008a4:	e3a00005 	mov	r0, #5
 c1008a8:	eb0000b1 	bl	c100b74 <iic_stop>
}
 c1008ac:	e24bd010 	sub	sp, fp, #16
 c1008b0:	e89d6810 	ldm	sp, {r4, fp, sp, lr}
 c1008b4:	e12fff1e 	bx	lr
 c1008b8:	000001fe 	.word	0x000001fe

0c1008bc <at24c04_store>:

/*
** Realiza una escritura paginada de la memoria completa
*/
void at24c04_store( uint8 *buffer ){
 c1008bc:	e1a0c00d 	mov	ip, sp
 c1008c0:	e92dd800 	push	{fp, ip, lr, pc}
 c1008c4:	e24cb004 	sub	fp, ip, #4
 c1008c8:	e24dd018 	sub	sp, sp, #24
 c1008cc:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
	uint16 direccion = 0;
 c1008d0:	e3a03000 	mov	r3, #0
 c1008d4:	e14b30be 	strh	r3, [fp, #-14]
	uint16 indice;
	int p;
	uint8 pagina;
	for (p = 0; p < 32; ++p) {
 c1008d8:	e3a03000 	mov	r3, #0
 c1008dc:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
 c1008e0:	ea000029 	b	c10098c <at24c04_store+0xd0>
		pagina = (direccion & 0x100) >> 8;
 c1008e4:	e15b30be 	ldrh	r3, [fp, #-14]
 c1008e8:	e2033c01 	and	r3, r3, #256	; 0x100
 c1008ec:	e1a03443 	asr	r3, r3, #8
 c1008f0:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
		iic_start(IIC_Tx, DEVICE_ADDR | (pagina << 1) | WRITE);
 c1008f4:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c1008f8:	e1a03083 	lsl	r3, r3, #1
 c1008fc:	e20330ff 	and	r3, r3, #255	; 0xff
 c100900:	e1e03003 	mvn	r3, r3
 c100904:	e203305f 	and	r3, r3, #95	; 0x5f
 c100908:	e1e03003 	mvn	r3, r3
 c10090c:	e20330ff 	and	r3, r3, #255	; 0xff
 c100910:	e20330ff 	and	r3, r3, #255	; 0xff
 c100914:	e3a00003 	mov	r0, #3
 c100918:	e1a01003 	mov	r1, r3
 c10091c:	eb000032 	bl	c1009ec <iic_start>
		iic_putByte(direccion & 0xFF);
 c100920:	e15b30be 	ldrh	r3, [fp, #-14]
 c100924:	e20330ff 	and	r3, r3, #255	; 0xff
 c100928:	e1a00003 	mov	r0, r3
 c10092c:	eb00004f 	bl	c100a70 <iic_putByte>
		for (indice = 0; indice < 16; indice++, direccion++) {
 c100930:	e3a03000 	mov	r3, #0
 c100934:	e14b31b0 	strh	r3, [fp, #-16]
 c100938:	ea00000b 	b	c10096c <at24c04_store+0xb0>
			iic_putByte(buffer[direccion]);
 c10093c:	e15b30be 	ldrh	r3, [fp, #-14]
 c100940:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
 c100944:	e0823003 	add	r3, r2, r3
 c100948:	e5d33000 	ldrb	r3, [r3]
 c10094c:	e1a00003 	mov	r0, r3
 c100950:	eb000046 	bl	c100a70 <iic_putByte>
	uint8 pagina;
	for (p = 0; p < 32; ++p) {
		pagina = (direccion & 0x100) >> 8;
		iic_start(IIC_Tx, DEVICE_ADDR | (pagina << 1) | WRITE);
		iic_putByte(direccion & 0xFF);
		for (indice = 0; indice < 16; indice++, direccion++) {
 c100954:	e15b31b0 	ldrh	r3, [fp, #-16]
 c100958:	e2833001 	add	r3, r3, #1
 c10095c:	e14b31b0 	strh	r3, [fp, #-16]
 c100960:	e15b30be 	ldrh	r3, [fp, #-14]
 c100964:	e2833001 	add	r3, r3, #1
 c100968:	e14b30be 	strh	r3, [fp, #-14]
 c10096c:	e15b31b0 	ldrh	r3, [fp, #-16]
 c100970:	e353000f 	cmp	r3, #15
 c100974:	9afffff0 	bls	c10093c <at24c04_store+0x80>
			iic_putByte(buffer[direccion]);
		}
		iic_stop(5);
 c100978:	e3a00005 	mov	r0, #5
 c10097c:	eb00007c 	bl	c100b74 <iic_stop>
void at24c04_store( uint8 *buffer ){
	uint16 direccion = 0;
	uint16 indice;
	int p;
	uint8 pagina;
	for (p = 0; p < 32; ++p) {
 c100980:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c100984:	e2833001 	add	r3, r3, #1
 c100988:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
 c10098c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c100990:	e353001f 	cmp	r3, #31
 c100994:	daffffd2 	ble	c1008e4 <at24c04_store+0x28>
		for (indice = 0; indice < 16; indice++, direccion++) {
			iic_putByte(buffer[direccion]);
		}
		iic_stop(5);
	}
}
 c100998:	e24bd00c 	sub	sp, fp, #12
 c10099c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1009a0:	e12fff1e 	bx	lr

0c1009a4 <iic_init>:
**   Interrupciones: habilitadas
**   Transmisión/recepción: activada
**   Frecuencia de comunicación: 250 KHz
**   Generación de ACK: automática
*/
void iic_init( void ){
 c1009a4:	e1a0c00d 	mov	ip, sp
 c1009a8:	e92dd800 	push	{fp, ip, lr, pc}
 c1009ac:	e24cb004 	sub	fp, ip, #4
	IICADD = 0x0;
 c1009b0:	e59f3028 	ldr	r3, [pc, #40]	; c1009e0 <iic_init+0x3c>
 c1009b4:	e3a02000 	mov	r2, #0
 c1009b8:	e5832000 	str	r2, [r3]
	IICCON = 0xAF;
 c1009bc:	e59f3020 	ldr	r3, [pc, #32]	; c1009e4 <iic_init+0x40>
 c1009c0:	e3a020af 	mov	r2, #175	; 0xaf
 c1009c4:	e5832000 	str	r2, [r3]
	IICSTAT = 0x10;
 c1009c8:	e59f3018 	ldr	r3, [pc, #24]	; c1009e8 <iic_init+0x44>
 c1009cc:	e3a02010 	mov	r2, #16
 c1009d0:	e5832000 	str	r2, [r3]
}
 c1009d4:	e24bd00c 	sub	sp, fp, #12
 c1009d8:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1009dc:	e12fff1e 	bx	lr
 c1009e0:	01d60008 	.word	0x01d60008
 c1009e4:	01d60000 	.word	0x01d60000
 c1009e8:	01d60004 	.word	0x01d60004

0c1009ec <iic_start>:
** Inicia un flujo de transmición/recepción en la que el microcontrolador actúa como master:
**   Genenera la START condition
**   Envía la dirección del dispositivo esclavo
**   Espera la recepción de ACK
*/
void iic_start( uint8 mode, uint8 byte ){
 c1009ec:	e1a0c00d 	mov	ip, sp
 c1009f0:	e92dd800 	push	{fp, ip, lr, pc}
 c1009f4:	e24cb004 	sub	fp, ip, #4
 c1009f8:	e24dd008 	sub	sp, sp, #8
 c1009fc:	e1a02000 	mov	r2, r0
 c100a00:	e1a03001 	mov	r3, r1
 c100a04:	e54b200d 	strb	r2, [fp, #-13]
 c100a08:	e54b300e 	strb	r3, [fp, #-14]
	IICDS = byte;
 c100a0c:	e59f3050 	ldr	r3, [pc, #80]	; c100a64 <iic_start+0x78>
 c100a10:	e55b200e 	ldrb	r2, [fp, #-14]
 c100a14:	e5832000 	str	r2, [r3]
	IICSTAT = (mode << 6)| (1 << 4) | (1 << 5);
 c100a18:	e59f3048 	ldr	r3, [pc, #72]	; c100a68 <iic_start+0x7c>
 c100a1c:	e55b200d 	ldrb	r2, [fp, #-13]
 c100a20:	e1a02302 	lsl	r2, r2, #6
 c100a24:	e3822030 	orr	r2, r2, #48	; 0x30
 c100a28:	e5832000 	str	r2, [r3]
	IICCON &= ~(1<<4);
 c100a2c:	e59f3038 	ldr	r3, [pc, #56]	; c100a6c <iic_start+0x80>
 c100a30:	e59f2034 	ldr	r2, [pc, #52]	; c100a6c <iic_start+0x80>
 c100a34:	e5922000 	ldr	r2, [r2]
 c100a38:	e3c22010 	bic	r2, r2, #16
 c100a3c:	e5832000 	str	r2, [r3]
	while(!( IICCON & ( 1 << 4)));
 c100a40:	e1a00000 	nop			; (mov r0, r0)
 c100a44:	e59f3020 	ldr	r3, [pc, #32]	; c100a6c <iic_start+0x80>
 c100a48:	e5933000 	ldr	r3, [r3]
 c100a4c:	e2033010 	and	r3, r3, #16
 c100a50:	e3530000 	cmp	r3, #0
 c100a54:	0afffffa 	beq	c100a44 <iic_start+0x58>
}
 c100a58:	e24bd00c 	sub	sp, fp, #12
 c100a5c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c100a60:	e12fff1e 	bx	lr
 c100a64:	01d6000c 	.word	0x01d6000c
 c100a68:	01d60004 	.word	0x01d60004
 c100a6c:	01d60000 	.word	0x01d60000

0c100a70 <iic_putByte>:
/*
** Actuando el microcontrolador como master:
**   Envía el byte indicado
**   Espera la recepción de ACK
*/
void iic_putByte( uint8 byte ){
 c100a70:	e1a0c00d 	mov	ip, sp
 c100a74:	e92dd800 	push	{fp, ip, lr, pc}
 c100a78:	e24cb004 	sub	fp, ip, #4
 c100a7c:	e24dd008 	sub	sp, sp, #8
 c100a80:	e1a03000 	mov	r3, r0
 c100a84:	e54b300d 	strb	r3, [fp, #-13]
	IICDS = byte;
 c100a88:	e59f303c 	ldr	r3, [pc, #60]	; c100acc <iic_putByte+0x5c>
 c100a8c:	e55b200d 	ldrb	r2, [fp, #-13]
 c100a90:	e5832000 	str	r2, [r3]
	IICCON &=  ~(1<<4);
 c100a94:	e59f3034 	ldr	r3, [pc, #52]	; c100ad0 <iic_putByte+0x60>
 c100a98:	e59f2030 	ldr	r2, [pc, #48]	; c100ad0 <iic_putByte+0x60>
 c100a9c:	e5922000 	ldr	r2, [r2]
 c100aa0:	e3c22010 	bic	r2, r2, #16
 c100aa4:	e5832000 	str	r2, [r3]
	while( !(IICCON & (1 << 4)) );
 c100aa8:	e1a00000 	nop			; (mov r0, r0)
 c100aac:	e59f301c 	ldr	r3, [pc, #28]	; c100ad0 <iic_putByte+0x60>
 c100ab0:	e5933000 	ldr	r3, [r3]
 c100ab4:	e2033010 	and	r3, r3, #16
 c100ab8:	e3530000 	cmp	r3, #0
 c100abc:	0afffffa 	beq	c100aac <iic_putByte+0x3c>
}
 c100ac0:	e24bd00c 	sub	sp, fp, #12
 c100ac4:	e89d6800 	ldm	sp, {fp, sp, lr}
 c100ac8:	e12fff1e 	bx	lr
 c100acc:	01d6000c 	.word	0x01d6000c
 c100ad0:	01d60000 	.word	0x01d60000

0c100ad4 <iic_getByte>:
** Actuando el microcontrolador como master:
**   Espera la recepción de un byte
**   Genera o no ACK
**   Devuelve el byte recibido
*/
uint8 iic_getByte( uint8 ack ){
 c100ad4:	e1a0c00d 	mov	ip, sp
 c100ad8:	e92dd800 	push	{fp, ip, lr, pc}
 c100adc:	e24cb004 	sub	fp, ip, #4
 c100ae0:	e24dd008 	sub	sp, sp, #8
 c100ae4:	e1a03000 	mov	r3, r0
 c100ae8:	e54b300d 	strb	r3, [fp, #-13]
	/*IICCON |= (1<<7);
	IICCON &= ~(1<<4);
	while((IICCON & (1<<4)) != (1<<4));
	return IICDS;*/
	if(ack){
 c100aec:	e55b300d 	ldrb	r3, [fp, #-13]
 c100af0:	e3530000 	cmp	r3, #0
 c100af4:	0a000005 	beq	c100b10 <iic_getByte+0x3c>
		IICCON = IICCON | (1 << 7);
 c100af8:	e59f306c 	ldr	r3, [pc, #108]	; c100b6c <iic_getByte+0x98>
 c100afc:	e59f2068 	ldr	r2, [pc, #104]	; c100b6c <iic_getByte+0x98>
 c100b00:	e5922000 	ldr	r2, [r2]
 c100b04:	e3822080 	orr	r2, r2, #128	; 0x80
 c100b08:	e5832000 	str	r2, [r3]
 c100b0c:	ea000004 	b	c100b24 <iic_getByte+0x50>
	}
	else{
		IICCON = IICCON & ~(1 << 7);
 c100b10:	e59f3054 	ldr	r3, [pc, #84]	; c100b6c <iic_getByte+0x98>
 c100b14:	e59f2050 	ldr	r2, [pc, #80]	; c100b6c <iic_getByte+0x98>
 c100b18:	e5922000 	ldr	r2, [r2]
 c100b1c:	e3c22080 	bic	r2, r2, #128	; 0x80
 c100b20:	e5832000 	str	r2, [r3]
	}

	IICCON &= ~(1 << 4);
 c100b24:	e59f3040 	ldr	r3, [pc, #64]	; c100b6c <iic_getByte+0x98>
 c100b28:	e59f203c 	ldr	r2, [pc, #60]	; c100b6c <iic_getByte+0x98>
 c100b2c:	e5922000 	ldr	r2, [r2]
 c100b30:	e3c22010 	bic	r2, r2, #16
 c100b34:	e5832000 	str	r2, [r3]

	while(!(IICCON & (1 << 4)));
 c100b38:	e1a00000 	nop			; (mov r0, r0)
 c100b3c:	e59f3028 	ldr	r3, [pc, #40]	; c100b6c <iic_getByte+0x98>
 c100b40:	e5933000 	ldr	r3, [r3]
 c100b44:	e2033010 	and	r3, r3, #16
 c100b48:	e3530000 	cmp	r3, #0
 c100b4c:	0afffffa 	beq	c100b3c <iic_getByte+0x68>
	return IICDS;
 c100b50:	e59f3018 	ldr	r3, [pc, #24]	; c100b70 <iic_getByte+0x9c>
 c100b54:	e5933000 	ldr	r3, [r3]
 c100b58:	e20330ff 	and	r3, r3, #255	; 0xff
}
 c100b5c:	e1a00003 	mov	r0, r3
 c100b60:	e24bd00c 	sub	sp, fp, #12
 c100b64:	e89d6800 	ldm	sp, {fp, sp, lr}
 c100b68:	e12fff1e 	bx	lr
 c100b6c:	01d60000 	.word	0x01d60000
 c100b70:	01d6000c 	.word	0x01d6000c

0c100b74 <iic_stop>:

/*
** Envía la stop condition y espera los ms indicados para que haga efecto
*/
void iic_stop( uint16 ms ){
 c100b74:	e1a0c00d 	mov	ip, sp
 c100b78:	e92dd800 	push	{fp, ip, lr, pc}
 c100b7c:	e24cb004 	sub	fp, ip, #4
 c100b80:	e24dd008 	sub	sp, sp, #8
 c100b84:	e1a03000 	mov	r3, r0
 c100b88:	e14b30be 	strh	r3, [fp, #-14]
	IICSTAT &= ~(1<<5);
 c100b8c:	e59f3038 	ldr	r3, [pc, #56]	; c100bcc <iic_stop+0x58>
 c100b90:	e59f2034 	ldr	r2, [pc, #52]	; c100bcc <iic_stop+0x58>
 c100b94:	e5922000 	ldr	r2, [r2]
 c100b98:	e3c22020 	bic	r2, r2, #32
 c100b9c:	e5832000 	str	r2, [r3]
	IICCON &= ~(1<<4);
 c100ba0:	e59f3028 	ldr	r3, [pc, #40]	; c100bd0 <iic_stop+0x5c>
 c100ba4:	e59f2024 	ldr	r2, [pc, #36]	; c100bd0 <iic_stop+0x5c>
 c100ba8:	e5922000 	ldr	r2, [r2]
 c100bac:	e3c22010 	bic	r2, r2, #16
 c100bb0:	e5832000 	str	r2, [r3]
	sw_delay_ms(ms);
 c100bb4:	e15b30be 	ldrh	r3, [fp, #-14]
 c100bb8:	e1a00003 	mov	r0, r3
 c100bbc:	eb00035b 	bl	c101930 <sw_delay_ms>
}
 c100bc0:	e24bd00c 	sub	sp, fp, #12
 c100bc4:	e89d6800 	ldm	sp, {fp, sp, lr}
 c100bc8:	e12fff1e 	bx	lr
 c100bcc:	01d60004 	.word	0x01d60004
 c100bd0:	01d60000 	.word	0x01d60000

0c100bd4 <port_init>:
void isr_ETHERNET_dummy (void)	__attribute__ ((interrupt ("IRQ")));
void isr_TICK_dummy (void) 		__attribute__ ((interrupt ("IRQ")));
void isr_RESET_dummy (void)     __attribute__ ((interrupt ("IRQ")));


static void port_init() {
 c100bd4:	e1a0c00d 	mov	ip, sp
 c100bd8:	e92dd800 	push	{fp, ip, lr, pc}
 c100bdc:	e24cb004 	sub	fp, ip, #4

	/* Esta en la pagina 56 del Tema 2 */

	PDATA = ~0;
 c100be0:	e59f3100 	ldr	r3, [pc, #256]	; c100ce8 <port_init+0x114>
 c100be4:	e3e02000 	mvn	r2, #0
 c100be8:	e5832000 	str	r2, [r3]
	PCONA = 0xFE; //(00.1111.1110)
 c100bec:	e59f30f8 	ldr	r3, [pc, #248]	; c100cec <port_init+0x118>
 c100bf0:	e3a020fe 	mov	r2, #254	; 0xfe
 c100bf4:	e5832000 	str	r2, [r3]
	PDATB = ~0;
 c100bf8:	e59f30f0 	ldr	r3, [pc, #240]	; c100cf0 <port_init+0x11c>
 c100bfc:	e3e02000 	mvn	r2, #0
 c100c00:	e5832000 	str	r2, [r3]
	PCONB = 0x14F; // (001.0100.1111)
 c100c04:	e59f30e8 	ldr	r3, [pc, #232]	; c100cf4 <port_init+0x120>
 c100c08:	e59f20e8 	ldr	r2, [pc, #232]	; c100cf8 <port_init+0x124>
 c100c0c:	e5832000 	str	r2, [r3]
	PDATC = ~0;
 c100c10:	e59f30e4 	ldr	r3, [pc, #228]	; c100cfc <port_init+0x128>
 c100c14:	e3e02000 	mvn	r2, #0
 c100c18:	e5832000 	str	r2, [r3]
	PCONC = 0x5FF555FF; // (0101.1111.1111.0101.0101.0101.1111.1111)
 c100c1c:	e59f30dc 	ldr	r3, [pc, #220]	; c100d00 <port_init+0x12c>
 c100c20:	e59f20dc 	ldr	r2, [pc, #220]	; c100d04 <port_init+0x130>
 c100c24:	e5832000 	str	r2, [r3]
	PUPC = 0x94FB; // (1001.0100.1111.1011)
 c100c28:	e59f30d8 	ldr	r3, [pc, #216]	; c100d08 <port_init+0x134>
 c100c2c:	e59f20d8 	ldr	r2, [pc, #216]	; c100d0c <port_init+0x138>
 c100c30:	e5832000 	str	r2, [r3]
	PDATD = ~0;
 c100c34:	e59f30d4 	ldr	r3, [pc, #212]	; c100d10 <port_init+0x13c>
 c100c38:	e3e02000 	mvn	r2, #0
 c100c3c:	e5832000 	str	r2, [r3]
	PCOND = 0xAAAA; // (1010.1010.1010.1010)
 c100c40:	e59f30cc 	ldr	r3, [pc, #204]	; c100d14 <port_init+0x140>
 c100c44:	e59f20cc 	ldr	r2, [pc, #204]	; c100d18 <port_init+0x144>
 c100c48:	e5832000 	str	r2, [r3]
	PUPD = 0xFF; // (1111.1111)
 c100c4c:	e59f30c8 	ldr	r3, [pc, #200]	; c100d1c <port_init+0x148>
 c100c50:	e3a020ff 	mov	r2, #255	; 0xff
 c100c54:	e5832000 	str	r2, [r3]
	PDATE = ~0;
 c100c58:	e59f30c0 	ldr	r3, [pc, #192]	; c100d20 <port_init+0x14c>
 c100c5c:	e3e02000 	mvn	r2, #0
 c100c60:	e5832000 	str	r2, [r3]
	PCONE = 0x25569; // (10.0101.0101.0110.1001)
 c100c64:	e59f30b8 	ldr	r3, [pc, #184]	; c100d24 <port_init+0x150>
 c100c68:	e59f20b8 	ldr	r2, [pc, #184]	; c100d28 <port_init+0x154>
 c100c6c:	e5832000 	str	r2, [r3]
	PUPE = 0x1FB; // (1.1111.1011)
 c100c70:	e59f30b4 	ldr	r3, [pc, #180]	; c100d2c <port_init+0x158>
 c100c74:	e59f20b4 	ldr	r2, [pc, #180]	; c100d30 <port_init+0x15c>
 c100c78:	e5832000 	str	r2, [r3]
	PDATF = ~0;
 c100c7c:	e59f30b0 	ldr	r3, [pc, #176]	; c100d34 <port_init+0x160>
 c100c80:	e3e02000 	mvn	r2, #0
 c100c84:	e5832000 	str	r2, [r3]
	PCONF = 0x251A; // (00.0000.0010.0101.0001.1010)
 c100c88:	e59f30a8 	ldr	r3, [pc, #168]	; c100d38 <port_init+0x164>
 c100c8c:	e59f20a8 	ldr	r2, [pc, #168]	; c100d3c <port_init+0x168>
 c100c90:	e5832000 	str	r2, [r3]
	PUPF = 0x74; // (0.0111.0100)
 c100c94:	e59f30a4 	ldr	r3, [pc, #164]	; c100d40 <port_init+0x16c>
 c100c98:	e3a02074 	mov	r2, #116	; 0x74
 c100c9c:	e5832000 	str	r2, [r3]
	PDATG = ~0;
 c100ca0:	e59f309c 	ldr	r3, [pc, #156]	; c100d44 <port_init+0x170>
 c100ca4:	e3e02000 	mvn	r2, #0
 c100ca8:	e5832000 	str	r2, [r3]
	PCONG = 0xF5FF; // (1111.0101.1111.1111)
 c100cac:	e59f3094 	ldr	r3, [pc, #148]	; c100d48 <port_init+0x174>
 c100cb0:	e59f2094 	ldr	r2, [pc, #148]	; c100d4c <port_init+0x178>
 c100cb4:	e5832000 	str	r2, [r3]
	PUPG = 0x30; // (0011.0000)
 c100cb8:	e59f3090 	ldr	r3, [pc, #144]	; c100d50 <port_init+0x17c>
 c100cbc:	e3a02030 	mov	r2, #48	; 0x30
 c100cc0:	e5832000 	str	r2, [r3]
	SPUCR = 0x7; // (111)
 c100cc4:	e59f3088 	ldr	r3, [pc, #136]	; c100d54 <port_init+0x180>
 c100cc8:	e3a02007 	mov	r2, #7
 c100ccc:	e5832000 	str	r2, [r3]
	EXTINT = 0x22000220; // (X010.X010.X000.X000.X000.X010.X010.X000)
 c100cd0:	e59f3080 	ldr	r3, [pc, #128]	; c100d58 <port_init+0x184>
 c100cd4:	e59f2080 	ldr	r2, [pc, #128]	; c100d5c <port_init+0x188>
 c100cd8:	e5832000 	str	r2, [r3]
}
 c100cdc:	e24bd00c 	sub	sp, fp, #12
 c100ce0:	e89d6800 	ldm	sp, {fp, sp, lr}
 c100ce4:	e12fff1e 	bx	lr
 c100ce8:	01d20004 	.word	0x01d20004
 c100cec:	01d20000 	.word	0x01d20000
 c100cf0:	01d2000c 	.word	0x01d2000c
 c100cf4:	01d20008 	.word	0x01d20008
 c100cf8:	0000014f 	.word	0x0000014f
 c100cfc:	01d20014 	.word	0x01d20014
 c100d00:	01d20010 	.word	0x01d20010
 c100d04:	5ff555ff 	.word	0x5ff555ff
 c100d08:	01d20018 	.word	0x01d20018
 c100d0c:	000094fb 	.word	0x000094fb
 c100d10:	01d20020 	.word	0x01d20020
 c100d14:	01d2001c 	.word	0x01d2001c
 c100d18:	0000aaaa 	.word	0x0000aaaa
 c100d1c:	01d20024 	.word	0x01d20024
 c100d20:	01d2002c 	.word	0x01d2002c
 c100d24:	01d20028 	.word	0x01d20028
 c100d28:	00025569 	.word	0x00025569
 c100d2c:	01d20030 	.word	0x01d20030
 c100d30:	000001fb 	.word	0x000001fb
 c100d34:	01d20038 	.word	0x01d20038
 c100d38:	01d20034 	.word	0x01d20034
 c100d3c:	0000251a 	.word	0x0000251a
 c100d40:	01d2003c 	.word	0x01d2003c
 c100d44:	01d20044 	.word	0x01d20044
 c100d48:	01d20040 	.word	0x01d20040
 c100d4c:	0000f5ff 	.word	0x0000f5ff
 c100d50:	01d20048 	.word	0x01d20048
 c100d54:	01d2004c 	.word	0x01d2004c
 c100d58:	01d20050 	.word	0x01d20050
 c100d5c:	22000220 	.word	0x22000220

0c100d60 <sys_init>:
**      Borra interrupciones pendientes externas e internas
**      IRQ vectorizadas, linea IRQ activada, linea FIQ desactivada
**  Inicializa el UART0
**  Muestra información del sistema por la UART0
*/
void sys_init( void ){
 c100d60:	e1a0c00d 	mov	ip, sp
 c100d64:	e92dd800 	push	{fp, ip, lr, pc}
 c100d68:	e24cb004 	sub	fp, ip, #4

	/* Mirar pagina 7 y 8 del tema 2 */
	WTCON = 0;
 c100d6c:	e59f30e8 	ldr	r3, [pc, #232]	; c100e5c <sys_init+0xfc>
 c100d70:	e3a02000 	mov	r2, #0
 c100d74:	e5832000 	str	r2, [r3]

	/* Configuracion de las interrupciones */
	INTMSK = ~0; // Enmascara todas las interrupciones
 c100d78:	e59f30e0 	ldr	r3, [pc, #224]	; c100e60 <sys_init+0x100>
 c100d7c:	e3e02000 	mvn	r2, #0
 c100d80:	e5832000 	str	r2, [r3]
	I_PMST = 0x1F1B;
 c100d84:	e59f30d8 	ldr	r3, [pc, #216]	; c100e64 <sys_init+0x104>
 c100d88:	e59f20d8 	ldr	r2, [pc, #216]	; c100e68 <sys_init+0x108>
 c100d8c:	e5832000 	str	r2, [r3]
	I_PSLV = 0x1B1B1B1B;
 c100d90:	e59f30d4 	ldr	r3, [pc, #212]	; c100e6c <sys_init+0x10c>
 c100d94:	e59f20d4 	ldr	r2, [pc, #212]	; c100e70 <sys_init+0x110>
 c100d98:	e5832000 	str	r2, [r3]
	INTMOD = 0x0;
 c100d9c:	e59f30d0 	ldr	r3, [pc, #208]	; c100e74 <sys_init+0x114>
 c100da0:	e3a02000 	mov	r2, #0
 c100da4:	e5832000 	str	r2, [r3]
	INTCON = 0x1;
 c100da8:	e3a0361e 	mov	r3, #31457280	; 0x1e00000
 c100dac:	e3a02001 	mov	r2, #1
 c100db0:	e5832000 	str	r2, [r3]
	install_dummy_isr(); // Instala RTI por defecto a todas los tipos de interrupción
 c100db4:	eb000037 	bl	c100e98 <install_dummy_isr>
	EXTINTPND = ~(0x0); // Borra interrupciones externas pendientes por  la línea EINT[7:4] ()
 c100db8:	e59f30b8 	ldr	r3, [pc, #184]	; c100e78 <sys_init+0x118>
 c100dbc:	e3e02000 	mvn	r2, #0
 c100dc0:	e5832000 	str	r2, [r3]
	I_ISPC = 0x0; // Borra todas las interrupciones pendientes
 c100dc4:	e59f30b0 	ldr	r3, [pc, #176]	; c100e7c <sys_init+0x11c>
 c100dc8:	e3a02000 	mov	r2, #0
 c100dcc:	e5832000 	str	r2, [r3]

	SET_OPMODE( SVCMODE ); // Pone el procesador en modo SVC
 c100dd0:	e10f0000 	mrs	r0, CPSR
 c100dd4:	e3c0001f 	bic	r0, r0, #31
 c100dd8:	e3800013 	orr	r0, r0, #19
 c100ddc:	e121f000 	msr	CPSR_c, r0
	SET_IRQFLAG( 0 ); // Habilita en el procesador las interrupciones IRQ
 c100de0:	e10f0000 	mrs	r0, CPSR
 c100de4:	e3c00080 	bic	r0, r0, #128	; 0x80
 c100de8:	e3800000 	orr	r0, r0, #0
 c100dec:	e121f000 	msr	CPSR_c, r0
	SET_FIQFLAG( 1 ); // Deshabilita en el procesador las interrupciones FIQ
 c100df0:	e10f0000 	mrs	r0, CPSR
 c100df4:	e3c00040 	bic	r0, r0, #64	; 0x40
 c100df8:	e3800040 	orr	r0, r0, #64	; 0x40
 c100dfc:	e121f000 	msr	CPSR_c, r0
	/***************************************/

	/* Configuracion del reloj del sistema */
	LOCKTIME = 0xFFF; //Estabilización del PLL: 512 us --> (1 / 8MHz)×4095
 c100e00:	e59f3078 	ldr	r3, [pc, #120]	; c100e80 <sys_init+0x120>
 c100e04:	e59f2078 	ldr	r2, [pc, #120]	; c100e84 <sys_init+0x124>
 c100e08:	e5832000 	str	r2, [r3]
	PLLCON = 0x38021; //Frecuencia del MCLK_SLOW: 500 KHz
 c100e0c:	e3a03776 	mov	r3, #30932992	; 0x1d80000
 c100e10:	e59f2070 	ldr	r2, [pc, #112]	; c100e88 <sys_init+0x128>
 c100e14:	e5832000 	str	r2, [r3]
	CLKSLOW = 0x8; //Frecuencia del MCLK: 64 MHz
 c100e18:	e59f306c 	ldr	r3, [pc, #108]	; c100e8c <sys_init+0x12c>
 c100e1c:	e3a02008 	mov	r2, #8
 c100e20:	e5832000 	str	r2, [r3]
	CLKCON = 0x7FF8; //Modo de funcionamiento normal y Reloj distribuido a todos lo controladores
 c100e24:	e59f3064 	ldr	r3, [pc, #100]	; c100e90 <sys_init+0x130>
 c100e28:	e59f2064 	ldr	r2, [pc, #100]	; c100e94 <sys_init+0x134>
 c100e2c:	e5832000 	str	r2, [r3]
	/***************************************/



	/* Mirar pagina 63 del tema 2 */
	SBUSCON = 0x8000001B; //Prioridades de bus del sistema fijas: LCD > ZDMA > BDMA > IRQ (por defecto)
 c100e30:	e3a03771 	mov	r3, #29622272	; 0x1c40000
 c100e34:	e3a0216e 	mov	r2, #-2147483621	; 0x8000001b
 c100e38:	e5832000 	str	r2, [r3]
	SYSCFG = 0x0; //Cache deshabilitada
 c100e3c:	e3a03507 	mov	r3, #29360128	; 0x1c00000
 c100e40:	e3a02000 	mov	r2, #0
 c100e44:	e5832000 	str	r2, [r3]
	port_init();
 c100e48:	ebffff61 	bl	c100bd4 <port_init>
	uart0_init();
 c100e4c:	eb000498 	bl	c1020b4 <uart0_init>
}
 c100e50:	e24bd00c 	sub	sp, fp, #12
 c100e54:	e89d6800 	ldm	sp, {fp, sp, lr}
 c100e58:	e12fff1e 	bx	lr
 c100e5c:	01d30000 	.word	0x01d30000
 c100e60:	01e0000c 	.word	0x01e0000c
 c100e64:	01e00014 	.word	0x01e00014
 c100e68:	00001f1b 	.word	0x00001f1b
 c100e6c:	01e00010 	.word	0x01e00010
 c100e70:	1b1b1b1b 	.word	0x1b1b1b1b
 c100e74:	01e00008 	.word	0x01e00008
 c100e78:	01d20054 	.word	0x01d20054
 c100e7c:	01e00024 	.word	0x01e00024
 c100e80:	01d8000c 	.word	0x01d8000c
 c100e84:	00000fff 	.word	0x00000fff
 c100e88:	00038021 	.word	0x00038021
 c100e8c:	01d80008 	.word	0x01d80008
 c100e90:	01d80004 	.word	0x01d80004
 c100e94:	00007ff8 	.word	0x00007ff8

0c100e98 <install_dummy_isr>:




static void install_dummy_isr( void ) {
 c100e98:	e1a0c00d 	mov	ip, sp
 c100e9c:	e92dd800 	push	{fp, ip, lr, pc}
 c100ea0:	e24cb004 	sub	fp, ip, #4

	pISR_RESET     = (uint32) isr_RESET_dummy;
 c100ea4:	e59f3190 	ldr	r3, [pc, #400]	; c10103c <install_dummy_isr+0x1a4>
 c100ea8:	e59f2190 	ldr	r2, [pc, #400]	; c101040 <install_dummy_isr+0x1a8>
 c100eac:	e5832000 	str	r2, [r3]
	pISR_UNDEF     = (uint32) isr_UNDEF_dummy;
 c100eb0:	e59f318c 	ldr	r3, [pc, #396]	; c101044 <install_dummy_isr+0x1ac>
 c100eb4:	e59f218c 	ldr	r2, [pc, #396]	; c101048 <install_dummy_isr+0x1b0>
 c100eb8:	e5832000 	str	r2, [r3]
	pISR_SWI       = (uint32) isr_SWI_dummy;
 c100ebc:	e59f3188 	ldr	r3, [pc, #392]	; c10104c <install_dummy_isr+0x1b4>
 c100ec0:	e59f2188 	ldr	r2, [pc, #392]	; c101050 <install_dummy_isr+0x1b8>
 c100ec4:	e5832000 	str	r2, [r3]
	pISR_PABORT    = (uint32) isr_PABORT_dummy;
 c100ec8:	e59f3184 	ldr	r3, [pc, #388]	; c101054 <install_dummy_isr+0x1bc>
 c100ecc:	e59f2184 	ldr	r2, [pc, #388]	; c101058 <install_dummy_isr+0x1c0>
 c100ed0:	e5832000 	str	r2, [r3]
	pISR_DABORT    = (uint32) isr_DABORT_dummy;
 c100ed4:	e59f3180 	ldr	r3, [pc, #384]	; c10105c <install_dummy_isr+0x1c4>
 c100ed8:	e59f2180 	ldr	r2, [pc, #384]	; c101060 <install_dummy_isr+0x1c8>
 c100edc:	e5832000 	str	r2, [r3]
	/* Reservado */
	pISR_IRQ       = (uint32) isr_IRQ_dummy;
 c100ee0:	e59f317c 	ldr	r3, [pc, #380]	; c101064 <install_dummy_isr+0x1cc>
 c100ee4:	e59f217c 	ldr	r2, [pc, #380]	; c101068 <install_dummy_isr+0x1d0>
 c100ee8:	e5832000 	str	r2, [r3]
	pISR_FIQ       = (uint32) isr_FIQ_dummy;
 c100eec:	e59f3178 	ldr	r3, [pc, #376]	; c10106c <install_dummy_isr+0x1d4>
 c100ef0:	e59f2178 	ldr	r2, [pc, #376]	; c101070 <install_dummy_isr+0x1d8>
 c100ef4:	e5832000 	str	r2, [r3]
	pISR_ADC       = (uint32) isr_ADC_dummy;
 c100ef8:	e59f3174 	ldr	r3, [pc, #372]	; c101074 <install_dummy_isr+0x1dc>
 c100efc:	e59f2174 	ldr	r2, [pc, #372]	; c101078 <install_dummy_isr+0x1e0>
 c100f00:	e5832000 	str	r2, [r3]
	pISR_RTC       = (uint32) isr_RTC_dummy;
 c100f04:	e59f3170 	ldr	r3, [pc, #368]	; c10107c <install_dummy_isr+0x1e4>
 c100f08:	e59f2170 	ldr	r2, [pc, #368]	; c101080 <install_dummy_isr+0x1e8>
 c100f0c:	e5832000 	str	r2, [r3]
	pISR_UTXD1     = (uint32) isr_UTXD1_dummy;
 c100f10:	e59f316c 	ldr	r3, [pc, #364]	; c101084 <install_dummy_isr+0x1ec>
 c100f14:	e59f216c 	ldr	r2, [pc, #364]	; c101088 <install_dummy_isr+0x1f0>
 c100f18:	e5832000 	str	r2, [r3]
	pISR_UTXD0     = (uint32) isr_UTXD0_dummy;
 c100f1c:	e59f3168 	ldr	r3, [pc, #360]	; c10108c <install_dummy_isr+0x1f4>
 c100f20:	e59f2168 	ldr	r2, [pc, #360]	; c101090 <install_dummy_isr+0x1f8>
 c100f24:	e5832000 	str	r2, [r3]
	pISR_SIO       = (uint32) isr_SIO_dummy;
 c100f28:	e59f3164 	ldr	r3, [pc, #356]	; c101094 <install_dummy_isr+0x1fc>
 c100f2c:	e59f2164 	ldr	r2, [pc, #356]	; c101098 <install_dummy_isr+0x200>
 c100f30:	e5832000 	str	r2, [r3]
	pISR_IIC       = (uint32) isr_IIC_dummy;
 c100f34:	e59f3160 	ldr	r3, [pc, #352]	; c10109c <install_dummy_isr+0x204>
 c100f38:	e59f2160 	ldr	r2, [pc, #352]	; c1010a0 <install_dummy_isr+0x208>
 c100f3c:	e5832000 	str	r2, [r3]
	pISR_URXD1     = (uint32) isr_URXD1_dummy;
 c100f40:	e59f315c 	ldr	r3, [pc, #348]	; c1010a4 <install_dummy_isr+0x20c>
 c100f44:	e59f215c 	ldr	r2, [pc, #348]	; c1010a8 <install_dummy_isr+0x210>
 c100f48:	e5832000 	str	r2, [r3]
	pISR_URXD0     = (uint32) isr_URXD0_dummy;
 c100f4c:	e59f3158 	ldr	r3, [pc, #344]	; c1010ac <install_dummy_isr+0x214>
 c100f50:	e59f2158 	ldr	r2, [pc, #344]	; c1010b0 <install_dummy_isr+0x218>
 c100f54:	e5832000 	str	r2, [r3]
	pISR_TIMER5    = (uint32) isr_TIMER5_dummy;
 c100f58:	e59f3154 	ldr	r3, [pc, #340]	; c1010b4 <install_dummy_isr+0x21c>
 c100f5c:	e59f2154 	ldr	r2, [pc, #340]	; c1010b8 <install_dummy_isr+0x220>
 c100f60:	e5832000 	str	r2, [r3]
	pISR_TIMER4    = (uint32) isr_TIMER4_dummy;
 c100f64:	e59f3150 	ldr	r3, [pc, #336]	; c1010bc <install_dummy_isr+0x224>
 c100f68:	e59f2150 	ldr	r2, [pc, #336]	; c1010c0 <install_dummy_isr+0x228>
 c100f6c:	e5832000 	str	r2, [r3]
	pISR_TIMER3    = (uint32) isr_TIMER3_dummy;
 c100f70:	e59f314c 	ldr	r3, [pc, #332]	; c1010c4 <install_dummy_isr+0x22c>
 c100f74:	e59f214c 	ldr	r2, [pc, #332]	; c1010c8 <install_dummy_isr+0x230>
 c100f78:	e5832000 	str	r2, [r3]
	pISR_TIMER2    = (uint32) isr_TIMER2_dummy;
 c100f7c:	e59f3148 	ldr	r3, [pc, #328]	; c1010cc <install_dummy_isr+0x234>
 c100f80:	e59f2148 	ldr	r2, [pc, #328]	; c1010d0 <install_dummy_isr+0x238>
 c100f84:	e5832000 	str	r2, [r3]
	pISR_TIMER1    = (uint32) isr_TIMER1_dummy;
 c100f88:	e59f3144 	ldr	r3, [pc, #324]	; c1010d4 <install_dummy_isr+0x23c>
 c100f8c:	e59f2144 	ldr	r2, [pc, #324]	; c1010d8 <install_dummy_isr+0x240>
 c100f90:	e5832000 	str	r2, [r3]
	pISR_TIMER0    = (uint32) isr_TIMER0_dummy;
 c100f94:	e59f3140 	ldr	r3, [pc, #320]	; c1010dc <install_dummy_isr+0x244>
 c100f98:	e59f2140 	ldr	r2, [pc, #320]	; c1010e0 <install_dummy_isr+0x248>
 c100f9c:	e5832000 	str	r2, [r3]
	pISR_UERR01    = (uint32) isr_UERR01_dummy;
 c100fa0:	e59f313c 	ldr	r3, [pc, #316]	; c1010e4 <install_dummy_isr+0x24c>
 c100fa4:	e59f213c 	ldr	r2, [pc, #316]	; c1010e8 <install_dummy_isr+0x250>
 c100fa8:	e5832000 	str	r2, [r3]
	pISR_WDT       = (uint32) isr_WDT_dummy;
 c100fac:	e59f3138 	ldr	r3, [pc, #312]	; c1010ec <install_dummy_isr+0x254>
 c100fb0:	e59f2138 	ldr	r2, [pc, #312]	; c1010f0 <install_dummy_isr+0x258>
 c100fb4:	e5832000 	str	r2, [r3]
	pISR_BDMA1     = (uint32) isr_BDMA1_dummy;
 c100fb8:	e59f3134 	ldr	r3, [pc, #308]	; c1010f4 <install_dummy_isr+0x25c>
 c100fbc:	e59f2134 	ldr	r2, [pc, #308]	; c1010f8 <install_dummy_isr+0x260>
 c100fc0:	e5832000 	str	r2, [r3]
	pISR_BDMA0     = (uint32) isr_BDMA0_dummy;
 c100fc4:	e59f3130 	ldr	r3, [pc, #304]	; c1010fc <install_dummy_isr+0x264>
 c100fc8:	e59f2130 	ldr	r2, [pc, #304]	; c101100 <install_dummy_isr+0x268>
 c100fcc:	e5832000 	str	r2, [r3]
	pISR_ZDMA1     = (uint32) isr_ZDMA1_dummy;
 c100fd0:	e59f312c 	ldr	r3, [pc, #300]	; c101104 <install_dummy_isr+0x26c>
 c100fd4:	e59f212c 	ldr	r2, [pc, #300]	; c101108 <install_dummy_isr+0x270>
 c100fd8:	e5832000 	str	r2, [r3]
	pISR_ZDMA0     = (uint32) isr_ZDMA0_dummy;
 c100fdc:	e59f3128 	ldr	r3, [pc, #296]	; c10110c <install_dummy_isr+0x274>
 c100fe0:	e59f2128 	ldr	r2, [pc, #296]	; c101110 <install_dummy_isr+0x278>
 c100fe4:	e5832000 	str	r2, [r3]
	pISR_PB        = (uint32) isr_PB_dummy;
 c100fe8:	e59f3124 	ldr	r3, [pc, #292]	; c101114 <install_dummy_isr+0x27c>
 c100fec:	e59f2124 	ldr	r2, [pc, #292]	; c101118 <install_dummy_isr+0x280>
 c100ff0:	e5832000 	str	r2, [r3]
	pISR_ETHERNET  = (uint32) isr_ETHERNET_dummy;
 c100ff4:	e59f3120 	ldr	r3, [pc, #288]	; c10111c <install_dummy_isr+0x284>
 c100ff8:	e59f2120 	ldr	r2, [pc, #288]	; c101120 <install_dummy_isr+0x288>
 c100ffc:	e5832000 	str	r2, [r3]
	pISR_TS        = (uint32) isr_TS_dummy;  // EINT2
 c101000:	e59f311c 	ldr	r3, [pc, #284]	; c101124 <install_dummy_isr+0x28c>
 c101004:	e59f211c 	ldr	r2, [pc, #284]	; c101128 <install_dummy_isr+0x290>
 c101008:	e5832000 	str	r2, [r3]
	pISR_KEYPAD    = (uint32) isr_KEYPAD_dummy; // EINT1
 c10100c:	e59f3118 	ldr	r3, [pc, #280]	; c10112c <install_dummy_isr+0x294>
 c101010:	e59f2118 	ldr	r2, [pc, #280]	; c101130 <install_dummy_isr+0x298>
 c101014:	e5832000 	str	r2, [r3]
	pISR_USB       = (uint32) isr_USB_dummy;
 c101018:	e59f3114 	ldr	r3, [pc, #276]	; c101134 <install_dummy_isr+0x29c>
 c10101c:	e59f2114 	ldr	r2, [pc, #276]	; c101138 <install_dummy_isr+0x2a0>
 c101020:	e5832000 	str	r2, [r3]
	pISR_TICK      = (uint32) isr_TICK_dummy;
 c101024:	e59f3110 	ldr	r3, [pc, #272]	; c10113c <install_dummy_isr+0x2a4>
 c101028:	e59f2110 	ldr	r2, [pc, #272]	; c101140 <install_dummy_isr+0x2a8>
 c10102c:	e5832000 	str	r2, [r3]
}
 c101030:	e24bd00c 	sub	sp, fp, #12
 c101034:	e89d6800 	ldm	sp, {fp, sp, lr}
 c101038:	e12fff1e 	bx	lr
 c10103c:	0c7fff00 	.word	0x0c7fff00
 c101040:	0c101144 	.word	0x0c101144
 c101044:	0c7fff04 	.word	0x0c7fff04
 c101048:	0c101220 	.word	0x0c101220
 c10104c:	0c7fff08 	.word	0x0c7fff08
 c101050:	0c10124c 	.word	0x0c10124c
 c101054:	0c7fff0c 	.word	0x0c7fff0c
 c101058:	0c10119c 	.word	0x0c10119c
 c10105c:	0c7fff10 	.word	0x0c7fff10
 c101060:	0c101170 	.word	0x0c101170
 c101064:	0c7fff18 	.word	0x0c7fff18
 c101068:	0c1011f4 	.word	0x0c1011f4
 c10106c:	0c7fff1c 	.word	0x0c7fff1c
 c101070:	0c1011c8 	.word	0x0c1011c8
 c101074:	0c7fff20 	.word	0x0c7fff20
 c101078:	0c1012d0 	.word	0x0c1012d0
 c10107c:	0c7fff24 	.word	0x0c7fff24
 c101080:	0c1012fc 	.word	0x0c1012fc
 c101084:	0c7fff28 	.word	0x0c7fff28
 c101088:	0c101380 	.word	0x0c101380
 c10108c:	0c7fff2c 	.word	0x0c7fff2c
 c101090:	0c1013ac 	.word	0x0c1013ac
 c101094:	0c7fff30 	.word	0x0c7fff30
 c101098:	0c1013d8 	.word	0x0c1013d8
 c10109c:	0c7fff34 	.word	0x0c7fff34
 c1010a0:	0c101404 	.word	0x0c101404
 c1010a4:	0c7fff38 	.word	0x0c7fff38
 c1010a8:	0c101430 	.word	0x0c101430
 c1010ac:	0c7fff3c 	.word	0x0c7fff3c
 c1010b0:	0c10145c 	.word	0x0c10145c
 c1010b4:	0c7fff40 	.word	0x0c7fff40
 c1010b8:	0c101488 	.word	0x0c101488
 c1010bc:	0c7fff44 	.word	0x0c7fff44
 c1010c0:	0c1014b4 	.word	0x0c1014b4
 c1010c4:	0c7fff48 	.word	0x0c7fff48
 c1010c8:	0c1014e0 	.word	0x0c1014e0
 c1010cc:	0c7fff4c 	.word	0x0c7fff4c
 c1010d0:	0c10150c 	.word	0x0c10150c
 c1010d4:	0c7fff50 	.word	0x0c7fff50
 c1010d8:	0c101538 	.word	0x0c101538
 c1010dc:	0c7fff54 	.word	0x0c7fff54
 c1010e0:	0c101564 	.word	0x0c101564
 c1010e4:	0c7fff58 	.word	0x0c7fff58
 c1010e8:	0c101590 	.word	0x0c101590
 c1010ec:	0c7fff5c 	.word	0x0c7fff5c
 c1010f0:	0c1015bc 	.word	0x0c1015bc
 c1010f4:	0c7fff60 	.word	0x0c7fff60
 c1010f8:	0c1015e8 	.word	0x0c1015e8
 c1010fc:	0c7fff64 	.word	0x0c7fff64
 c101100:	0c101614 	.word	0x0c101614
 c101104:	0c7fff68 	.word	0x0c7fff68
 c101108:	0c101640 	.word	0x0c101640
 c10110c:	0c7fff6c 	.word	0x0c7fff6c
 c101110:	0c10166c 	.word	0x0c10166c
 c101114:	0c7fff74 	.word	0x0c7fff74
 c101118:	0c101698 	.word	0x0c101698
 c10111c:	0c7fff78 	.word	0x0c7fff78
 c101120:	0c1016c4 	.word	0x0c1016c4
 c101124:	0c7fff7c 	.word	0x0c7fff7c
 c101128:	0c101354 	.word	0x0c101354
 c10112c:	0c7fff80 	.word	0x0c7fff80
 c101130:	0c101328 	.word	0x0c101328
 c101134:	0c7fff84 	.word	0x0c7fff84
 c101138:	0c1012a4 	.word	0x0c1012a4
 c10113c:	0c7fff70 	.word	0x0c7fff70
 c101140:	0c101278 	.word	0x0c101278

0c101144 <isr_RESET_dummy>:

void isr_RESET_dummy (void){
 c101144:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c101148:	e1a0c00d 	mov	ip, sp
 c10114c:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c101150:	e24cb004 	sub	fp, ip, #4
	uart0_puts( "\n\n*** ERROR FATAL: ejecutando isr_RESET_dummy" );
 c101154:	e59f0010 	ldr	r0, [pc, #16]	; c10116c <isr_RESET_dummy+0x28>
 c101158:	eb00041b 	bl	c1021cc <uart0_puts>
		SEGS = 0x75;
 c10115c:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c101160:	e3a02075 	mov	r2, #117	; 0x75
 c101164:	e5c32000 	strb	r2, [r3]
		while( 1 );
 c101168:	eafffffe 	b	c101168 <isr_RESET_dummy+0x24>
 c10116c:	0c102aec 	.word	0x0c102aec

0c101170 <isr_DABORT_dummy>:
}

void isr_DABORT_dummy( void ){
 c101170:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c101174:	e1a0c00d 	mov	ip, sp
 c101178:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c10117c:	e24cb004 	sub	fp, ip, #4
	uart0_puts( "\n\n*** ERROR FATAL: ejecutando isr_DABORT_dummy" );
 c101180:	e59f0010 	ldr	r0, [pc, #16]	; c101198 <isr_DABORT_dummy+0x28>
 c101184:	eb000410 	bl	c1021cc <uart0_puts>
	SEGS = 0x75;
 c101188:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c10118c:	e3a02075 	mov	r2, #117	; 0x75
 c101190:	e5c32000 	strb	r2, [r3]
	while( 1 );
 c101194:	eafffffe 	b	c101194 <isr_DABORT_dummy+0x24>
 c101198:	0c102b1c 	.word	0x0c102b1c

0c10119c <isr_PABORT_dummy>:


}
void isr_PABORT_dummy( void ){
 c10119c:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c1011a0:	e1a0c00d 	mov	ip, sp
 c1011a4:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c1011a8:	e24cb004 	sub	fp, ip, #4
	uart0_puts( "\n\n*** ERROR FATAL: ejecutando isr_PABORT_dummy" );
 c1011ac:	e59f0010 	ldr	r0, [pc, #16]	; c1011c4 <isr_PABORT_dummy+0x28>
 c1011b0:	eb000405 	bl	c1021cc <uart0_puts>
	SEGS = 0x75;
 c1011b4:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c1011b8:	e3a02075 	mov	r2, #117	; 0x75
 c1011bc:	e5c32000 	strb	r2, [r3]
	while( 1 );
 c1011c0:	eafffffe 	b	c1011c0 <isr_PABORT_dummy+0x24>
 c1011c4:	0c102b4c 	.word	0x0c102b4c

0c1011c8 <isr_FIQ_dummy>:


}
void isr_FIQ_dummy( void ){
 c1011c8:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c1011cc:	e1a0c00d 	mov	ip, sp
 c1011d0:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c1011d4:	e24cb004 	sub	fp, ip, #4
	uart0_puts( "\n\n*** ERROR FATAL: ejecutando isr_FIQ_dummy" );
 c1011d8:	e59f0010 	ldr	r0, [pc, #16]	; c1011f0 <isr_FIQ_dummy+0x28>
 c1011dc:	eb0003fa 	bl	c1021cc <uart0_puts>
	SEGS = 0x75;
 c1011e0:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c1011e4:	e3a02075 	mov	r2, #117	; 0x75
 c1011e8:	e5c32000 	strb	r2, [r3]
	while( 1 );
 c1011ec:	eafffffe 	b	c1011ec <isr_FIQ_dummy+0x24>
 c1011f0:	0c102b7c 	.word	0x0c102b7c

0c1011f4 <isr_IRQ_dummy>:

}


void isr_IRQ_dummy( void ){
 c1011f4:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c1011f8:	e1a0c00d 	mov	ip, sp
 c1011fc:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c101200:	e24cb004 	sub	fp, ip, #4
	uart0_puts( "\n\n*** ERROR FATAL: ejecutando isr_IRQ_dummy" );
 c101204:	e59f0010 	ldr	r0, [pc, #16]	; c10121c <isr_IRQ_dummy+0x28>
 c101208:	eb0003ef 	bl	c1021cc <uart0_puts>
	SEGS = 0x75;
 c10120c:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c101210:	e3a02075 	mov	r2, #117	; 0x75
 c101214:	e5c32000 	strb	r2, [r3]
	while( 1 );
 c101218:	eafffffe 	b	c101218 <isr_IRQ_dummy+0x24>
 c10121c:	0c102ba8 	.word	0x0c102ba8

0c101220 <isr_UNDEF_dummy>:

}
void isr_UNDEF_dummy( void ) {
 c101220:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c101224:	e1a0c00d 	mov	ip, sp
 c101228:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c10122c:	e24cb004 	sub	fp, ip, #4
	uart0_puts( "\n\n*** ERROR FATAL: ejecutando isr_UNDEF_dummy" );
 c101230:	e59f0010 	ldr	r0, [pc, #16]	; c101248 <isr_UNDEF_dummy+0x28>
 c101234:	eb0003e4 	bl	c1021cc <uart0_puts>
	SEGS = 0x75;
 c101238:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c10123c:	e3a02075 	mov	r2, #117	; 0x75
 c101240:	e5c32000 	strb	r2, [r3]
	while( 1 );
 c101244:	eafffffe 	b	c101244 <isr_UNDEF_dummy+0x24>
 c101248:	0c102bd4 	.word	0x0c102bd4

0c10124c <isr_SWI_dummy>:
}

void isr_SWI_dummy( void ) 	{
 c10124c:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c101250:	e1a0c00d 	mov	ip, sp
 c101254:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c101258:	e24cb004 	sub	fp, ip, #4
	uart0_puts( "\n\n*** ERROR FATAL: ejecutando isr_SWI_dummy" );
 c10125c:	e59f0010 	ldr	r0, [pc, #16]	; c101274 <isr_SWI_dummy+0x28>
 c101260:	eb0003d9 	bl	c1021cc <uart0_puts>
	SEGS = 0x75;
 c101264:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c101268:	e3a02075 	mov	r2, #117	; 0x75
 c10126c:	e5c32000 	strb	r2, [r3]
	while( 1 );
 c101270:	eafffffe 	b	c101270 <isr_SWI_dummy+0x24>
 c101274:	0c102c04 	.word	0x0c102c04

0c101278 <isr_TICK_dummy>:

}

void isr_TICK_dummy( void )
{
 c101278:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c10127c:	e1a0c00d 	mov	ip, sp
 c101280:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c101284:	e24cb004 	sub	fp, ip, #4
	uart0_puts( "\n\n*** ERROR FATAL: ejecutando isr_TICK_dummy" );
 c101288:	e59f0010 	ldr	r0, [pc, #16]	; c1012a0 <isr_TICK_dummy+0x28>
 c10128c:	eb0003ce 	bl	c1021cc <uart0_puts>
	SEGS = 0x75;
 c101290:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c101294:	e3a02075 	mov	r2, #117	; 0x75
 c101298:	e5c32000 	strb	r2, [r3]
	while( 1 );
 c10129c:	eafffffe 	b	c10129c <isr_TICK_dummy+0x24>
 c1012a0:	0c102c30 	.word	0x0c102c30

0c1012a4 <isr_USB_dummy>:
}

void isr_USB_dummy ( void )
{
 c1012a4:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c1012a8:	e1a0c00d 	mov	ip, sp
 c1012ac:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c1012b0:	e24cb004 	sub	fp, ip, #4
	uart0_puts( "\n\n*** ERROR FATAL: ejecutando isr_USB_dummy" );
 c1012b4:	e59f0010 	ldr	r0, [pc, #16]	; c1012cc <isr_USB_dummy+0x28>
 c1012b8:	eb0003c3 	bl	c1021cc <uart0_puts>
	SEGS = 0x75;
 c1012bc:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c1012c0:	e3a02075 	mov	r2, #117	; 0x75
 c1012c4:	e5c32000 	strb	r2, [r3]
	while( 1 );
 c1012c8:	eafffffe 	b	c1012c8 <isr_USB_dummy+0x24>
 c1012cc:	0c102c60 	.word	0x0c102c60

0c1012d0 <isr_ADC_dummy>:
}

void isr_ADC_dummy( void ){
 c1012d0:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c1012d4:	e1a0c00d 	mov	ip, sp
 c1012d8:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c1012dc:	e24cb004 	sub	fp, ip, #4
	uart0_puts( "\n\n*** ERROR FATAL: ejecutando isr_ADC_dummy" );
 c1012e0:	e59f0010 	ldr	r0, [pc, #16]	; c1012f8 <isr_ADC_dummy+0x28>
 c1012e4:	eb0003b8 	bl	c1021cc <uart0_puts>
	SEGS = 0x75;
 c1012e8:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c1012ec:	e3a02075 	mov	r2, #117	; 0x75
 c1012f0:	e5c32000 	strb	r2, [r3]
	while( 1 );
 c1012f4:	eafffffe 	b	c1012f4 <isr_ADC_dummy+0x24>
 c1012f8:	0c102c8c 	.word	0x0c102c8c

0c1012fc <isr_RTC_dummy>:
}

void isr_RTC_dummy( void ){
 c1012fc:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c101300:	e1a0c00d 	mov	ip, sp
 c101304:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c101308:	e24cb004 	sub	fp, ip, #4
	uart0_puts( "\n\n*** ERROR FATAL: ejecutando isr_RTC_dummy" );
 c10130c:	e59f0010 	ldr	r0, [pc, #16]	; c101324 <isr_RTC_dummy+0x28>
 c101310:	eb0003ad 	bl	c1021cc <uart0_puts>
	SEGS = 0x75;
 c101314:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c101318:	e3a02075 	mov	r2, #117	; 0x75
 c10131c:	e5c32000 	strb	r2, [r3]
	while( 1 );
 c101320:	eafffffe 	b	c101320 <isr_RTC_dummy+0x24>
 c101324:	0c102cb8 	.word	0x0c102cb8

0c101328 <isr_KEYPAD_dummy>:
}

void isr_KEYPAD_dummy (void){
 c101328:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c10132c:	e1a0c00d 	mov	ip, sp
 c101330:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c101334:	e24cb004 	sub	fp, ip, #4
	uart0_puts( "\n\n*** ERROR FATAL: ejecutando isr_KEYPAD_dummy" );
 c101338:	e59f0010 	ldr	r0, [pc, #16]	; c101350 <isr_KEYPAD_dummy+0x28>
 c10133c:	eb0003a2 	bl	c1021cc <uart0_puts>
	SEGS = 0x75;
 c101340:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c101344:	e3a02075 	mov	r2, #117	; 0x75
 c101348:	e5c32000 	strb	r2, [r3]
	while( 1 );
 c10134c:	eafffffe 	b	c10134c <isr_KEYPAD_dummy+0x24>
 c101350:	0c102ce4 	.word	0x0c102ce4

0c101354 <isr_TS_dummy>:
}

void isr_TS_dummy (void){
 c101354:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c101358:	e1a0c00d 	mov	ip, sp
 c10135c:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c101360:	e24cb004 	sub	fp, ip, #4
	uart0_puts( "\n\n*** ERROR FATAL: ejecutando isr_TS_dummy" );
 c101364:	e59f0010 	ldr	r0, [pc, #16]	; c10137c <isr_TS_dummy+0x28>
 c101368:	eb000397 	bl	c1021cc <uart0_puts>
	SEGS = 0x75;
 c10136c:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c101370:	e3a02075 	mov	r2, #117	; 0x75
 c101374:	e5c32000 	strb	r2, [r3]
	while( 1 );
 c101378:	eafffffe 	b	c101378 <isr_TS_dummy+0x24>
 c10137c:	0c102d14 	.word	0x0c102d14

0c101380 <isr_UTXD1_dummy>:
}

void isr_UTXD1_dummy (void){
 c101380:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c101384:	e1a0c00d 	mov	ip, sp
 c101388:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c10138c:	e24cb004 	sub	fp, ip, #4
	uart0_puts( "\n\n*** ERROR FATAL: ejecutando isr_UTXD1_dummy" );
 c101390:	e59f0010 	ldr	r0, [pc, #16]	; c1013a8 <isr_UTXD1_dummy+0x28>
 c101394:	eb00038c 	bl	c1021cc <uart0_puts>
	SEGS = 0x75;
 c101398:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c10139c:	e3a02075 	mov	r2, #117	; 0x75
 c1013a0:	e5c32000 	strb	r2, [r3]
	while( 1 );
 c1013a4:	eafffffe 	b	c1013a4 <isr_UTXD1_dummy+0x24>
 c1013a8:	0c102d40 	.word	0x0c102d40

0c1013ac <isr_UTXD0_dummy>:
}

void isr_UTXD0_dummy (void){
 c1013ac:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c1013b0:	e1a0c00d 	mov	ip, sp
 c1013b4:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c1013b8:	e24cb004 	sub	fp, ip, #4
	uart0_puts( "\n\n*** ERROR FATAL: ejecutando isr_UTXD0_dummy" );
 c1013bc:	e59f0010 	ldr	r0, [pc, #16]	; c1013d4 <isr_UTXD0_dummy+0x28>
 c1013c0:	eb000381 	bl	c1021cc <uart0_puts>
	SEGS = 0x75;
 c1013c4:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c1013c8:	e3a02075 	mov	r2, #117	; 0x75
 c1013cc:	e5c32000 	strb	r2, [r3]
	while( 1 );
 c1013d0:	eafffffe 	b	c1013d0 <isr_UTXD0_dummy+0x24>
 c1013d4:	0c102d70 	.word	0x0c102d70

0c1013d8 <isr_SIO_dummy>:
}

void isr_SIO_dummy (void){
 c1013d8:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c1013dc:	e1a0c00d 	mov	ip, sp
 c1013e0:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c1013e4:	e24cb004 	sub	fp, ip, #4
	uart0_puts( "\n\n*** ERROR FATAL: ejecutando isr_SIO_dummy" );
 c1013e8:	e59f0010 	ldr	r0, [pc, #16]	; c101400 <isr_SIO_dummy+0x28>
 c1013ec:	eb000376 	bl	c1021cc <uart0_puts>
	SEGS = 0x75;
 c1013f0:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c1013f4:	e3a02075 	mov	r2, #117	; 0x75
 c1013f8:	e5c32000 	strb	r2, [r3]
	while( 1 );
 c1013fc:	eafffffe 	b	c1013fc <isr_SIO_dummy+0x24>
 c101400:	0c102da0 	.word	0x0c102da0

0c101404 <isr_IIC_dummy>:
}

void isr_IIC_dummy (void){
 c101404:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c101408:	e1a0c00d 	mov	ip, sp
 c10140c:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c101410:	e24cb004 	sub	fp, ip, #4
	uart0_puts( "\n\n*** ERROR FATAL: ejecutando isr_IIC_dummy" );
 c101414:	e59f0010 	ldr	r0, [pc, #16]	; c10142c <isr_IIC_dummy+0x28>
 c101418:	eb00036b 	bl	c1021cc <uart0_puts>
	SEGS = 0x75;
 c10141c:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c101420:	e3a02075 	mov	r2, #117	; 0x75
 c101424:	e5c32000 	strb	r2, [r3]
	while( 1 );
 c101428:	eafffffe 	b	c101428 <isr_IIC_dummy+0x24>
 c10142c:	0c102dcc 	.word	0x0c102dcc

0c101430 <isr_URXD1_dummy>:
}

void isr_URXD1_dummy (void){
 c101430:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c101434:	e1a0c00d 	mov	ip, sp
 c101438:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c10143c:	e24cb004 	sub	fp, ip, #4
	uart0_puts( "\n\n*** ERROR FATAL: ejecutando isr_IIC_dummy" );
 c101440:	e59f0010 	ldr	r0, [pc, #16]	; c101458 <isr_URXD1_dummy+0x28>
 c101444:	eb000360 	bl	c1021cc <uart0_puts>
	SEGS = 0x75;
 c101448:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c10144c:	e3a02075 	mov	r2, #117	; 0x75
 c101450:	e5c32000 	strb	r2, [r3]
	while( 1 );
 c101454:	eafffffe 	b	c101454 <isr_URXD1_dummy+0x24>
 c101458:	0c102dcc 	.word	0x0c102dcc

0c10145c <isr_URXD0_dummy>:
}

void isr_URXD0_dummy (void){
 c10145c:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c101460:	e1a0c00d 	mov	ip, sp
 c101464:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c101468:	e24cb004 	sub	fp, ip, #4
	uart0_puts( "\n\n*** ERROR FATAL: ejecutando isr_URXD0_dummy" );
 c10146c:	e59f0010 	ldr	r0, [pc, #16]	; c101484 <isr_URXD0_dummy+0x28>
 c101470:	eb000355 	bl	c1021cc <uart0_puts>
	SEGS = 0x75;
 c101474:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c101478:	e3a02075 	mov	r2, #117	; 0x75
 c10147c:	e5c32000 	strb	r2, [r3]
	while( 1 );
 c101480:	eafffffe 	b	c101480 <isr_URXD0_dummy+0x24>
 c101484:	0c102df8 	.word	0x0c102df8

0c101488 <isr_TIMER5_dummy>:
}

void isr_TIMER5_dummy (void){
 c101488:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c10148c:	e1a0c00d 	mov	ip, sp
 c101490:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c101494:	e24cb004 	sub	fp, ip, #4
	uart0_puts( "\n\n*** ERROR FATAL: ejecutando isr_TIMER5_dummy" );
 c101498:	e59f0010 	ldr	r0, [pc, #16]	; c1014b0 <isr_TIMER5_dummy+0x28>
 c10149c:	eb00034a 	bl	c1021cc <uart0_puts>
	SEGS = 0x75;
 c1014a0:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c1014a4:	e3a02075 	mov	r2, #117	; 0x75
 c1014a8:	e5c32000 	strb	r2, [r3]
	while( 1 );
 c1014ac:	eafffffe 	b	c1014ac <isr_TIMER5_dummy+0x24>
 c1014b0:	0c102e28 	.word	0x0c102e28

0c1014b4 <isr_TIMER4_dummy>:
}

void isr_TIMER4_dummy (void){
 c1014b4:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c1014b8:	e1a0c00d 	mov	ip, sp
 c1014bc:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c1014c0:	e24cb004 	sub	fp, ip, #4
	uart0_puts( "\n\n*** ERROR FATAL: ejecutando isr_TIMER4_dummy" );
 c1014c4:	e59f0010 	ldr	r0, [pc, #16]	; c1014dc <isr_TIMER4_dummy+0x28>
 c1014c8:	eb00033f 	bl	c1021cc <uart0_puts>
	SEGS = 0x75;
 c1014cc:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c1014d0:	e3a02075 	mov	r2, #117	; 0x75
 c1014d4:	e5c32000 	strb	r2, [r3]
	while( 1 );
 c1014d8:	eafffffe 	b	c1014d8 <isr_TIMER4_dummy+0x24>
 c1014dc:	0c102e58 	.word	0x0c102e58

0c1014e0 <isr_TIMER3_dummy>:
}

void isr_TIMER3_dummy (void){
 c1014e0:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c1014e4:	e1a0c00d 	mov	ip, sp
 c1014e8:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c1014ec:	e24cb004 	sub	fp, ip, #4
	uart0_puts( "\n\n*** ERROR FATAL: ejecutando isr_TIMER3_dummy" );
 c1014f0:	e59f0010 	ldr	r0, [pc, #16]	; c101508 <isr_TIMER3_dummy+0x28>
 c1014f4:	eb000334 	bl	c1021cc <uart0_puts>
	SEGS = 0x75;
 c1014f8:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c1014fc:	e3a02075 	mov	r2, #117	; 0x75
 c101500:	e5c32000 	strb	r2, [r3]
	while( 1 );
 c101504:	eafffffe 	b	c101504 <isr_TIMER3_dummy+0x24>
 c101508:	0c102e88 	.word	0x0c102e88

0c10150c <isr_TIMER2_dummy>:
}

void isr_TIMER2_dummy (void){
 c10150c:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c101510:	e1a0c00d 	mov	ip, sp
 c101514:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c101518:	e24cb004 	sub	fp, ip, #4
	uart0_puts( "\n\n*** ERROR FATAL: ejecutando isr_TIMER2_dummy" );
 c10151c:	e59f0010 	ldr	r0, [pc, #16]	; c101534 <isr_TIMER2_dummy+0x28>
 c101520:	eb000329 	bl	c1021cc <uart0_puts>
	SEGS = 0x75;
 c101524:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c101528:	e3a02075 	mov	r2, #117	; 0x75
 c10152c:	e5c32000 	strb	r2, [r3]
	while( 1 );
 c101530:	eafffffe 	b	c101530 <isr_TIMER2_dummy+0x24>
 c101534:	0c102eb8 	.word	0x0c102eb8

0c101538 <isr_TIMER1_dummy>:
}

void isr_TIMER1_dummy (void){
 c101538:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c10153c:	e1a0c00d 	mov	ip, sp
 c101540:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c101544:	e24cb004 	sub	fp, ip, #4
	uart0_puts( "\n\n*** ERROR FATAL: ejecutando isr_TIMER1_dummy" );
 c101548:	e59f0010 	ldr	r0, [pc, #16]	; c101560 <isr_TIMER1_dummy+0x28>
 c10154c:	eb00031e 	bl	c1021cc <uart0_puts>
	SEGS = 0x75;
 c101550:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c101554:	e3a02075 	mov	r2, #117	; 0x75
 c101558:	e5c32000 	strb	r2, [r3]
	while( 1 );
 c10155c:	eafffffe 	b	c10155c <isr_TIMER1_dummy+0x24>
 c101560:	0c102ee8 	.word	0x0c102ee8

0c101564 <isr_TIMER0_dummy>:
}

void isr_TIMER0_dummy (void){
 c101564:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c101568:	e1a0c00d 	mov	ip, sp
 c10156c:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c101570:	e24cb004 	sub	fp, ip, #4
	uart0_puts( "\n\n*** ERROR FATAL: ejecutando isr_TIMER0_dummy" );
 c101574:	e59f0010 	ldr	r0, [pc, #16]	; c10158c <isr_TIMER0_dummy+0x28>
 c101578:	eb000313 	bl	c1021cc <uart0_puts>
	SEGS = 0x75;
 c10157c:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c101580:	e3a02075 	mov	r2, #117	; 0x75
 c101584:	e5c32000 	strb	r2, [r3]
	while( 1 );
 c101588:	eafffffe 	b	c101588 <isr_TIMER0_dummy+0x24>
 c10158c:	0c102f18 	.word	0x0c102f18

0c101590 <isr_UERR01_dummy>:
}

void isr_UERR01_dummy (void){
 c101590:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c101594:	e1a0c00d 	mov	ip, sp
 c101598:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c10159c:	e24cb004 	sub	fp, ip, #4
	uart0_puts( "\n\n*** ERROR FATAL: ejecutando isr_UERR01_dummy" );
 c1015a0:	e59f0010 	ldr	r0, [pc, #16]	; c1015b8 <isr_UERR01_dummy+0x28>
 c1015a4:	eb000308 	bl	c1021cc <uart0_puts>
	SEGS = 0x75;
 c1015a8:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c1015ac:	e3a02075 	mov	r2, #117	; 0x75
 c1015b0:	e5c32000 	strb	r2, [r3]
	while( 1 );
 c1015b4:	eafffffe 	b	c1015b4 <isr_UERR01_dummy+0x24>
 c1015b8:	0c102f48 	.word	0x0c102f48

0c1015bc <isr_WDT_dummy>:
}

void isr_WDT_dummy (void){
 c1015bc:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c1015c0:	e1a0c00d 	mov	ip, sp
 c1015c4:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c1015c8:	e24cb004 	sub	fp, ip, #4
	uart0_puts( "\n\n*** ERROR FATAL: ejecutando isr_WDT_dummy" );
 c1015cc:	e59f0010 	ldr	r0, [pc, #16]	; c1015e4 <isr_WDT_dummy+0x28>
 c1015d0:	eb0002fd 	bl	c1021cc <uart0_puts>
	SEGS = 0x75;
 c1015d4:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c1015d8:	e3a02075 	mov	r2, #117	; 0x75
 c1015dc:	e5c32000 	strb	r2, [r3]
	while( 1 );
 c1015e0:	eafffffe 	b	c1015e0 <isr_WDT_dummy+0x24>
 c1015e4:	0c102f78 	.word	0x0c102f78

0c1015e8 <isr_BDMA1_dummy>:
}

void isr_BDMA1_dummy (void){
 c1015e8:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c1015ec:	e1a0c00d 	mov	ip, sp
 c1015f0:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c1015f4:	e24cb004 	sub	fp, ip, #4
	uart0_puts( "\n\n*** ERROR FATAL: ejecutando isr_BDMA1_dummy" );
 c1015f8:	e59f0010 	ldr	r0, [pc, #16]	; c101610 <isr_BDMA1_dummy+0x28>
 c1015fc:	eb0002f2 	bl	c1021cc <uart0_puts>
	SEGS = 0x75;
 c101600:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c101604:	e3a02075 	mov	r2, #117	; 0x75
 c101608:	e5c32000 	strb	r2, [r3]
	while( 1 );
 c10160c:	eafffffe 	b	c10160c <isr_BDMA1_dummy+0x24>
 c101610:	0c102fa4 	.word	0x0c102fa4

0c101614 <isr_BDMA0_dummy>:
}

void isr_BDMA0_dummy (void){
 c101614:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c101618:	e1a0c00d 	mov	ip, sp
 c10161c:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c101620:	e24cb004 	sub	fp, ip, #4
	uart0_puts( "\n\n*** ERROR FATAL: ejecutando isr_BDMA0_dummy" );
 c101624:	e59f0010 	ldr	r0, [pc, #16]	; c10163c <isr_BDMA0_dummy+0x28>
 c101628:	eb0002e7 	bl	c1021cc <uart0_puts>
	SEGS = 0x75;
 c10162c:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c101630:	e3a02075 	mov	r2, #117	; 0x75
 c101634:	e5c32000 	strb	r2, [r3]
	while( 1 );
 c101638:	eafffffe 	b	c101638 <isr_BDMA0_dummy+0x24>
 c10163c:	0c102fd4 	.word	0x0c102fd4

0c101640 <isr_ZDMA1_dummy>:
}

void isr_ZDMA1_dummy (void){
 c101640:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c101644:	e1a0c00d 	mov	ip, sp
 c101648:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c10164c:	e24cb004 	sub	fp, ip, #4
	uart0_puts( "\n\n*** ERROR FATAL: ejecutando isr_ZDMA1_dummy" );
 c101650:	e59f0010 	ldr	r0, [pc, #16]	; c101668 <isr_ZDMA1_dummy+0x28>
 c101654:	eb0002dc 	bl	c1021cc <uart0_puts>
	SEGS = 0x75;
 c101658:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c10165c:	e3a02075 	mov	r2, #117	; 0x75
 c101660:	e5c32000 	strb	r2, [r3]
	while( 1 );
 c101664:	eafffffe 	b	c101664 <isr_ZDMA1_dummy+0x24>
 c101668:	0c103004 	.word	0x0c103004

0c10166c <isr_ZDMA0_dummy>:
}

void isr_ZDMA0_dummy (void){
 c10166c:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c101670:	e1a0c00d 	mov	ip, sp
 c101674:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c101678:	e24cb004 	sub	fp, ip, #4
	uart0_puts( "\n\n*** ERROR FATAL: ejecutando isr_ZDMA0_dummy" );
 c10167c:	e59f0010 	ldr	r0, [pc, #16]	; c101694 <isr_ZDMA0_dummy+0x28>
 c101680:	eb0002d1 	bl	c1021cc <uart0_puts>
	SEGS = 0x75;
 c101684:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c101688:	e3a02075 	mov	r2, #117	; 0x75
 c10168c:	e5c32000 	strb	r2, [r3]
	while( 1 );
 c101690:	eafffffe 	b	c101690 <isr_ZDMA0_dummy+0x24>
 c101694:	0c103034 	.word	0x0c103034

0c101698 <isr_PB_dummy>:
}

void isr_PB_dummy (void){
 c101698:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c10169c:	e1a0c00d 	mov	ip, sp
 c1016a0:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c1016a4:	e24cb004 	sub	fp, ip, #4
	uart0_puts( "\n\n*** ERROR FATAL: ejecutando isr_PB_dummy" );
 c1016a8:	e59f0010 	ldr	r0, [pc, #16]	; c1016c0 <isr_PB_dummy+0x28>
 c1016ac:	eb0002c6 	bl	c1021cc <uart0_puts>
	SEGS = 0x75;
 c1016b0:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c1016b4:	e3a02075 	mov	r2, #117	; 0x75
 c1016b8:	e5c32000 	strb	r2, [r3]
	while( 1 );
 c1016bc:	eafffffe 	b	c1016bc <isr_PB_dummy+0x24>
 c1016c0:	0c103064 	.word	0x0c103064

0c1016c4 <isr_ETHERNET_dummy>:
}

void isr_ETHERNET_dummy (void){
 c1016c4:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
 c1016c8:	e1a0c00d 	mov	ip, sp
 c1016cc:	e92dd80f 	push	{r0, r1, r2, r3, fp, ip, lr, pc}
 c1016d0:	e24cb004 	sub	fp, ip, #4
	uart0_puts( "\n\n*** ERROR FATAL: ejecutando isr_ETHERNET_dummy" );
 c1016d4:	e59f0010 	ldr	r0, [pc, #16]	; c1016ec <isr_ETHERNET_dummy+0x28>
 c1016d8:	eb0002bb 	bl	c1021cc <uart0_puts>
	SEGS = 0x75;
 c1016dc:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c1016e0:	e3a02075 	mov	r2, #117	; 0x75
 c1016e4:	e5c32000 	strb	r2, [r3]
	while( 1 );
 c1016e8:	eafffffe 	b	c1016e8 <isr_ETHERNET_dummy+0x24>
 c1016ec:	0c103090 	.word	0x0c103090

0c1016f0 <show_sys_info>:
}

static void show_sys_info( void ){
 c1016f0:	e1a0c00d 	mov	ip, sp
 c1016f4:	e92dd800 	push	{fp, ip, lr, pc}
 c1016f8:	e24cb004 	sub	fp, ip, #4
	uart0_puts("Practica realizada por Miguel Higuera y Juan Carlos Martín.");
 c1016fc:	e59f000c 	ldr	r0, [pc, #12]	; c101710 <show_sys_info+0x20>
 c101700:	eb0002b1 	bl	c1021cc <uart0_puts>
}
 c101704:	e24bd00c 	sub	sp, fp, #12
 c101708:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10170c:	e12fff1e 	bx	lr
 c101710:	0c1030c4 	.word	0x0c1030c4

0c101714 <sleep>:


/*
**  Pone el procesador en estado IDLE
*/
inline void sleep( void ){
 c101714:	e1a0c00d 	mov	ip, sp
 c101718:	e92dd800 	push	{fp, ip, lr, pc}
 c10171c:	e24cb004 	sub	fp, ip, #4

}
 c101720:	e24bd00c 	sub	sp, fp, #12
 c101724:	e89d6800 	ldm	sp, {fp, sp, lr}
 c101728:	e12fff1e 	bx	lr

0c10172c <timers_init>:
 ** Pone a 0 los registros de configuraci�n
 ** Pone a 0 todos los b�fferes y registros de cuenta y comparaci�n
 ** Para todos los temporizadores
 ** Inicializa las variables para retardos software
 */
void timers_init(void) {
 c10172c:	e1a0c00d 	mov	ip, sp
 c101730:	e92dd800 	push	{fp, ip, lr, pc}
 c101734:	e24cb004 	sub	fp, ip, #4
	TCFG0 = 0;
 c101738:	e59f30c4 	ldr	r3, [pc, #196]	; c101804 <timers_init+0xd8>
 c10173c:	e3a02000 	mov	r2, #0
 c101740:	e5832000 	str	r2, [r3]
	TCFG1 = 0;
 c101744:	e59f30bc 	ldr	r3, [pc, #188]	; c101808 <timers_init+0xdc>
 c101748:	e3a02000 	mov	r2, #0
 c10174c:	e5832000 	str	r2, [r3]
	TCNTB0 = 0;
 c101750:	e59f30b4 	ldr	r3, [pc, #180]	; c10180c <timers_init+0xe0>
 c101754:	e3a02000 	mov	r2, #0
 c101758:	e5832000 	str	r2, [r3]
	TCNTB1 = 0;
 c10175c:	e59f30ac 	ldr	r3, [pc, #172]	; c101810 <timers_init+0xe4>
 c101760:	e3a02000 	mov	r2, #0
 c101764:	e5832000 	str	r2, [r3]
	TCNTB2 = 0;
 c101768:	e59f30a4 	ldr	r3, [pc, #164]	; c101814 <timers_init+0xe8>
 c10176c:	e3a02000 	mov	r2, #0
 c101770:	e5832000 	str	r2, [r3]
	TCNTB3 = 0;
 c101774:	e59f309c 	ldr	r3, [pc, #156]	; c101818 <timers_init+0xec>
 c101778:	e3a02000 	mov	r2, #0
 c10177c:	e5832000 	str	r2, [r3]
	TCNTB4 = 0;
 c101780:	e59f3094 	ldr	r3, [pc, #148]	; c10181c <timers_init+0xf0>
 c101784:	e3a02000 	mov	r2, #0
 c101788:	e5832000 	str	r2, [r3]
	TCNTB5 = 0;
 c10178c:	e59f308c 	ldr	r3, [pc, #140]	; c101820 <timers_init+0xf4>
 c101790:	e3a02000 	mov	r2, #0
 c101794:	e5832000 	str	r2, [r3]
	TCMPB0 = 0;
 c101798:	e59f3084 	ldr	r3, [pc, #132]	; c101824 <timers_init+0xf8>
 c10179c:	e3a02000 	mov	r2, #0
 c1017a0:	e5832000 	str	r2, [r3]
	TCMPB1 = 0;
 c1017a4:	e59f307c 	ldr	r3, [pc, #124]	; c101828 <timers_init+0xfc>
 c1017a8:	e3a02000 	mov	r2, #0
 c1017ac:	e5832000 	str	r2, [r3]
	TCMPB2 = 0;
 c1017b0:	e59f3074 	ldr	r3, [pc, #116]	; c10182c <timers_init+0x100>
 c1017b4:	e3a02000 	mov	r2, #0
 c1017b8:	e5832000 	str	r2, [r3]
	TCMPB3 = 0;
 c1017bc:	e59f306c 	ldr	r3, [pc, #108]	; c101830 <timers_init+0x104>
 c1017c0:	e3a02000 	mov	r2, #0
 c1017c4:	e5832000 	str	r2, [r3]
	TCMPB4 = 0;
 c1017c8:	e59f3064 	ldr	r3, [pc, #100]	; c101834 <timers_init+0x108>
 c1017cc:	e3a02000 	mov	r2, #0
 c1017d0:	e5832000 	str	r2, [r3]
	TCON = 0;
 c1017d4:	e59f305c 	ldr	r3, [pc, #92]	; c101838 <timers_init+0x10c>
 c1017d8:	e3a02000 	mov	r2, #0
 c1017dc:	e5832000 	str	r2, [r3]
	loop_ms = 487;
 c1017e0:	e59f3054 	ldr	r3, [pc, #84]	; c10183c <timers_init+0x110>
 c1017e4:	e59f2054 	ldr	r2, [pc, #84]	; c101840 <timers_init+0x114>
 c1017e8:	e5832000 	str	r2, [r3]
	loop_s = 487440;
 c1017ec:	e59f3050 	ldr	r3, [pc, #80]	; c101844 <timers_init+0x118>
 c1017f0:	e59f2050 	ldr	r2, [pc, #80]	; c101848 <timers_init+0x11c>
 c1017f4:	e5832000 	str	r2, [r3]
}
 c1017f8:	e24bd00c 	sub	sp, fp, #12
 c1017fc:	e89d6800 	ldm	sp, {fp, sp, lr}
 c101800:	e12fff1e 	bx	lr
 c101804:	01d50000 	.word	0x01d50000
 c101808:	01d50004 	.word	0x01d50004
 c10180c:	01d5000c 	.word	0x01d5000c
 c101810:	01d50018 	.word	0x01d50018
 c101814:	01d50024 	.word	0x01d50024
 c101818:	01d50030 	.word	0x01d50030
 c10181c:	01d5003c 	.word	0x01d5003c
 c101820:	01d50048 	.word	0x01d50048
 c101824:	01d50010 	.word	0x01d50010
 c101828:	01d5001c 	.word	0x01d5001c
 c10182c:	01d50028 	.word	0x01d50028
 c101830:	01d50034 	.word	0x01d50034
 c101834:	01d50040 	.word	0x01d50040
 c101838:	01d50008 	.word	0x01d50008
 c10183c:	0c103104 	.word	0x0c103104
 c101840:	000001e7 	.word	0x000001e7
 c101844:	0c103108 	.word	0x0c103108
 c101848:	00077010 	.word	0x00077010

0c10184c <timer3_delay_ms>:

/*
 ** Realiza una espera de n milisegundos usando el timer3
 */
void timer3_delay_ms(uint16 n) {
 c10184c:	e1a0c00d 	mov	ip, sp
 c101850:	e92dd800 	push	{fp, ip, lr, pc}
 c101854:	e24cb004 	sub	fp, ip, #4
 c101858:	e24dd008 	sub	sp, sp, #8
 c10185c:	e1a03000 	mov	r3, r0
 c101860:	e14b30be 	strh	r3, [fp, #-14]
	TCFG0 = (TCFG0 & ~(0xff << 8)) | (31 << 8);	// (31 +1) *2 / 64
 c101864:	e59f30b0 	ldr	r3, [pc, #176]	; c10191c <timer3_delay_ms+0xd0>
 c101868:	e59f20ac 	ldr	r2, [pc, #172]	; c10191c <timer3_delay_ms+0xd0>
 c10186c:	e5922000 	ldr	r2, [r2]
 c101870:	e3c22cff 	bic	r2, r2, #65280	; 0xff00
 c101874:	e3822c1f 	orr	r2, r2, #7936	; 0x1f00
 c101878:	e5832000 	str	r2, [r3]
	TCFG1 = (TCFG1 & ~(0xf << 12)) | (0 << 12);	// (N,D,C) = (31, 2, 1000)
 c10187c:	e59f309c 	ldr	r3, [pc, #156]	; c101920 <timer3_delay_ms+0xd4>
 c101880:	e59f2098 	ldr	r2, [pc, #152]	; c101920 <timer3_delay_ms+0xd4>
 c101884:	e5922000 	ldr	r2, [r2]
 c101888:	e3c22a0f 	bic	r2, r2, #61440	; 0xf000
 c10188c:	e5832000 	str	r2, [r3]
	for (; n; n--) {
 c101890:	ea00001b 	b	c101904 <timer3_delay_ms+0xb8>
		TCNTB3 = 1000;
 c101894:	e59f3088 	ldr	r3, [pc, #136]	; c101924 <timer3_delay_ms+0xd8>
 c101898:	e3a02ffa 	mov	r2, #1000	; 0x3e8
 c10189c:	e5832000 	str	r2, [r3]
		TCON = (TCON & ~(0xf << 16)) | (1 << 17);
 c1018a0:	e59f3080 	ldr	r3, [pc, #128]	; c101928 <timer3_delay_ms+0xdc>
 c1018a4:	e59f207c 	ldr	r2, [pc, #124]	; c101928 <timer3_delay_ms+0xdc>
 c1018a8:	e5922000 	ldr	r2, [r2]
 c1018ac:	e3c2280f 	bic	r2, r2, #983040	; 0xf0000
 c1018b0:	e3822802 	orr	r2, r2, #131072	; 0x20000
 c1018b4:	e5832000 	str	r2, [r3]
		TCON = (TCON & ~(0xf << 16)) | (1 << 16);
 c1018b8:	e59f3068 	ldr	r3, [pc, #104]	; c101928 <timer3_delay_ms+0xdc>
 c1018bc:	e59f2064 	ldr	r2, [pc, #100]	; c101928 <timer3_delay_ms+0xdc>
 c1018c0:	e5922000 	ldr	r2, [r2]
 c1018c4:	e3c2280f 	bic	r2, r2, #983040	; 0xf0000
 c1018c8:	e3822801 	orr	r2, r2, #65536	; 0x10000
 c1018cc:	e5832000 	str	r2, [r3]
		while (!TCNTO3 )
 c1018d0:	e1a00000 	nop			; (mov r0, r0)
 c1018d4:	e59f3050 	ldr	r3, [pc, #80]	; c10192c <timer3_delay_ms+0xe0>
 c1018d8:	e5933000 	ldr	r3, [r3]
 c1018dc:	e3530000 	cmp	r3, #0
 c1018e0:	0afffffb 	beq	c1018d4 <timer3_delay_ms+0x88>
			;
		while (TCNTO3 )
 c1018e4:	e1a00000 	nop			; (mov r0, r0)
 c1018e8:	e59f303c 	ldr	r3, [pc, #60]	; c10192c <timer3_delay_ms+0xe0>
 c1018ec:	e5933000 	ldr	r3, [r3]
 c1018f0:	e3530000 	cmp	r3, #0
 c1018f4:	1afffffb 	bne	c1018e8 <timer3_delay_ms+0x9c>
 ** Realiza una espera de n milisegundos usando el timer3
 */
void timer3_delay_ms(uint16 n) {
	TCFG0 = (TCFG0 & ~(0xff << 8)) | (31 << 8);	// (31 +1) *2 / 64
	TCFG1 = (TCFG1 & ~(0xf << 12)) | (0 << 12);	// (N,D,C) = (31, 2, 1000)
	for (; n; n--) {
 c1018f8:	e15b30be 	ldrh	r3, [fp, #-14]
 c1018fc:	e2433001 	sub	r3, r3, #1
 c101900:	e14b30be 	strh	r3, [fp, #-14]
 c101904:	e15b30be 	ldrh	r3, [fp, #-14]
 c101908:	e3530000 	cmp	r3, #0
 c10190c:	1affffe0 	bne	c101894 <timer3_delay_ms+0x48>
		while (!TCNTO3 )
			;
		while (TCNTO3 )
			;
	}
}
 c101910:	e24bd00c 	sub	sp, fp, #12
 c101914:	e89d6800 	ldm	sp, {fp, sp, lr}
 c101918:	e12fff1e 	bx	lr
 c10191c:	01d50000 	.word	0x01d50000
 c101920:	01d50004 	.word	0x01d50004
 c101924:	01d50030 	.word	0x01d50030
 c101928:	01d50008 	.word	0x01d50008
 c10192c:	01d50038 	.word	0x01d50038

0c101930 <sw_delay_ms>:

/*
 ** Realiza una espera de n milisegundos sin usar temporizadores
 */
void sw_delay_ms(uint16 n) {
 c101930:	e1a0c00d 	mov	ip, sp
 c101934:	e92dd800 	push	{fp, ip, lr, pc}
 c101938:	e24cb004 	sub	fp, ip, #4
 c10193c:	e24dd010 	sub	sp, sp, #16
 c101940:	e1a03000 	mov	r3, r0
 c101944:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
	uint32 i;
	loop_ms = 487;
 c101948:	e59f3040 	ldr	r3, [pc, #64]	; c101990 <sw_delay_ms+0x60>
 c10194c:	e59f2040 	ldr	r2, [pc, #64]	; c101994 <sw_delay_ms+0x64>
 c101950:	e5832000 	str	r2, [r3]
	for (i = loop_ms * n; i; i--)
 c101954:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c101958:	e59f2030 	ldr	r2, [pc, #48]	; c101990 <sw_delay_ms+0x60>
 c10195c:	e5922000 	ldr	r2, [r2]
 c101960:	e0030392 	mul	r3, r2, r3
 c101964:	e50b3010 	str	r3, [fp, #-16]
 c101968:	ea000002 	b	c101978 <sw_delay_ms+0x48>
 c10196c:	e51b3010 	ldr	r3, [fp, #-16]
 c101970:	e2433001 	sub	r3, r3, #1
 c101974:	e50b3010 	str	r3, [fp, #-16]
 c101978:	e51b3010 	ldr	r3, [fp, #-16]
 c10197c:	e3530000 	cmp	r3, #0
 c101980:	1afffff9 	bne	c10196c <sw_delay_ms+0x3c>
		;
}
 c101984:	e24bd00c 	sub	sp, fp, #12
 c101988:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10198c:	e12fff1e 	bx	lr
 c101990:	0c103104 	.word	0x0c103104
 c101994:	000001e7 	.word	0x000001e7

0c101998 <timer3_delay_s>:

/*
 ** Realiza una espera de n segundos usando el timer3
 */
void timer3_delay_s(uint16 n) {
 c101998:	e1a0c00d 	mov	ip, sp
 c10199c:	e92dd800 	push	{fp, ip, lr, pc}
 c1019a0:	e24cb004 	sub	fp, ip, #4
 c1019a4:	e24dd008 	sub	sp, sp, #8
 c1019a8:	e1a03000 	mov	r3, r0
 c1019ac:	e14b30be 	strh	r3, [fp, #-14]
	TCFG0 = (TCFG0 & ~(0xff << 8)) | (63 << 8);
 c1019b0:	e59f30b4 	ldr	r3, [pc, #180]	; c101a6c <timer3_delay_s+0xd4>
 c1019b4:	e59f20b0 	ldr	r2, [pc, #176]	; c101a6c <timer3_delay_s+0xd4>
 c1019b8:	e5922000 	ldr	r2, [r2]
 c1019bc:	e3c22cff 	bic	r2, r2, #65280	; 0xff00
 c1019c0:	e3822c3f 	orr	r2, r2, #16128	; 0x3f00
 c1019c4:	e5832000 	str	r2, [r3]
	TCFG1 = (TCFG1 & ~(0xf << 12)) | (4 << 12);
 c1019c8:	e59f30a0 	ldr	r3, [pc, #160]	; c101a70 <timer3_delay_s+0xd8>
 c1019cc:	e59f209c 	ldr	r2, [pc, #156]	; c101a70 <timer3_delay_s+0xd8>
 c1019d0:	e5922000 	ldr	r2, [r2]
 c1019d4:	e3c22a0f 	bic	r2, r2, #61440	; 0xf000
 c1019d8:	e3822901 	orr	r2, r2, #16384	; 0x4000
 c1019dc:	e5832000 	str	r2, [r3]
	for (; n; n--) {
 c1019e0:	ea00001b 	b	c101a54 <timer3_delay_s+0xbc>
		TCNTB3 = 31250;
 c1019e4:	e59f3088 	ldr	r3, [pc, #136]	; c101a74 <timer3_delay_s+0xdc>
 c1019e8:	e59f2088 	ldr	r2, [pc, #136]	; c101a78 <timer3_delay_s+0xe0>
 c1019ec:	e5832000 	str	r2, [r3]
		TCON = (TCON & ~(0xf << 16)) | (1 << 17);
 c1019f0:	e59f3084 	ldr	r3, [pc, #132]	; c101a7c <timer3_delay_s+0xe4>
 c1019f4:	e59f2080 	ldr	r2, [pc, #128]	; c101a7c <timer3_delay_s+0xe4>
 c1019f8:	e5922000 	ldr	r2, [r2]
 c1019fc:	e3c2280f 	bic	r2, r2, #983040	; 0xf0000
 c101a00:	e3822802 	orr	r2, r2, #131072	; 0x20000
 c101a04:	e5832000 	str	r2, [r3]
		TCON = (TCON & ~(0xf << 16)) | (1 << 16);
 c101a08:	e59f306c 	ldr	r3, [pc, #108]	; c101a7c <timer3_delay_s+0xe4>
 c101a0c:	e59f2068 	ldr	r2, [pc, #104]	; c101a7c <timer3_delay_s+0xe4>
 c101a10:	e5922000 	ldr	r2, [r2]
 c101a14:	e3c2280f 	bic	r2, r2, #983040	; 0xf0000
 c101a18:	e3822801 	orr	r2, r2, #65536	; 0x10000
 c101a1c:	e5832000 	str	r2, [r3]
		while (!TCNTO3 )
 c101a20:	e1a00000 	nop			; (mov r0, r0)
 c101a24:	e59f3054 	ldr	r3, [pc, #84]	; c101a80 <timer3_delay_s+0xe8>
 c101a28:	e5933000 	ldr	r3, [r3]
 c101a2c:	e3530000 	cmp	r3, #0
 c101a30:	0afffffb 	beq	c101a24 <timer3_delay_s+0x8c>
			;
		while (TCNTO3 )
 c101a34:	e1a00000 	nop			; (mov r0, r0)
 c101a38:	e59f3040 	ldr	r3, [pc, #64]	; c101a80 <timer3_delay_s+0xe8>
 c101a3c:	e5933000 	ldr	r3, [r3]
 c101a40:	e3530000 	cmp	r3, #0
 c101a44:	1afffffb 	bne	c101a38 <timer3_delay_s+0xa0>
 ** Realiza una espera de n segundos usando el timer3
 */
void timer3_delay_s(uint16 n) {
	TCFG0 = (TCFG0 & ~(0xff << 8)) | (63 << 8);
	TCFG1 = (TCFG1 & ~(0xf << 12)) | (4 << 12);
	for (; n; n--) {
 c101a48:	e15b30be 	ldrh	r3, [fp, #-14]
 c101a4c:	e2433001 	sub	r3, r3, #1
 c101a50:	e14b30be 	strh	r3, [fp, #-14]
 c101a54:	e15b30be 	ldrh	r3, [fp, #-14]
 c101a58:	e3530000 	cmp	r3, #0
 c101a5c:	1affffe0 	bne	c1019e4 <timer3_delay_s+0x4c>
		while (!TCNTO3 )
			;
		while (TCNTO3 )
			;
	}
}
 c101a60:	e24bd00c 	sub	sp, fp, #12
 c101a64:	e89d6800 	ldm	sp, {fp, sp, lr}
 c101a68:	e12fff1e 	bx	lr
 c101a6c:	01d50000 	.word	0x01d50000
 c101a70:	01d50004 	.word	0x01d50004
 c101a74:	01d50030 	.word	0x01d50030
 c101a78:	00007a12 	.word	0x00007a12
 c101a7c:	01d50008 	.word	0x01d50008
 c101a80:	01d50038 	.word	0x01d50038

0c101a84 <sw_delay_s>:

/*
 ** Realiza una espera de n segundos sin usar temporizadores
 */
void sw_delay_s(uint16 n) {
 c101a84:	e1a0c00d 	mov	ip, sp
 c101a88:	e92dd800 	push	{fp, ip, lr, pc}
 c101a8c:	e24cb004 	sub	fp, ip, #4
 c101a90:	e24dd010 	sub	sp, sp, #16
 c101a94:	e1a03000 	mov	r3, r0
 c101a98:	e14b31b6 	strh	r3, [fp, #-22]	; 0xffffffea
	uint32 i;
	loop_s = 487440;
 c101a9c:	e59f3040 	ldr	r3, [pc, #64]	; c101ae4 <sw_delay_s+0x60>
 c101aa0:	e59f2040 	ldr	r2, [pc, #64]	; c101ae8 <sw_delay_s+0x64>
 c101aa4:	e5832000 	str	r2, [r3]
	for (i = loop_s * n; i; i--)
 c101aa8:	e15b31b6 	ldrh	r3, [fp, #-22]	; 0xffffffea
 c101aac:	e59f2030 	ldr	r2, [pc, #48]	; c101ae4 <sw_delay_s+0x60>
 c101ab0:	e5922000 	ldr	r2, [r2]
 c101ab4:	e0030392 	mul	r3, r2, r3
 c101ab8:	e50b3010 	str	r3, [fp, #-16]
 c101abc:	ea000002 	b	c101acc <sw_delay_s+0x48>
 c101ac0:	e51b3010 	ldr	r3, [fp, #-16]
 c101ac4:	e2433001 	sub	r3, r3, #1
 c101ac8:	e50b3010 	str	r3, [fp, #-16]
 c101acc:	e51b3010 	ldr	r3, [fp, #-16]
 c101ad0:	e3530000 	cmp	r3, #0
 c101ad4:	1afffff9 	bne	c101ac0 <sw_delay_s+0x3c>
		;
}
 c101ad8:	e24bd00c 	sub	sp, fp, #12
 c101adc:	e89d6800 	ldm	sp, {fp, sp, lr}
 c101ae0:	e12fff1e 	bx	lr
 c101ae4:	0c103108 	.word	0x0c103108
 c101ae8:	00077010 	.word	0x00077010

0c101aec <timer3_start>:

/*
 ** Arranca el timer3 a una frecuencia de 0,01 MHz
 ** Permitir� medir tiempos con una resoluci�n de 0,1 ms (100 us) hasta un m�ximo de 6.55s
 */
void timer3_start(void) {
 c101aec:	e1a0c00d 	mov	ip, sp
 c101af0:	e92dd800 	push	{fp, ip, lr, pc}
 c101af4:	e24cb004 	sub	fp, ip, #4
	TCFG0 = (TCFG0 & ~(0xff << 8)) | (199 << 8);
 c101af8:	e59f3084 	ldr	r3, [pc, #132]	; c101b84 <timer3_start+0x98>
 c101afc:	e59f2080 	ldr	r2, [pc, #128]	; c101b84 <timer3_start+0x98>
 c101b00:	e5922000 	ldr	r2, [r2]
 c101b04:	e3c22cff 	bic	r2, r2, #65280	; 0xff00
 c101b08:	e3822cc7 	orr	r2, r2, #50944	; 0xc700
 c101b0c:	e5832000 	str	r2, [r3]
	TCFG1 = (TCFG1 & ~(0xf << 12)) | (4 << 12);
 c101b10:	e59f3070 	ldr	r3, [pc, #112]	; c101b88 <timer3_start+0x9c>
 c101b14:	e59f206c 	ldr	r2, [pc, #108]	; c101b88 <timer3_start+0x9c>
 c101b18:	e5922000 	ldr	r2, [r2]
 c101b1c:	e3c22a0f 	bic	r2, r2, #61440	; 0xf000
 c101b20:	e3822901 	orr	r2, r2, #16384	; 0x4000
 c101b24:	e5832000 	str	r2, [r3]
	TCNTB3 = 0xffff;
 c101b28:	e59f305c 	ldr	r3, [pc, #92]	; c101b8c <timer3_start+0xa0>
 c101b2c:	e59f205c 	ldr	r2, [pc, #92]	; c101b90 <timer3_start+0xa4>
 c101b30:	e5832000 	str	r2, [r3]
	TCON = (TCON & ~(0xf << 16)) | (1 << 17);
 c101b34:	e59f3058 	ldr	r3, [pc, #88]	; c101b94 <timer3_start+0xa8>
 c101b38:	e59f2054 	ldr	r2, [pc, #84]	; c101b94 <timer3_start+0xa8>
 c101b3c:	e5922000 	ldr	r2, [r2]
 c101b40:	e3c2280f 	bic	r2, r2, #983040	; 0xf0000
 c101b44:	e3822802 	orr	r2, r2, #131072	; 0x20000
 c101b48:	e5832000 	str	r2, [r3]
	TCON = (TCON & ~(0xf << 16)) | (1 << 16);
 c101b4c:	e59f3040 	ldr	r3, [pc, #64]	; c101b94 <timer3_start+0xa8>
 c101b50:	e59f203c 	ldr	r2, [pc, #60]	; c101b94 <timer3_start+0xa8>
 c101b54:	e5922000 	ldr	r2, [r2]
 c101b58:	e3c2280f 	bic	r2, r2, #983040	; 0xf0000
 c101b5c:	e3822801 	orr	r2, r2, #65536	; 0x10000
 c101b60:	e5832000 	str	r2, [r3]
	while (!TCNTO3 )
 c101b64:	e1a00000 	nop			; (mov r0, r0)
 c101b68:	e59f3028 	ldr	r3, [pc, #40]	; c101b98 <timer3_start+0xac>
 c101b6c:	e5933000 	ldr	r3, [r3]
 c101b70:	e3530000 	cmp	r3, #0
 c101b74:	0afffffb 	beq	c101b68 <timer3_start+0x7c>
		;
}
 c101b78:	e24bd00c 	sub	sp, fp, #12
 c101b7c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c101b80:	e12fff1e 	bx	lr
 c101b84:	01d50000 	.word	0x01d50000
 c101b88:	01d50004 	.word	0x01d50004
 c101b8c:	01d50030 	.word	0x01d50030
 c101b90:	0000ffff 	.word	0x0000ffff
 c101b94:	01d50008 	.word	0x01d50008
 c101b98:	01d50038 	.word	0x01d50038

0c101b9c <timer3_stop>:

/*
 ** Detiene el timer3, devolviendo el n�mero de d�cimas de milisegundo transcurridas desde que arranc� hasta un m�ximo de 6.55s
 */
uint16 timer3_stop(void) {
 c101b9c:	e1a0c00d 	mov	ip, sp
 c101ba0:	e92dd800 	push	{fp, ip, lr, pc}
 c101ba4:	e24cb004 	sub	fp, ip, #4
	TCON &= ~(1 << 16);
 c101ba8:	e59f3038 	ldr	r3, [pc, #56]	; c101be8 <timer3_stop+0x4c>
 c101bac:	e59f2034 	ldr	r2, [pc, #52]	; c101be8 <timer3_stop+0x4c>
 c101bb0:	e5922000 	ldr	r2, [r2]
 c101bb4:	e3c22801 	bic	r2, r2, #65536	; 0x10000
 c101bb8:	e5832000 	str	r2, [r3]
	return 0xffff - TCNTO3 ;
 c101bbc:	e59f3028 	ldr	r3, [pc, #40]	; c101bec <timer3_stop+0x50>
 c101bc0:	e5933000 	ldr	r3, [r3]
 c101bc4:	e1a03803 	lsl	r3, r3, #16
 c101bc8:	e1a03823 	lsr	r3, r3, #16
 c101bcc:	e1e03003 	mvn	r3, r3
 c101bd0:	e1a03803 	lsl	r3, r3, #16
 c101bd4:	e1a03823 	lsr	r3, r3, #16
}
 c101bd8:	e1a00003 	mov	r0, r3
 c101bdc:	e24bd00c 	sub	sp, fp, #12
 c101be0:	e89d6800 	ldm	sp, {fp, sp, lr}
 c101be4:	e12fff1e 	bx	lr
 c101be8:	01d50008 	.word	0x01d50008
 c101bec:	01d50038 	.word	0x01d50038

0c101bf0 <timer3_start_timeout>:

/*
 ** Arranca el timer3 a una frecuencia de 0,01 MHz
 ** Permitir� contar n d�cimas de milisegundo (0,1 ms = 100 us) hasta un m�ximo de 6.55s
 */
void timer3_start_timeout(uint16 n) {
 c101bf0:	e1a0c00d 	mov	ip, sp
 c101bf4:	e92dd800 	push	{fp, ip, lr, pc}
 c101bf8:	e24cb004 	sub	fp, ip, #4
 c101bfc:	e24dd008 	sub	sp, sp, #8
 c101c00:	e1a03000 	mov	r3, r0
 c101c04:	e14b30be 	strh	r3, [fp, #-14]
	TCFG0 = (TCFG0 & ~(0xff << 8)) | (199 << 8);
 c101c08:	e59f3084 	ldr	r3, [pc, #132]	; c101c94 <timer3_start_timeout+0xa4>
 c101c0c:	e59f2080 	ldr	r2, [pc, #128]	; c101c94 <timer3_start_timeout+0xa4>
 c101c10:	e5922000 	ldr	r2, [r2]
 c101c14:	e3c22cff 	bic	r2, r2, #65280	; 0xff00
 c101c18:	e3822cc7 	orr	r2, r2, #50944	; 0xc700
 c101c1c:	e5832000 	str	r2, [r3]
	TCFG1 = (TCFG1 & ~(0xf << 12)) | (4 << 12);
 c101c20:	e59f3070 	ldr	r3, [pc, #112]	; c101c98 <timer3_start_timeout+0xa8>
 c101c24:	e59f206c 	ldr	r2, [pc, #108]	; c101c98 <timer3_start_timeout+0xa8>
 c101c28:	e5922000 	ldr	r2, [r2]
 c101c2c:	e3c22a0f 	bic	r2, r2, #61440	; 0xf000
 c101c30:	e3822901 	orr	r2, r2, #16384	; 0x4000
 c101c34:	e5832000 	str	r2, [r3]
	TCNTB3 = n;
 c101c38:	e59f305c 	ldr	r3, [pc, #92]	; c101c9c <timer3_start_timeout+0xac>
 c101c3c:	e15b20be 	ldrh	r2, [fp, #-14]
 c101c40:	e5832000 	str	r2, [r3]
	TCON = (TCON & ~(0xf << 16)) | (1 << 17);
 c101c44:	e59f3054 	ldr	r3, [pc, #84]	; c101ca0 <timer3_start_timeout+0xb0>
 c101c48:	e59f2050 	ldr	r2, [pc, #80]	; c101ca0 <timer3_start_timeout+0xb0>
 c101c4c:	e5922000 	ldr	r2, [r2]
 c101c50:	e3c2280f 	bic	r2, r2, #983040	; 0xf0000
 c101c54:	e3822802 	orr	r2, r2, #131072	; 0x20000
 c101c58:	e5832000 	str	r2, [r3]
	TCON = (TCON & ~(0xf << 16)) | (1 << 16);
 c101c5c:	e59f303c 	ldr	r3, [pc, #60]	; c101ca0 <timer3_start_timeout+0xb0>
 c101c60:	e59f2038 	ldr	r2, [pc, #56]	; c101ca0 <timer3_start_timeout+0xb0>
 c101c64:	e5922000 	ldr	r2, [r2]
 c101c68:	e3c2280f 	bic	r2, r2, #983040	; 0xf0000
 c101c6c:	e3822801 	orr	r2, r2, #65536	; 0x10000
 c101c70:	e5832000 	str	r2, [r3]
	while (!TCNTO3 )
 c101c74:	e1a00000 	nop			; (mov r0, r0)
 c101c78:	e59f3024 	ldr	r3, [pc, #36]	; c101ca4 <timer3_start_timeout+0xb4>
 c101c7c:	e5933000 	ldr	r3, [r3]
 c101c80:	e3530000 	cmp	r3, #0
 c101c84:	0afffffb 	beq	c101c78 <timer3_start_timeout+0x88>
		;
}
 c101c88:	e24bd00c 	sub	sp, fp, #12
 c101c8c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c101c90:	e12fff1e 	bx	lr
 c101c94:	01d50000 	.word	0x01d50000
 c101c98:	01d50004 	.word	0x01d50004
 c101c9c:	01d50030 	.word	0x01d50030
 c101ca0:	01d50008 	.word	0x01d50008
 c101ca4:	01d50038 	.word	0x01d50038

0c101ca8 <timer3_timeout>:

/*
 ** Indica si el timer3 ha finalizado su cuenta
 */
uint16 timer3_timeout(void) {
 c101ca8:	e1a0c00d 	mov	ip, sp
 c101cac:	e92dd800 	push	{fp, ip, lr, pc}
 c101cb0:	e24cb004 	sub	fp, ip, #4
	return !TCNTO3 ;
 c101cb4:	e59f3024 	ldr	r3, [pc, #36]	; c101ce0 <timer3_timeout+0x38>
 c101cb8:	e5933000 	ldr	r3, [r3]
 c101cbc:	e3530000 	cmp	r3, #0
 c101cc0:	13a03000 	movne	r3, #0
 c101cc4:	03a03001 	moveq	r3, #1
 c101cc8:	e1a03803 	lsl	r3, r3, #16
 c101ccc:	e1a03823 	lsr	r3, r3, #16
}
 c101cd0:	e1a00003 	mov	r0, r3
 c101cd4:	e24bd00c 	sub	sp, fp, #12
 c101cd8:	e89d6800 	ldm	sp, {fp, sp, lr}
 c101cdc:	e12fff1e 	bx	lr
 c101ce0:	01d50038 	.word	0x01d50038

0c101ce4 <timer0_open_tick>:
 ** Instala, en la tabla de vectores de interrupci�n, la funci�n isr como RTI de interrupciones del timer0
 ** Borra interrupciones pendientes del timer0
 ** Desenmascara globalmente las interrupciones y espec�ficamente las interrupciones del timer0
 ** Configura el timer0 para que genere tps interrupciones por segundo
 */
void timer0_open_tick(void (*isr)(void), uint16 tps) {
 c101ce4:	e1a0c00d 	mov	ip, sp
 c101ce8:	e92dd810 	push	{r4, fp, ip, lr, pc}
 c101cec:	e24cb004 	sub	fp, ip, #4
 c101cf0:	e24dd00c 	sub	sp, sp, #12
 c101cf4:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
 c101cf8:	e1a03001 	mov	r3, r1
 c101cfc:	e14b31ba 	strh	r3, [fp, #-26]	; 0xffffffe6
	pISR_TIMER0 = (uint32)isr;
 c101d00:	e59f31f4 	ldr	r3, [pc, #500]	; c101efc <timer0_open_tick+0x218>
 c101d04:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 c101d08:	e5832000 	str	r2, [r3]
	I_ISPC = BIT_TIMER0;
 c101d0c:	e59f31ec 	ldr	r3, [pc, #492]	; c101f00 <timer0_open_tick+0x21c>
 c101d10:	e3a02a02 	mov	r2, #8192	; 0x2000
 c101d14:	e5832000 	str	r2, [r3]
	INTMSK &= ~(BIT_GLOBAL | BIT_TIMER0);
 c101d18:	e59f21e4 	ldr	r2, [pc, #484]	; c101f04 <timer0_open_tick+0x220>
 c101d1c:	e59f31e0 	ldr	r3, [pc, #480]	; c101f04 <timer0_open_tick+0x220>
 c101d20:	e5933000 	ldr	r3, [r3]
 c101d24:	e3c33301 	bic	r3, r3, #67108864	; 0x4000000
 c101d28:	e3c33a02 	bic	r3, r3, #8192	; 0x2000
 c101d2c:	e5823000 	str	r3, [r2]
	if (tps > 0 && tps <= 10) {
 c101d30:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
 c101d34:	e3530000 	cmp	r3, #0
 c101d38:	0a000018 	beq	c101da0 <timer0_open_tick+0xbc>
 c101d3c:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
 c101d40:	e353000a 	cmp	r3, #10
 c101d44:	8a000015 	bhi	c101da0 <timer0_open_tick+0xbc>
		TCFG0 = (TCFG0 & ~(0xff << 0)) | (199 << 0);
 c101d48:	e59f31b8 	ldr	r3, [pc, #440]	; c101f08 <timer0_open_tick+0x224>
 c101d4c:	e59f21b4 	ldr	r2, [pc, #436]	; c101f08 <timer0_open_tick+0x224>
 c101d50:	e5922000 	ldr	r2, [r2]
 c101d54:	e3c220ff 	bic	r2, r2, #255	; 0xff
 c101d58:	e38220c7 	orr	r2, r2, #199	; 0xc7
 c101d5c:	e5832000 	str	r2, [r3]
		TCFG1 = (TCFG1 & ~(0xf << 0)) | (2 << 0);
 c101d60:	e59f31a4 	ldr	r3, [pc, #420]	; c101f0c <timer0_open_tick+0x228>
 c101d64:	e59f21a0 	ldr	r2, [pc, #416]	; c101f0c <timer0_open_tick+0x228>
 c101d68:	e5922000 	ldr	r2, [r2]
 c101d6c:	e3c2200f 	bic	r2, r2, #15
 c101d70:	e3822002 	orr	r2, r2, #2
 c101d74:	e5832000 	str	r2, [r3]
		TCNTB0 = (40000U / tps);
 c101d78:	e59f4190 	ldr	r4, [pc, #400]	; c101f10 <timer0_open_tick+0x22c>
 c101d7c:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
 c101d80:	e59f018c 	ldr	r0, [pc, #396]	; c101f14 <timer0_open_tick+0x230>
 c101d84:	e1a01003 	mov	r1, r3
 c101d88:	eb00026a 	bl	c102738 <__aeabi_uidiv>
 c101d8c:	e1a03000 	mov	r3, r0
 c101d90:	e1a03803 	lsl	r3, r3, #16
 c101d94:	e1a03823 	lsr	r3, r3, #16
 c101d98:	e5843000 	str	r3, [r4]
 c101d9c:	ea000047 	b	c101ec0 <timer0_open_tick+0x1dc>
	} else if (tps > 10 && tps <= 100) {
 c101da0:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
 c101da4:	e353000a 	cmp	r3, #10
 c101da8:	9a000016 	bls	c101e08 <timer0_open_tick+0x124>
 c101dac:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
 c101db0:	e3530064 	cmp	r3, #100	; 0x64
 c101db4:	8a000013 	bhi	c101e08 <timer0_open_tick+0x124>
		TCFG0 = (TCFG0 & ~(0xff << 0))  | (4 << 0);
 c101db8:	e59f3148 	ldr	r3, [pc, #328]	; c101f08 <timer0_open_tick+0x224>
 c101dbc:	e59f2144 	ldr	r2, [pc, #324]	; c101f08 <timer0_open_tick+0x224>
 c101dc0:	e5922000 	ldr	r2, [r2]
 c101dc4:	e3c220ff 	bic	r2, r2, #255	; 0xff
 c101dc8:	e3822004 	orr	r2, r2, #4
 c101dcc:	e5832000 	str	r2, [r3]
		TCFG1 = (TCFG1 & ~(0xf << 0)) | (4 << 0);
 c101dd0:	e59f3134 	ldr	r3, [pc, #308]	; c101f0c <timer0_open_tick+0x228>
 c101dd4:	e59f2130 	ldr	r2, [pc, #304]	; c101f0c <timer0_open_tick+0x228>
 c101dd8:	e5922000 	ldr	r2, [r2]
 c101ddc:	e3c2200f 	bic	r2, r2, #15
 c101de0:	e3822004 	orr	r2, r2, #4
 c101de4:	e5832000 	str	r2, [r3]
		TCNTB0 = (400000U / (uint32) tps);
 c101de8:	e59f4120 	ldr	r4, [pc, #288]	; c101f10 <timer0_open_tick+0x22c>
 c101dec:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
 c101df0:	e59f0120 	ldr	r0, [pc, #288]	; c101f18 <timer0_open_tick+0x234>
 c101df4:	e1a01003 	mov	r1, r3
 c101df8:	eb00024e 	bl	c102738 <__aeabi_uidiv>
 c101dfc:	e1a03000 	mov	r3, r0
 c101e00:	e5843000 	str	r3, [r4]
 c101e04:	ea00002d 	b	c101ec0 <timer0_open_tick+0x1dc>
	} else if (tps > 100 && tps <= 1000) {
 c101e08:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
 c101e0c:	e3530064 	cmp	r3, #100	; 0x64
 c101e10:	9a000016 	bls	c101e70 <timer0_open_tick+0x18c>
 c101e14:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
 c101e18:	e3530ffa 	cmp	r3, #1000	; 0x3e8
 c101e1c:	8a000013 	bhi	c101e70 <timer0_open_tick+0x18c>
		TCFG0 = (TCFG0 & ~(0xff << 0)) | (1 << 0);
 c101e20:	e59f30e0 	ldr	r3, [pc, #224]	; c101f08 <timer0_open_tick+0x224>
 c101e24:	e59f20dc 	ldr	r2, [pc, #220]	; c101f08 <timer0_open_tick+0x224>
 c101e28:	e5922000 	ldr	r2, [r2]
 c101e2c:	e3c220ff 	bic	r2, r2, #255	; 0xff
 c101e30:	e3822001 	orr	r2, r2, #1
 c101e34:	e5832000 	str	r2, [r3]
		TCFG1 = (TCFG1 & ~(0xf << 0)) | (2 << 0);
 c101e38:	e59f30cc 	ldr	r3, [pc, #204]	; c101f0c <timer0_open_tick+0x228>
 c101e3c:	e59f20c8 	ldr	r2, [pc, #200]	; c101f0c <timer0_open_tick+0x228>
 c101e40:	e5922000 	ldr	r2, [r2]
 c101e44:	e3c2200f 	bic	r2, r2, #15
 c101e48:	e3822002 	orr	r2, r2, #2
 c101e4c:	e5832000 	str	r2, [r3]
		TCNTB0 = (4000000U / (uint32) tps);
 c101e50:	e59f40b8 	ldr	r4, [pc, #184]	; c101f10 <timer0_open_tick+0x22c>
 c101e54:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
 c101e58:	e59f00bc 	ldr	r0, [pc, #188]	; c101f1c <timer0_open_tick+0x238>
 c101e5c:	e1a01003 	mov	r1, r3
 c101e60:	eb000234 	bl	c102738 <__aeabi_uidiv>
 c101e64:	e1a03000 	mov	r3, r0
 c101e68:	e5843000 	str	r3, [r4]
 c101e6c:	ea000013 	b	c101ec0 <timer0_open_tick+0x1dc>
	} else if (tps > 1000) {
 c101e70:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
 c101e74:	e3530ffa 	cmp	r3, #1000	; 0x3e8
 c101e78:	9a000010 	bls	c101ec0 <timer0_open_tick+0x1dc>
		TCFG0 = (TCFG0 & ~(0xff << 0)) | (0 << 0);
 c101e7c:	e59f3084 	ldr	r3, [pc, #132]	; c101f08 <timer0_open_tick+0x224>
 c101e80:	e59f2080 	ldr	r2, [pc, #128]	; c101f08 <timer0_open_tick+0x224>
 c101e84:	e5922000 	ldr	r2, [r2]
 c101e88:	e3c220ff 	bic	r2, r2, #255	; 0xff
 c101e8c:	e5832000 	str	r2, [r3]
		TCFG1 = (TCFG1 & ~(0xf << 0)) | (0 << 0);
 c101e90:	e59f3074 	ldr	r3, [pc, #116]	; c101f0c <timer0_open_tick+0x228>
 c101e94:	e59f2070 	ldr	r2, [pc, #112]	; c101f0c <timer0_open_tick+0x228>
 c101e98:	e5922000 	ldr	r2, [r2]
 c101e9c:	e3c2200f 	bic	r2, r2, #15
 c101ea0:	e5832000 	str	r2, [r3]
		TCNTB0 = (32000000U / (uint32) tps);
 c101ea4:	e59f4064 	ldr	r4, [pc, #100]	; c101f10 <timer0_open_tick+0x22c>
 c101ea8:	e15b31ba 	ldrh	r3, [fp, #-26]	; 0xffffffe6
 c101eac:	e59f006c 	ldr	r0, [pc, #108]	; c101f20 <timer0_open_tick+0x23c>
 c101eb0:	e1a01003 	mov	r1, r3
 c101eb4:	eb00021f 	bl	c102738 <__aeabi_uidiv>
 c101eb8:	e1a03000 	mov	r3, r0
 c101ebc:	e5843000 	str	r3, [r4]
	}
	TCON = (TCON & ~(0x7 << 0)) | (1<<3) | (1 << 1);
 c101ec0:	e59f305c 	ldr	r3, [pc, #92]	; c101f24 <timer0_open_tick+0x240>
 c101ec4:	e59f2058 	ldr	r2, [pc, #88]	; c101f24 <timer0_open_tick+0x240>
 c101ec8:	e5922000 	ldr	r2, [r2]
 c101ecc:	e3c2200f 	bic	r2, r2, #15
 c101ed0:	e382200a 	orr	r2, r2, #10
 c101ed4:	e5832000 	str	r2, [r3]
	TCON = (TCON & ~(0x7 << 0)) | (1<<3) | (1 << 0);
 c101ed8:	e59f3044 	ldr	r3, [pc, #68]	; c101f24 <timer0_open_tick+0x240>
 c101edc:	e59f2040 	ldr	r2, [pc, #64]	; c101f24 <timer0_open_tick+0x240>
 c101ee0:	e5922000 	ldr	r2, [r2]
 c101ee4:	e3c2200f 	bic	r2, r2, #15
 c101ee8:	e3822009 	orr	r2, r2, #9
 c101eec:	e5832000 	str	r2, [r3]
}
 c101ef0:	e24bd010 	sub	sp, fp, #16
 c101ef4:	e89d6810 	ldm	sp, {r4, fp, sp, lr}
 c101ef8:	e12fff1e 	bx	lr
 c101efc:	0c7fff54 	.word	0x0c7fff54
 c101f00:	01e00024 	.word	0x01e00024
 c101f04:	01e0000c 	.word	0x01e0000c
 c101f08:	01d50000 	.word	0x01d50000
 c101f0c:	01d50004 	.word	0x01d50004
 c101f10:	01d5000c 	.word	0x01d5000c
 c101f14:	00009c40 	.word	0x00009c40
 c101f18:	00061a80 	.word	0x00061a80
 c101f1c:	003d0900 	.word	0x003d0900
 c101f20:	01e84800 	.word	0x01e84800
 c101f24:	01d50008 	.word	0x01d50008

0c101f28 <timer0_open_ms>:
 ** Borra interrupciones pendientes del timer0
 ** Desenmascara globalmente las interrupciones y espec�ficamente las interrupciones del timer0
 ** Configura el timer0 para que genere interrupciones en el modo y con la periodicidad indicadas
 ** Configura el timer0 para que genere interrupciones en el modo y con la periodicidad indicadas
 */
void timer0_open_ms(void (*isr)(void), uint16 ms, uint8 mode) {
 c101f28:	e1a0c00d 	mov	ip, sp
 c101f2c:	e92dd800 	push	{fp, ip, lr, pc}
 c101f30:	e24cb004 	sub	fp, ip, #4
 c101f34:	e24dd008 	sub	sp, sp, #8
 c101f38:	e50b0010 	str	r0, [fp, #-16]
 c101f3c:	e1a03002 	mov	r3, r2
 c101f40:	e14b11b2 	strh	r1, [fp, #-18]	; 0xffffffee
 c101f44:	e54b3013 	strb	r3, [fp, #-19]	; 0xffffffed
	pISR_TIMER0 = (uint32)isr;
 c101f48:	e59f30b0 	ldr	r3, [pc, #176]	; c102000 <timer0_open_ms+0xd8>
 c101f4c:	e51b2010 	ldr	r2, [fp, #-16]
 c101f50:	e5832000 	str	r2, [r3]
	I_ISPC = BIT_TIMER0;
 c101f54:	e59f30a8 	ldr	r3, [pc, #168]	; c102004 <timer0_open_ms+0xdc>
 c101f58:	e3a02a02 	mov	r2, #8192	; 0x2000
 c101f5c:	e5832000 	str	r2, [r3]
	INTMSK &= ~(BIT_GLOBAL | BIT_TIMER0);
 c101f60:	e59f20a0 	ldr	r2, [pc, #160]	; c102008 <timer0_open_ms+0xe0>
 c101f64:	e59f309c 	ldr	r3, [pc, #156]	; c102008 <timer0_open_ms+0xe0>
 c101f68:	e5933000 	ldr	r3, [r3]
 c101f6c:	e3c33301 	bic	r3, r3, #67108864	; 0x4000000
 c101f70:	e3c33a02 	bic	r3, r3, #8192	; 0x2000
 c101f74:	e5823000 	str	r3, [r2]
	TCFG0 = (TCFG0 & ~(0xff << 0)) | (199 << 0);
 c101f78:	e59f308c 	ldr	r3, [pc, #140]	; c10200c <timer0_open_ms+0xe4>
 c101f7c:	e59f2088 	ldr	r2, [pc, #136]	; c10200c <timer0_open_ms+0xe4>
 c101f80:	e5922000 	ldr	r2, [r2]
 c101f84:	e3c220ff 	bic	r2, r2, #255	; 0xff
 c101f88:	e38220c7 	orr	r2, r2, #199	; 0xc7
 c101f8c:	e5832000 	str	r2, [r3]
	TCFG1 = (TCFG1 & ~(0xf << 0)) | (4 << 0);
 c101f90:	e59f3078 	ldr	r3, [pc, #120]	; c102010 <timer0_open_ms+0xe8>
 c101f94:	e59f2074 	ldr	r2, [pc, #116]	; c102010 <timer0_open_ms+0xe8>
 c101f98:	e5922000 	ldr	r2, [r2]
 c101f9c:	e3c2200f 	bic	r2, r2, #15
 c101fa0:	e3822004 	orr	r2, r2, #4
 c101fa4:	e5832000 	str	r2, [r3]
	TCNTB0 = 10 * ms;
 c101fa8:	e59f1064 	ldr	r1, [pc, #100]	; c102014 <timer0_open_ms+0xec>
 c101fac:	e15b21b2 	ldrh	r2, [fp, #-18]	; 0xffffffee
 c101fb0:	e1a03002 	mov	r3, r2
 c101fb4:	e1a03103 	lsl	r3, r3, #2
 c101fb8:	e0833002 	add	r3, r3, r2
 c101fbc:	e1a03083 	lsl	r3, r3, #1
 c101fc0:	e5813000 	str	r3, [r1]
	TCON = (TCON & ~(0xf << 0)) | (1 << 1);
 c101fc4:	e59f304c 	ldr	r3, [pc, #76]	; c102018 <timer0_open_ms+0xf0>
 c101fc8:	e59f2048 	ldr	r2, [pc, #72]	; c102018 <timer0_open_ms+0xf0>
 c101fcc:	e5922000 	ldr	r2, [r2]
 c101fd0:	e3c2200f 	bic	r2, r2, #15
 c101fd4:	e3822002 	orr	r2, r2, #2
 c101fd8:	e5832000 	str	r2, [r3]
	TCON = (TCON & ~(0xf << 0)) | (1 << 0);
 c101fdc:	e59f3034 	ldr	r3, [pc, #52]	; c102018 <timer0_open_ms+0xf0>
 c101fe0:	e59f2030 	ldr	r2, [pc, #48]	; c102018 <timer0_open_ms+0xf0>
 c101fe4:	e5922000 	ldr	r2, [r2]
 c101fe8:	e3c2200f 	bic	r2, r2, #15
 c101fec:	e3822001 	orr	r2, r2, #1
 c101ff0:	e5832000 	str	r2, [r3]
}
 c101ff4:	e24bd00c 	sub	sp, fp, #12
 c101ff8:	e89d6800 	ldm	sp, {fp, sp, lr}
 c101ffc:	e12fff1e 	bx	lr
 c102000:	0c7fff54 	.word	0x0c7fff54
 c102004:	01e00024 	.word	0x01e00024
 c102008:	01e0000c 	.word	0x01e0000c
 c10200c:	01d50000 	.word	0x01d50000
 c102010:	01d50004 	.word	0x01d50004
 c102014:	01d5000c 	.word	0x01d5000c
 c102018:	01d50008 	.word	0x01d50008

0c10201c <timer0_close>:
/*
 ** Para y pone a 0 todos sus bufferes y registros del timer0
 ** Deshabilita las interrupciones del timer0
 ** Desinstala la RTI del timer0
 */
void timer0_close(void) {
 c10201c:	e1a0c00d 	mov	ip, sp
 c102020:	e92dd800 	push	{fp, ip, lr, pc}
 c102024:	e24cb004 	sub	fp, ip, #4
	TCNTB0 = 0;
 c102028:	e59f306c 	ldr	r3, [pc, #108]	; c10209c <timer0_close+0x80>
 c10202c:	e3a02000 	mov	r2, #0
 c102030:	e5832000 	str	r2, [r3]
	TCMPB0 = 0;
 c102034:	e59f3064 	ldr	r3, [pc, #100]	; c1020a0 <timer0_close+0x84>
 c102038:	e3a02000 	mov	r2, #0
 c10203c:	e5832000 	str	r2, [r3]
	TCON = (TCON & ~(0xf << 0)) | (1 << 1);
 c102040:	e59f305c 	ldr	r3, [pc, #92]	; c1020a4 <timer0_close+0x88>
 c102044:	e59f2058 	ldr	r2, [pc, #88]	; c1020a4 <timer0_close+0x88>
 c102048:	e5922000 	ldr	r2, [r2]
 c10204c:	e3c2200f 	bic	r2, r2, #15
 c102050:	e3822002 	orr	r2, r2, #2
 c102054:	e5832000 	str	r2, [r3]
		TCON = (TCON & ~(0xf << 0)) | (1 << 0);
 c102058:	e59f3044 	ldr	r3, [pc, #68]	; c1020a4 <timer0_close+0x88>
 c10205c:	e59f2040 	ldr	r2, [pc, #64]	; c1020a4 <timer0_close+0x88>
 c102060:	e5922000 	ldr	r2, [r2]
 c102064:	e3c2200f 	bic	r2, r2, #15
 c102068:	e3822001 	orr	r2, r2, #1
 c10206c:	e5832000 	str	r2, [r3]
	INTMSK |= BIT_TIMER0;
 c102070:	e59f3030 	ldr	r3, [pc, #48]	; c1020a8 <timer0_close+0x8c>
 c102074:	e59f202c 	ldr	r2, [pc, #44]	; c1020a8 <timer0_close+0x8c>
 c102078:	e5922000 	ldr	r2, [r2]
 c10207c:	e3822a02 	orr	r2, r2, #8192	; 0x2000
 c102080:	e5832000 	str	r2, [r3]
	pISR_TIMER0 = (uint32)isr_TIMER0_dummy;
 c102084:	e59f3020 	ldr	r3, [pc, #32]	; c1020ac <timer0_close+0x90>
 c102088:	e59f2020 	ldr	r2, [pc, #32]	; c1020b0 <timer0_close+0x94>
 c10208c:	e5832000 	str	r2, [r3]

}
 c102090:	e24bd00c 	sub	sp, fp, #12
 c102094:	e89d6800 	ldm	sp, {fp, sp, lr}
 c102098:	e12fff1e 	bx	lr
 c10209c:	01d5000c 	.word	0x01d5000c
 c1020a0:	01d50010 	.word	0x01d50010
 c1020a4:	01d50008 	.word	0x01d50008
 c1020a8:	01e0000c 	.word	0x01e0000c
 c1020ac:	0c7fff54 	.word	0x0c7fff54
 c1020b0:	0c101564 	.word	0x0c101564

0c1020b4 <uart0_init>:
**   FIFOs: activadas
**   Protocolo: normal, sin paridad, 1 bit de stop, 8 bits de datos
**   Velocidad: 115200 baudios
**   Sin tratamiento de errores
*/
void uart0_init( void ){
 c1020b4:	e1a0c00d 	mov	ip, sp
 c1020b8:	e92dd800 	push	{fp, ip, lr, pc}
 c1020bc:	e24cb004 	sub	fp, ip, #4
	ULCON0 &= ~(1<<6) & ~(1<<5) & ~(1<<4) & ~(1<<3) & ~(1<<2);
 c1020c0:	e3a0361d 	mov	r3, #30408704	; 0x1d00000
 c1020c4:	e3a0261d 	mov	r2, #30408704	; 0x1d00000
 c1020c8:	e5922000 	ldr	r2, [r2]
 c1020cc:	e3c2207c 	bic	r2, r2, #124	; 0x7c
 c1020d0:	e5832000 	str	r2, [r3]
	ULCON0 |= 3;
 c1020d4:	e3a0361d 	mov	r3, #30408704	; 0x1d00000
 c1020d8:	e3a0261d 	mov	r2, #30408704	; 0x1d00000
 c1020dc:	e5922000 	ldr	r2, [r2]
 c1020e0:	e3822003 	orr	r2, r2, #3
 c1020e4:	e5832000 	str	r2, [r3]
	UBRDIV0 = 34;
 c1020e8:	e59f3074 	ldr	r3, [pc, #116]	; c102164 <uart0_init+0xb0>
 c1020ec:	e3a02022 	mov	r2, #34	; 0x22
 c1020f0:	e5832000 	str	r2, [r3]
	UMCON0 &= ~(1<<4);
 c1020f4:	e59f306c 	ldr	r3, [pc, #108]	; c102168 <uart0_init+0xb4>
 c1020f8:	e59f2068 	ldr	r2, [pc, #104]	; c102168 <uart0_init+0xb4>
 c1020fc:	e5922000 	ldr	r2, [r2]
 c102100:	e3c22010 	bic	r2, r2, #16
 c102104:	e5832000 	str	r2, [r3]
	UCON0 |= (1<<2) | (1<<0);
 c102108:	e59f305c 	ldr	r3, [pc, #92]	; c10216c <uart0_init+0xb8>
 c10210c:	e59f2058 	ldr	r2, [pc, #88]	; c10216c <uart0_init+0xb8>
 c102110:	e5922000 	ldr	r2, [r2]
 c102114:	e3822005 	orr	r2, r2, #5
 c102118:	e5832000 	str	r2, [r3]
	UCON0 &= ~(1<<7) & ~(1<<6) & ~(1<<5) & ~(1<<4);
 c10211c:	e59f3048 	ldr	r3, [pc, #72]	; c10216c <uart0_init+0xb8>
 c102120:	e59f2044 	ldr	r2, [pc, #68]	; c10216c <uart0_init+0xb8>
 c102124:	e5922000 	ldr	r2, [r2]
 c102128:	e3c220f0 	bic	r2, r2, #240	; 0xf0
 c10212c:	e5832000 	str	r2, [r3]
	UFCON0 |= (1<<0);
 c102130:	e59f3038 	ldr	r3, [pc, #56]	; c102170 <uart0_init+0xbc>
 c102134:	e59f2034 	ldr	r2, [pc, #52]	; c102170 <uart0_init+0xbc>
 c102138:	e5922000 	ldr	r2, [r2]
 c10213c:	e3822001 	orr	r2, r2, #1
 c102140:	e5832000 	str	r2, [r3]
	UFCON0 &= ~(1<<2) & ~(1<<1);
 c102144:	e59f3024 	ldr	r3, [pc, #36]	; c102170 <uart0_init+0xbc>
 c102148:	e59f2020 	ldr	r2, [pc, #32]	; c102170 <uart0_init+0xbc>
 c10214c:	e5922000 	ldr	r2, [r2]
 c102150:	e3c22006 	bic	r2, r2, #6
 c102154:	e5832000 	str	r2, [r3]
}
 c102158:	e24bd00c 	sub	sp, fp, #12
 c10215c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c102160:	e12fff1e 	bx	lr
 c102164:	01d00028 	.word	0x01d00028
 c102168:	01d0000c 	.word	0x01d0000c
 c10216c:	01d00004 	.word	0x01d00004
 c102170:	01d00008 	.word	0x01d00008

0c102174 <uart0_putchar>:

/*
** Env�a un caracter por la UART
*/
void uart0_putchar( char ch ){
 c102174:	e1a0c00d 	mov	ip, sp
 c102178:	e92dd800 	push	{fp, ip, lr, pc}
 c10217c:	e24cb004 	sub	fp, ip, #4
 c102180:	e24dd008 	sub	sp, sp, #8
 c102184:	e1a03000 	mov	r3, r0
 c102188:	e54b300d 	strb	r3, [fp, #-13]
	while(((UFSTAT0 >> 9) & 1) == 1);
 c10218c:	e1a00000 	nop			; (mov r0, r0)
 c102190:	e59f302c 	ldr	r3, [pc, #44]	; c1021c4 <uart0_putchar+0x50>
 c102194:	e5933000 	ldr	r3, [r3]
 c102198:	e1a034a3 	lsr	r3, r3, #9
 c10219c:	e2033001 	and	r3, r3, #1
 c1021a0:	e20330ff 	and	r3, r3, #255	; 0xff
 c1021a4:	e3530000 	cmp	r3, #0
 c1021a8:	1afffff8 	bne	c102190 <uart0_putchar+0x1c>
	UTXH0 = ch;
 c1021ac:	e59f3014 	ldr	r3, [pc, #20]	; c1021c8 <uart0_putchar+0x54>
 c1021b0:	e55b200d 	ldrb	r2, [fp, #-13]
 c1021b4:	e5832000 	str	r2, [r3]
}
 c1021b8:	e24bd00c 	sub	sp, fp, #12
 c1021bc:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1021c0:	e12fff1e 	bx	lr
 c1021c4:	01d00018 	.word	0x01d00018
 c1021c8:	01d00020 	.word	0x01d00020

0c1021cc <uart0_puts>:

/*
** Env�a una cadena de caracteres por la UART
*/
void uart0_puts( char *s ){
 c1021cc:	e1a0c00d 	mov	ip, sp
 c1021d0:	e92dd800 	push	{fp, ip, lr, pc}
 c1021d4:	e24cb004 	sub	fp, ip, #4
 c1021d8:	e24dd010 	sub	sp, sp, #16
 c1021dc:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
	int i=0;
 c1021e0:	e3a03000 	mov	r3, #0
 c1021e4:	e50b3010 	str	r3, [fp, #-16]
	while(s[i] != '\0'){
 c1021e8:	ea000008 	b	c102210 <uart0_puts+0x44>
		uart0_putchar(s[i]);
 c1021ec:	e51b3010 	ldr	r3, [fp, #-16]
 c1021f0:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 c1021f4:	e0823003 	add	r3, r2, r3
 c1021f8:	e5d33000 	ldrb	r3, [r3]
 c1021fc:	e1a00003 	mov	r0, r3
 c102200:	ebffffdb 	bl	c102174 <uart0_putchar>
		i++;
 c102204:	e51b3010 	ldr	r3, [fp, #-16]
 c102208:	e2833001 	add	r3, r3, #1
 c10220c:	e50b3010 	str	r3, [fp, #-16]
/*
** Env�a una cadena de caracteres por la UART
*/
void uart0_puts( char *s ){
	int i=0;
	while(s[i] != '\0'){
 c102210:	e51b3010 	ldr	r3, [fp, #-16]
 c102214:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 c102218:	e0823003 	add	r3, r2, r3
 c10221c:	e5d33000 	ldrb	r3, [r3]
 c102220:	e3530000 	cmp	r3, #0
 c102224:	1afffff0 	bne	c1021ec <uart0_puts+0x20>
		uart0_putchar(s[i]);
		i++;
	}
}
 c102228:	e24bd00c 	sub	sp, fp, #12
 c10222c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c102230:	e12fff1e 	bx	lr

0c102234 <uart0_putint>:

/*
** Env�a una cadena de caracteres por la UART que representa en decimal al entero que toma como argumento
*/
void uart0_putint( int32 i ){
 c102234:	e1a0c00d 	mov	ip, sp
 c102238:	e92dd800 	push	{fp, ip, lr, pc}
 c10223c:	e24cb004 	sub	fp, ip, #4
 c102240:	e24dd040 	sub	sp, sp, #64	; 0x40
 c102244:	e50b0048 	str	r0, [fp, #-72]	; 0xffffffb8
	int32 num=i, tam=0, numero[11], j=0;
 c102248:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
 c10224c:	e50b3010 	str	r3, [fp, #-16]
 c102250:	e3a03000 	mov	r3, #0
 c102254:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
 c102258:	e3a03000 	mov	r3, #0
 c10225c:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8

	if(num<0){
 c102260:	e51b3010 	ldr	r3, [fp, #-16]
 c102264:	e3530000 	cmp	r3, #0
 c102268:	aa000004 	bge	c102280 <uart0_putint+0x4c>
		uart0_putchar('-');
 c10226c:	e3a0002d 	mov	r0, #45	; 0x2d
 c102270:	ebffffbf 	bl	c102174 <uart0_putchar>
		num*=-1;
 c102274:	e51b3010 	ldr	r3, [fp, #-16]
 c102278:	e2633000 	rsb	r3, r3, #0
 c10227c:	e50b3010 	str	r3, [fp, #-16]
	}

	numero[j]=num%10;
 c102280:	e51b1010 	ldr	r1, [fp, #-16]
 c102284:	e59f3154 	ldr	r3, [pc, #340]	; c1023e0 <uart0_putint+0x1ac>
 c102288:	e0c30391 	smull	r0, r3, r1, r3
 c10228c:	e1a02143 	asr	r2, r3, #2
 c102290:	e1a03fc1 	asr	r3, r1, #31
 c102294:	e0632002 	rsb	r2, r3, r2
 c102298:	e1a03002 	mov	r3, r2
 c10229c:	e1a03103 	lsl	r3, r3, #2
 c1022a0:	e0833002 	add	r3, r3, r2
 c1022a4:	e1a03083 	lsl	r3, r3, #1
 c1022a8:	e0632001 	rsb	r2, r3, r1
 c1022ac:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
 c1022b0:	e3e03037 	mvn	r3, #55	; 0x37
 c1022b4:	e1a01101 	lsl	r1, r1, #2
 c1022b8:	e24b000c 	sub	r0, fp, #12
 c1022bc:	e0801001 	add	r1, r0, r1
 c1022c0:	e0813003 	add	r3, r1, r3
 c1022c4:	e5832000 	str	r2, [r3]
	num/=10;
 c1022c8:	e51b3010 	ldr	r3, [fp, #-16]
 c1022cc:	e59f210c 	ldr	r2, [pc, #268]	; c1023e0 <uart0_putint+0x1ac>
 c1022d0:	e0c21293 	smull	r1, r2, r3, r2
 c1022d4:	e1a02142 	asr	r2, r2, #2
 c1022d8:	e1a03fc3 	asr	r3, r3, #31
 c1022dc:	e0633002 	rsb	r3, r3, r2
 c1022e0:	e50b3010 	str	r3, [fp, #-16]
	tam++;
 c1022e4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c1022e8:	e2833001 	add	r3, r3, #1
 c1022ec:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

	while(num > 0){
 c1022f0:	ea00001e 	b	c102370 <uart0_putint+0x13c>
		j++;
 c1022f4:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c1022f8:	e2833001 	add	r3, r3, #1
 c1022fc:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
		numero[j]=num%10;
 c102300:	e51b1010 	ldr	r1, [fp, #-16]
 c102304:	e59f30d4 	ldr	r3, [pc, #212]	; c1023e0 <uart0_putint+0x1ac>
 c102308:	e0c32391 	smull	r2, r3, r1, r3
 c10230c:	e1a02143 	asr	r2, r3, #2
 c102310:	e1a03fc1 	asr	r3, r1, #31
 c102314:	e0632002 	rsb	r2, r3, r2
 c102318:	e1a03002 	mov	r3, r2
 c10231c:	e1a03103 	lsl	r3, r3, #2
 c102320:	e0833002 	add	r3, r3, r2
 c102324:	e1a03083 	lsl	r3, r3, #1
 c102328:	e0632001 	rsb	r2, r3, r1
 c10232c:	e51b1018 	ldr	r1, [fp, #-24]	; 0xffffffe8
 c102330:	e3e03037 	mvn	r3, #55	; 0x37
 c102334:	e1a01101 	lsl	r1, r1, #2
 c102338:	e24b000c 	sub	r0, fp, #12
 c10233c:	e0801001 	add	r1, r0, r1
 c102340:	e0813003 	add	r3, r1, r3
 c102344:	e5832000 	str	r2, [r3]
		num/=10;
 c102348:	e51b3010 	ldr	r3, [fp, #-16]
 c10234c:	e59f208c 	ldr	r2, [pc, #140]	; c1023e0 <uart0_putint+0x1ac>
 c102350:	e0c21293 	smull	r1, r2, r3, r2
 c102354:	e1a02142 	asr	r2, r2, #2
 c102358:	e1a03fc3 	asr	r3, r3, #31
 c10235c:	e0633002 	rsb	r3, r3, r2
 c102360:	e50b3010 	str	r3, [fp, #-16]
		tam++;
 c102364:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c102368:	e2833001 	add	r3, r3, #1
 c10236c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec

	numero[j]=num%10;
	num/=10;
	tam++;

	while(num > 0){
 c102370:	e51b3010 	ldr	r3, [fp, #-16]
 c102374:	e3530000 	cmp	r3, #0
 c102378:	caffffdd 	bgt	c1022f4 <uart0_putint+0xc0>
		numero[j]=num%10;
		num/=10;
		tam++;
	}

	for(j=tam-1; j>=0; j--)
 c10237c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
 c102380:	e2433001 	sub	r3, r3, #1
 c102384:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
 c102388:	ea00000e 	b	c1023c8 <uart0_putint+0x194>
		uart0_putchar(numero[j]+48);
 c10238c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
 c102390:	e3e03037 	mvn	r3, #55	; 0x37
 c102394:	e1a02102 	lsl	r2, r2, #2
 c102398:	e24b000c 	sub	r0, fp, #12
 c10239c:	e0802002 	add	r2, r0, r2
 c1023a0:	e0823003 	add	r3, r2, r3
 c1023a4:	e5933000 	ldr	r3, [r3]
 c1023a8:	e20330ff 	and	r3, r3, #255	; 0xff
 c1023ac:	e2833030 	add	r3, r3, #48	; 0x30
 c1023b0:	e20330ff 	and	r3, r3, #255	; 0xff
 c1023b4:	e1a00003 	mov	r0, r3
 c1023b8:	ebffff6d 	bl	c102174 <uart0_putchar>
		numero[j]=num%10;
		num/=10;
		tam++;
	}

	for(j=tam-1; j>=0; j--)
 c1023bc:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c1023c0:	e2433001 	sub	r3, r3, #1
 c1023c4:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
 c1023c8:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
 c1023cc:	e3530000 	cmp	r3, #0
 c1023d0:	aaffffed 	bge	c10238c <uart0_putint+0x158>
		uart0_putchar(numero[j]+48);
}
 c1023d4:	e24bd00c 	sub	sp, fp, #12
 c1023d8:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1023dc:	e12fff1e 	bx	lr
 c1023e0:	66666667 	.word	0x66666667

0c1023e4 <uart0_puthex>:

/*
** Env�a una cadena de caracteres por la UART que representa en hexadecimal al entero que toma como argumento
*/
void uart0_puthex( uint32 i ){
 c1023e4:	e1a0c00d 	mov	ip, sp
 c1023e8:	e92dd800 	push	{fp, ip, lr, pc}
 c1023ec:	e24cb004 	sub	fp, ip, #4
 c1023f0:	e24dd018 	sub	sp, sp, #24
 c1023f4:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
	char buf[8 + 1]; //Los caracteres se generan comenzando por el menos significativo
	char *p = buf + 8;	
 c1023f8:	e24b301c 	sub	r3, fp, #28
 c1023fc:	e2833008 	add	r3, r3, #8
 c102400:	e50b3010 	str	r3, [fp, #-16]
	uint8 c; // Almacena fin de cadena
	*p = '\0';
 c102404:	e51b3010 	ldr	r3, [fp, #-16]
 c102408:	e3a02000 	mov	r2, #0
 c10240c:	e5c32000 	strb	r2, [r3]
	do {
		c = i & 0xf; // Resto de la divisi�n por 16
 c102410:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c102414:	e20330ff 	and	r3, r3, #255	; 0xff
 c102418:	e203300f 	and	r3, r3, #15
 c10241c:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
		if( c < 10 )
 c102420:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c102424:	e3530009 	cmp	r3, #9
 c102428:	8a000008 	bhi	c102450 <uart0_puthex+0x6c>
			*--p = '0' + c; // Almacenaje del car�cter
 c10242c:	e51b3010 	ldr	r3, [fp, #-16]
 c102430:	e2433001 	sub	r3, r3, #1
 c102434:	e50b3010 	str	r3, [fp, #-16]
 c102438:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c10243c:	e2833030 	add	r3, r3, #48	; 0x30
 c102440:	e20320ff 	and	r2, r3, #255	; 0xff
 c102444:	e51b3010 	ldr	r3, [fp, #-16]
 c102448:	e5c32000 	strb	r2, [r3]
 c10244c:	ea000007 	b	c102470 <uart0_puthex+0x8c>
		else
			*--p = 'a' + c - 10;
 c102450:	e51b3010 	ldr	r3, [fp, #-16]
 c102454:	e2433001 	sub	r3, r3, #1
 c102458:	e50b3010 	str	r3, [fp, #-16]
 c10245c:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c102460:	e2833057 	add	r3, r3, #87	; 0x57
 c102464:	e20320ff 	and	r2, r3, #255	; 0xff
 c102468:	e51b3010 	ldr	r3, [fp, #-16]
 c10246c:	e5c32000 	strb	r2, [r3]
			i = i >> 4; // Divisi�n por 16
 c102470:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c102474:	e1a03223 	lsr	r3, r3, #4
 c102478:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
	} while( i );
 c10247c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
 c102480:	e3530000 	cmp	r3, #0
 c102484:	1affffe1 	bne	c102410 <uart0_puthex+0x2c>
	uart0_puts( p ); // Env�a la cadena
 c102488:	e51b0010 	ldr	r0, [fp, #-16]
 c10248c:	ebffff4e 	bl	c1021cc <uart0_puts>
}
 c102490:	e24bd00c 	sub	sp, fp, #12
 c102494:	e89d6800 	ldm	sp, {fp, sp, lr}
 c102498:	e12fff1e 	bx	lr

0c10249c <uart0_getchar>:

/*
** Devuelve un caracter recibido por la UART (espera hasta que llegue)
*/
char uart0_getchar( void ){
 c10249c:	e1a0c00d 	mov	ip, sp
 c1024a0:	e92dd800 	push	{fp, ip, lr, pc}
 c1024a4:	e24cb004 	sub	fp, ip, #4
	while( (UFSTAT0 & 0xf) == 0 );
 c1024a8:	e1a00000 	nop			; (mov r0, r0)
 c1024ac:	e59f3028 	ldr	r3, [pc, #40]	; c1024dc <uart0_getchar+0x40>
 c1024b0:	e5933000 	ldr	r3, [r3]
 c1024b4:	e203300f 	and	r3, r3, #15
 c1024b8:	e3530000 	cmp	r3, #0
 c1024bc:	0afffffa 	beq	c1024ac <uart0_getchar+0x10>
	return URXH0;
 c1024c0:	e59f3018 	ldr	r3, [pc, #24]	; c1024e0 <uart0_getchar+0x44>
 c1024c4:	e5933000 	ldr	r3, [r3]
 c1024c8:	e20330ff 	and	r3, r3, #255	; 0xff
}
 c1024cc:	e1a00003 	mov	r0, r3
 c1024d0:	e24bd00c 	sub	sp, fp, #12
 c1024d4:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1024d8:	e12fff1e 	bx	lr
 c1024dc:	01d00018 	.word	0x01d00018
 c1024e0:	01d00024 	.word	0x01d00024

0c1024e4 <uart0_gets>:

/*
** Forma una cadena con los caracteres recibidos por la UART hasta la recepci�n de '\n'
*/
void uart0_gets( char *s ){
 c1024e4:	e1a0c00d 	mov	ip, sp
 c1024e8:	e92dd810 	push	{r4, fp, ip, lr, pc}
 c1024ec:	e24cb004 	sub	fp, ip, #4
 c1024f0:	e24dd014 	sub	sp, sp, #20
 c1024f4:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
	uint8 i=0;
 c1024f8:	e3a03000 	mov	r3, #0
 c1024fc:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
	s[i] = uart0_getchar();
 c102500:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c102504:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
 c102508:	e0824003 	add	r4, r2, r3
 c10250c:	ebffffe2 	bl	c10249c <uart0_getchar>
 c102510:	e1a03000 	mov	r3, r0
 c102514:	e5c43000 	strb	r3, [r4]
	while(s[i] != '\n') {
 c102518:	ea000008 	b	c102540 <uart0_gets+0x5c>
		i++;
 c10251c:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c102520:	e2833001 	add	r3, r3, #1
 c102524:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
		s[i] = uart0_getchar();
 c102528:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c10252c:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
 c102530:	e0824003 	add	r4, r2, r3
 c102534:	ebffffd8 	bl	c10249c <uart0_getchar>
 c102538:	e1a03000 	mov	r3, r0
 c10253c:	e5c43000 	strb	r3, [r4]
** Forma una cadena con los caracteres recibidos por la UART hasta la recepci�n de '\n'
*/
void uart0_gets( char *s ){
	uint8 i=0;
	s[i] = uart0_getchar();
	while(s[i] != '\n') {
 c102540:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c102544:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
 c102548:	e0823003 	add	r3, r2, r3
 c10254c:	e5d33000 	ldrb	r3, [r3]
 c102550:	e353000a 	cmp	r3, #10
 c102554:	1afffff0 	bne	c10251c <uart0_gets+0x38>
		i++;
		s[i] = uart0_getchar();
	}
	s[i] = '\0';
 c102558:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c10255c:	e51b2020 	ldr	r2, [fp, #-32]	; 0xffffffe0
 c102560:	e0823003 	add	r3, r2, r3
 c102564:	e3a02000 	mov	r2, #0
 c102568:	e5c32000 	strb	r2, [r3]
}
 c10256c:	e24bd010 	sub	sp, fp, #16
 c102570:	e89d6810 	ldm	sp, {r4, fp, sp, lr}
 c102574:	e12fff1e 	bx	lr

0c102578 <uart0_getint>:

/*
** Forma una cadena con los caracteres recibidos por la UART hasta la recepci�n de '\n' y los interpreta en decimal
*/
int32 uart0_getint( void ){
 c102578:	e1a0c00d 	mov	ip, sp
 c10257c:	e92dd800 	push	{fp, ip, lr, pc}
 c102580:	e24cb004 	sub	fp, ip, #4
 c102584:	e24dd010 	sub	sp, sp, #16
	int32 num=0, signo=1;
 c102588:	e3a03000 	mov	r3, #0
 c10258c:	e50b3010 	str	r3, [fp, #-16]
 c102590:	e3a03001 	mov	r3, #1
 c102594:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
	uint8 c = uart0_getchar();
 c102598:	ebffffbf 	bl	c10249c <uart0_getchar>
 c10259c:	e1a03000 	mov	r3, r0
 c1025a0:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
	if(c == '-'){
 c1025a4:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c1025a8:	e353002d 	cmp	r3, #45	; 0x2d
 c1025ac:	1a000013 	bne	c102600 <uart0_getint+0x88>
		signo = -1;
 c1025b0:	e3e03000 	mvn	r3, #0
 c1025b4:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
		c = uart0_getchar();
 c1025b8:	ebffffb7 	bl	c10249c <uart0_getchar>
 c1025bc:	e1a03000 	mov	r3, r0
 c1025c0:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
	}

	while(c != '\n') {
 c1025c4:	ea00000d 	b	c102600 <uart0_getint+0x88>
		num *= 10;
 c1025c8:	e51b2010 	ldr	r2, [fp, #-16]
 c1025cc:	e1a03002 	mov	r3, r2
 c1025d0:	e1a03103 	lsl	r3, r3, #2
 c1025d4:	e0833002 	add	r3, r3, r2
 c1025d8:	e1a03083 	lsl	r3, r3, #1
 c1025dc:	e50b3010 	str	r3, [fp, #-16]
		num += c - 48;
 c1025e0:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c1025e4:	e2433030 	sub	r3, r3, #48	; 0x30
 c1025e8:	e51b2010 	ldr	r2, [fp, #-16]
 c1025ec:	e0823003 	add	r3, r2, r3
 c1025f0:	e50b3010 	str	r3, [fp, #-16]
		c = uart0_getchar();
 c1025f4:	ebffffa8 	bl	c10249c <uart0_getchar>
 c1025f8:	e1a03000 	mov	r3, r0
 c1025fc:	e54b3015 	strb	r3, [fp, #-21]	; 0xffffffeb
	if(c == '-'){
		signo = -1;
		c = uart0_getchar();
	}

	while(c != '\n') {
 c102600:	e55b3015 	ldrb	r3, [fp, #-21]	; 0xffffffeb
 c102604:	e353000a 	cmp	r3, #10
 c102608:	1affffee 	bne	c1025c8 <uart0_getint+0x50>
		num *= 10;
		num += c - 48;
		c = uart0_getchar();
	}
	return num*signo;
 c10260c:	e51b3010 	ldr	r3, [fp, #-16]
 c102610:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
 c102614:	e0030392 	mul	r3, r2, r3

}
 c102618:	e1a00003 	mov	r0, r3
 c10261c:	e24bd00c 	sub	sp, fp, #12
 c102620:	e89d6800 	ldm	sp, {fp, sp, lr}
 c102624:	e12fff1e 	bx	lr

0c102628 <uart0_gethex>:

/*
** Forma una cadena con los caracteres recibidos por la UART hasta la recepci�n de '\n' y los interpreta en hexadecimal
*/
uint32 uart0_gethex( void ){
 c102628:	e1a0c00d 	mov	ip, sp
 c10262c:	e92dd800 	push	{fp, ip, lr, pc}
 c102630:	e24cb004 	sub	fp, ip, #4
 c102634:	e24dd008 	sub	sp, sp, #8
	int32 num=0;
 c102638:	e3a03000 	mov	r3, #0
 c10263c:	e50b3010 	str	r3, [fp, #-16]
	uint8 c;

	c = uart0_getchar();
 c102640:	ebffff95 	bl	c10249c <uart0_getchar>
 c102644:	e1a03000 	mov	r3, r0
 c102648:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
	while(c != '\n') {
 c10264c:	ea000031 	b	c102718 <uart0_gethex+0xf0>

		if(c >= '0' && c <= '9')
 c102650:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c102654:	e353002f 	cmp	r3, #47	; 0x2f
 c102658:	9a000008 	bls	c102680 <uart0_gethex+0x58>
 c10265c:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c102660:	e3530039 	cmp	r3, #57	; 0x39
 c102664:	8a000005 	bhi	c102680 <uart0_gethex+0x58>
			num += c - '0';
 c102668:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c10266c:	e2433030 	sub	r3, r3, #48	; 0x30
 c102670:	e51b2010 	ldr	r2, [fp, #-16]
 c102674:	e0823003 	add	r3, r2, r3
 c102678:	e50b3010 	str	r3, [fp, #-16]
 c10267c:	ea000016 	b	c1026dc <uart0_gethex+0xb4>
		else if(c >= 'A' && c <= 'F')
 c102680:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c102684:	e3530040 	cmp	r3, #64	; 0x40
 c102688:	9a000008 	bls	c1026b0 <uart0_gethex+0x88>
 c10268c:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c102690:	e3530046 	cmp	r3, #70	; 0x46
 c102694:	8a000005 	bhi	c1026b0 <uart0_gethex+0x88>
			num += c - 55;
 c102698:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c10269c:	e2433037 	sub	r3, r3, #55	; 0x37
 c1026a0:	e51b2010 	ldr	r2, [fp, #-16]
 c1026a4:	e0823003 	add	r3, r2, r3
 c1026a8:	e50b3010 	str	r3, [fp, #-16]
 c1026ac:	ea00000a 	b	c1026dc <uart0_gethex+0xb4>
		else if(c >= 'a' && c <= 'f')
 c1026b0:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c1026b4:	e3530060 	cmp	r3, #96	; 0x60
 c1026b8:	9a000007 	bls	c1026dc <uart0_gethex+0xb4>
 c1026bc:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c1026c0:	e3530066 	cmp	r3, #102	; 0x66
 c1026c4:	8a000004 	bhi	c1026dc <uart0_gethex+0xb4>
				num += c - 87;
 c1026c8:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c1026cc:	e2433057 	sub	r3, r3, #87	; 0x57
 c1026d0:	e51b2010 	ldr	r2, [fp, #-16]
 c1026d4:	e0823003 	add	r3, r2, r3
 c1026d8:	e50b3010 	str	r3, [fp, #-16]
		num *= 16;
 c1026dc:	e51b3010 	ldr	r3, [fp, #-16]
 c1026e0:	e1a03203 	lsl	r3, r3, #4
 c1026e4:	e50b3010 	str	r3, [fp, #-16]
		c = uart0_getchar();
 c1026e8:	ebffff6b 	bl	c10249c <uart0_getchar>
 c1026ec:	e1a03000 	mov	r3, r0
 c1026f0:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
		if(c == '\n')
 c1026f4:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c1026f8:	e353000a 	cmp	r3, #10
 c1026fc:	1a000005 	bne	c102718 <uart0_gethex+0xf0>
			num /= 16;
 c102700:	e51b3010 	ldr	r3, [fp, #-16]
 c102704:	e283200f 	add	r2, r3, #15
 c102708:	e3530000 	cmp	r3, #0
 c10270c:	b1a03002 	movlt	r3, r2
 c102710:	e1a03243 	asr	r3, r3, #4
 c102714:	e50b3010 	str	r3, [fp, #-16]
uint32 uart0_gethex( void ){
	int32 num=0;
	uint8 c;

	c = uart0_getchar();
	while(c != '\n') {
 c102718:	e55b3011 	ldrb	r3, [fp, #-17]	; 0xffffffef
 c10271c:	e353000a 	cmp	r3, #10
 c102720:	1affffca 	bne	c102650 <uart0_gethex+0x28>
		num *= 16;
		c = uart0_getchar();
		if(c == '\n')
			num /= 16;
	}
	return num;
 c102724:	e51b3010 	ldr	r3, [fp, #-16]
}
 c102728:	e1a00003 	mov	r0, r3
 c10272c:	e24bd00c 	sub	sp, fp, #12
 c102730:	e89d6800 	ldm	sp, {fp, sp, lr}
 c102734:	e12fff1e 	bx	lr

0c102738 <__aeabi_uidiv>:
 c102738:	e2512001 	subs	r2, r1, #1
 c10273c:	012fff1e 	bxeq	lr
 c102740:	3a000036 	bcc	c102820 <__aeabi_uidiv+0xe8>
 c102744:	e1500001 	cmp	r0, r1
 c102748:	9a000022 	bls	c1027d8 <__aeabi_uidiv+0xa0>
 c10274c:	e1110002 	tst	r1, r2
 c102750:	0a000023 	beq	c1027e4 <__aeabi_uidiv+0xac>
 c102754:	e311020e 	tst	r1, #-536870912	; 0xe0000000
 c102758:	01a01181 	lsleq	r1, r1, #3
 c10275c:	03a03008 	moveq	r3, #8
 c102760:	13a03001 	movne	r3, #1
 c102764:	e3510201 	cmp	r1, #268435456	; 0x10000000
 c102768:	31510000 	cmpcc	r1, r0
 c10276c:	31a01201 	lslcc	r1, r1, #4
 c102770:	31a03203 	lslcc	r3, r3, #4
 c102774:	3afffffa 	bcc	c102764 <__aeabi_uidiv+0x2c>
 c102778:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
 c10277c:	31510000 	cmpcc	r1, r0
 c102780:	31a01081 	lslcc	r1, r1, #1
 c102784:	31a03083 	lslcc	r3, r3, #1
 c102788:	3afffffa 	bcc	c102778 <__aeabi_uidiv+0x40>
 c10278c:	e3a02000 	mov	r2, #0
 c102790:	e1500001 	cmp	r0, r1
 c102794:	20400001 	subcs	r0, r0, r1
 c102798:	21822003 	orrcs	r2, r2, r3
 c10279c:	e15000a1 	cmp	r0, r1, lsr #1
 c1027a0:	204000a1 	subcs	r0, r0, r1, lsr #1
 c1027a4:	218220a3 	orrcs	r2, r2, r3, lsr #1
 c1027a8:	e1500121 	cmp	r0, r1, lsr #2
 c1027ac:	20400121 	subcs	r0, r0, r1, lsr #2
 c1027b0:	21822123 	orrcs	r2, r2, r3, lsr #2
 c1027b4:	e15001a1 	cmp	r0, r1, lsr #3
 c1027b8:	204001a1 	subcs	r0, r0, r1, lsr #3
 c1027bc:	218221a3 	orrcs	r2, r2, r3, lsr #3
 c1027c0:	e3500000 	cmp	r0, #0
 c1027c4:	11b03223 	lsrsne	r3, r3, #4
 c1027c8:	11a01221 	lsrne	r1, r1, #4
 c1027cc:	1affffef 	bne	c102790 <__aeabi_uidiv+0x58>
 c1027d0:	e1a00002 	mov	r0, r2
 c1027d4:	e12fff1e 	bx	lr
 c1027d8:	03a00001 	moveq	r0, #1
 c1027dc:	13a00000 	movne	r0, #0
 c1027e0:	e12fff1e 	bx	lr
 c1027e4:	e3510801 	cmp	r1, #65536	; 0x10000
 c1027e8:	21a01821 	lsrcs	r1, r1, #16
 c1027ec:	23a02010 	movcs	r2, #16
 c1027f0:	33a02000 	movcc	r2, #0
 c1027f4:	e3510c01 	cmp	r1, #256	; 0x100
 c1027f8:	21a01421 	lsrcs	r1, r1, #8
 c1027fc:	22822008 	addcs	r2, r2, #8
 c102800:	e3510010 	cmp	r1, #16
 c102804:	21a01221 	lsrcs	r1, r1, #4
 c102808:	22822004 	addcs	r2, r2, #4
 c10280c:	e3510004 	cmp	r1, #4
 c102810:	82822003 	addhi	r2, r2, #3
 c102814:	908220a1 	addls	r2, r2, r1, lsr #1
 c102818:	e1a00230 	lsr	r0, r0, r2
 c10281c:	e12fff1e 	bx	lr
 c102820:	e3500000 	cmp	r0, #0
 c102824:	13e00000 	mvnne	r0, #0
 c102828:	ea000007 	b	c10284c <__aeabi_idiv0>

0c10282c <__aeabi_uidivmod>:
 c10282c:	e3510000 	cmp	r1, #0
 c102830:	0afffffa 	beq	c102820 <__aeabi_uidiv+0xe8>
 c102834:	e92d4003 	push	{r0, r1, lr}
 c102838:	ebffffbe 	bl	c102738 <__aeabi_uidiv>
 c10283c:	e8bd4006 	pop	{r1, r2, lr}
 c102840:	e0030092 	mul	r3, r2, r0
 c102844:	e0411003 	sub	r1, r1, r3
 c102848:	e12fff1e 	bx	lr

0c10284c <__aeabi_idiv0>:
 c10284c:	e12fff1e 	bx	lr
