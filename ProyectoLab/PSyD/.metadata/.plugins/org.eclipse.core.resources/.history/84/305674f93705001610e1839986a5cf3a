/*
 * uart.c
 *
 *  Created on: 05/04/2016
 *      Author: usuario_local
 */

#include <uart.h>
#include <s3c44b0x.h>
#include <s3cev40.h>

/*
** Configura la UART para una comunicación según los siguientes parámetros:
**   E/S programada (por pooling)
**   Control manual de flujo
**   FIFOs: activadas
**   Protocolo: normal, sin paridad, 1 bit de stop, 8 bits de datos
**   Velocidad: 115200 baudios
**   Sin tratamiento de errores
*/
void uart0_init( void ){
	ULCON0 &= ~(1<<6) & ~(1<<5) & ~(1<<4) & ~(1<<3) & ~(1<<2);
	ULCON0 |= 3;
	UBRDIV0 = 34;
	UMCON0 &= ~(1<<4);
	UCON0 |= (1<<2) | (1<<0);
	UCON0 &= ~(1<<7) & ~(1<<6) & ~(1<<5) & ~(1<<4);
	UFCON0 |= (1<<0);
	UFCON0 &= ~(1<<2) & ~(1<<1);
}

/*
** Envía un caracter por la UART
*/
void uart0_putchar( char ch ){
	while(((UFSTAT0 >> 9) & 1) == 1);
	UTXH0 = ch;
}

/*
** Envía una cadena de caracteres por la UART
*/
void uart0_puts( char *s ){
	int i=0;
	while(s[i] != '\0'){
		uart0_putchar(s[i]);
		i++;
	}
}

/*
** Envía una cadena de caracteres por la UART que representa en decimal al entero que toma como argumento
*/
void uart0_putint( int32 i ){
	int num=i, dig, tam=0, numero[11], chorra=0;

	if(i<0){
		uart0_putchar('-');
		num*=-1;
	}

	num=i/10;
	dig=i%10;
	numero[chorra]=dig;
	tam++;

	while(num > 0){
		dig=num%10;
		num/=10;
		chorra++;
		numero[chorra]=dig;
		tam++;
	}

	for(chorra=tam-1; chorra>=0; chorra--)
		uart0_putchar(numero[chorra]+48);
}

/*
** Envía una cadena de caracteres por la UART que representa en hexadecimal al entero que toma como argumento
*/
void uart0_puthex( uint32 i ){
	char buf[8 + 1]; //Los caracteres se generan comenzando por el menos significativo
	char *p = buf + 8;	
	uint8 c; // Almacena fin de cadena
	*p = '\0';
	do {
		c = i & 0xf; // Resto de la división por 16
		if( c < 10 )
			*--p = '0' + c; // Almacenaje del carácter
		else
			*--p = 'a' + c - 10;
			i = i >> 4; // División por 16
	} while( i );
	uart0_puts( p ); // Envía la cadena
}

/*
** Devuelve un caracter recibido por la UART (espera hasta que llegue)
*/
char uart0_getchar( void ){
	while( (UFSTAT0 & 0xf) == 0 );
	return URXH0;
}

/*
** Forma una cadena con los caracteres recibidos por la UART hasta la recepción de '\n'
*/
void uart0_gets( char *s ){
	uint8 i=0;
	s[i] = uart0_getchar();
	while(s[i] != '\n') {
		i++;
		s[i] = uart0_getchar();
	}
	s[i] = '\0';
}

/*
** Forma una cadena con los caracteres recibidos por la UART hasta la recepción de '\n' y los interpreta en decimal
*/
int32 uart0_getint( void ){
	int32 num=0, signo=1;
	uint8 c = uart0_getchar();
	if(c == '-')
		signo = -1;
	while(c != '\n') {
		if(c != '-') {
			num *= 10;
			num += c - 48;
		}
		c = uart0_getchar();
	}
	return num*signo;

}

/*
** Forma una cadena con los caracteres recibidos por la UART hasta la recepción de '\n' y los interpreta en hexadecimal
*/
uint32 uart0_gethex( void ){
	int32 num=0, val;
	uint8 c;

	c = uart0_getchar();
	while(c != '\n') {

		if(c >= '0' && c <= '9')
			num += c - '0';
		else if(c >= 'A' && c <= 'F')
			num += c - 55;
		else if(c >= 'a' && c <= 'f')
				num += c - 87;
		num *= 16;
		c = uart0_getchar();
		if(c == '\n')
			num /= 16;
	}
	return num;
}
