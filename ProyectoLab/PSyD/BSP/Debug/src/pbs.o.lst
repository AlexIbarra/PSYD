   1              		.cpu arm7tdmi
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 18, 4
  11              		.file	"pbs.c"
  21              	.Ltext0:
  22              		.file 1 "../src/pbs.c"
 1914              		.align	2
 1915              		.global	pbs_init
 1917              	pbs_init:
 1918              	.LFB0:
   1:../src/pbs.c  **** #include<pbs.h>
   2:../src/pbs.c  **** #include <s3c44b0x.h>
   3:../src/pbs.c  **** #include <s3cev40.h>
   4:../src/pbs.c  **** #include <timers.h>
   5:../src/pbs.c  **** 
   6:../src/pbs.c  **** extern void isr_PB_dummy (void);
   7:../src/pbs.c  **** 
   8:../src/pbs.c  **** /*
   9:../src/pbs.c  **** ** Inicializa los pulsadores
  10:../src/pbs.c  **** ** Inicializa timers
  11:../src/pbs.c  **** */
  12:../src/pbs.c  **** void pbs_init( void ) {
 1919              		.loc 1 12 0
 1920              		.cfi_startproc
 1921              		@ Function supports interworking.
 1922              		@ args = 0, pretend = 0, frame = 0
 1923              		@ frame_needed = 1, uses_anonymous_args = 0
 1924 0000 0DC0A0E1 		mov	ip, sp
 1925              	.LCFI0:
 1926              		.cfi_def_cfa_register 12
 1927 0004 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 1928 0008 04B04CE2 		sub	fp, ip, #4
 1929              		.cfi_offset 14, -8
 1930              		.cfi_offset 13, -12
 1931              		.cfi_offset 11, -16
 1932              	.LCFI1:
 1933              		.cfi_def_cfa 11, 4
  13:../src/pbs.c  ****     timers_init(); // únicamente inicializa temporizadores, la configuración de puertos la hace s
 1934              		.loc 1 13 0
 1935 000c FEFFFFEB 		bl	timers_init
  14:../src/pbs.c  **** }
 1936              		.loc 1 14 0
 1937 0010 0CD04BE2 		sub	sp, fp, #12
 1938 0014 00689DE8 		ldmfd	sp, {fp, sp, lr}
 1939 0018 1EFF2FE1 		bx	lr
 1940              		.cfi_endproc
 1941              	.LFE0:
 1943              		.align	2
 1944              		.global	pb_scan
 1946              	pb_scan:
 1947              	.LFB1:
  15:../src/pbs.c  **** 
  16:../src/pbs.c  **** /*
  17:../src/pbs.c  **** ** Si hay un pulsador presionado devuelve su scancode, en otro caso devuelve PB_FAILURE
  18:../src/pbs.c  **** */
  19:../src/pbs.c  **** uint8 pb_scan( void ) {
 1948              		.loc 1 19 0
 1949              		.cfi_startproc
 1950              		@ Function supports interworking.
 1951              		@ args = 0, pretend = 0, frame = 0
 1952              		@ frame_needed = 1, uses_anonymous_args = 0
 1953 001c 0DC0A0E1 		mov	ip, sp
 1954              	.LCFI2:
 1955              		.cfi_def_cfa_register 12
 1956 0020 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 1957 0024 04B04CE2 		sub	fp, ip, #4
 1958              		.cfi_offset 14, -8
 1959              		.cfi_offset 13, -12
 1960              		.cfi_offset 11, -16
 1961              	.LCFI3:
 1962              		.cfi_def_cfa 11, 4
  20:../src/pbs.c  ****     /* Lee secuencialmente los pulsadores para determinar el código a devolver */
  21:../src/pbs.c  ****     if( !(PDATG & PB_LEFT) )
 1963              		.loc 1 21 0
 1964 0028 44309FE5 		ldr	r3, .L6
 1965 002c 003093E5 		ldr	r3, [r3, #0]
 1966 0030 403003E2 		and	r3, r3, #64
 1967 0034 000053E3 		cmp	r3, #0
 1968 0038 0100001A 		bne	.L3
  22:../src/pbs.c  ****         return PB_LEFT;
 1969              		.loc 1 22 0
 1970 003c 4030A0E3 		mov	r3, #64
 1971 0040 070000EA 		b	.L4
 1972              	.L3:
  23:../src/pbs.c  ****     else if( !(PDATG & PB_RIGHT) )
 1973              		.loc 1 23 0
 1974 0044 28309FE5 		ldr	r3, .L6
 1975 0048 003093E5 		ldr	r3, [r3, #0]
 1976 004c 803003E2 		and	r3, r3, #128
 1977 0050 000053E3 		cmp	r3, #0
 1978 0054 0100001A 		bne	.L5
  24:../src/pbs.c  ****         return PB_RIGHT;
 1979              		.loc 1 24 0
 1980 0058 8030A0E3 		mov	r3, #128
 1981 005c 000000EA 		b	.L4
 1982              	.L5:
  25:../src/pbs.c  ****     else
  26:../src/pbs.c  ****         return PB_FAILURE; // si ninguno está pulsado devuelve fallo
 1983              		.loc 1 26 0
 1984 0060 FF30A0E3 		mov	r3, #255
 1985              	.L4:
  27:../src/pbs.c  **** }
 1986              		.loc 1 27 0
 1987 0064 0300A0E1 		mov	r0, r3
 1988 0068 0CD04BE2 		sub	sp, fp, #12
 1989 006c 00689DE8 		ldmfd	sp, {fp, sp, lr}
 1990 0070 1EFF2FE1 		bx	lr
 1991              	.L7:
 1992              		.align	2
 1993              	.L6:
 1994 0074 4400D201 		.word	30539844
 1995              		.cfi_endproc
 1996              	.LFE1:
 1998              		.align	2
 1999              		.global	pb_status
 2001              	pb_status:
 2002              	.LFB2:
  28:../src/pbs.c  **** 
  29:../src/pbs.c  **** /*
  30:../src/pbs.c  **** ** Devuelve el estado del pulsador indicado
  31:../src/pbs.c  **** */
  32:../src/pbs.c  **** uint8 pb_status( uint8 scancode ) {
 2003              		.loc 1 32 0
 2004              		.cfi_startproc
 2005              		@ Function supports interworking.
 2006              		@ args = 0, pretend = 0, frame = 8
 2007              		@ frame_needed = 1, uses_anonymous_args = 0
 2008 0078 0DC0A0E1 		mov	ip, sp
 2009              	.LCFI4:
 2010              		.cfi_def_cfa_register 12
 2011 007c 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2012 0080 04B04CE2 		sub	fp, ip, #4
 2013              		.cfi_offset 14, -8
 2014              		.cfi_offset 13, -12
 2015              		.cfi_offset 11, -16
 2016              	.LCFI5:
 2017              		.cfi_def_cfa 11, 4
 2018 0084 08D04DE2 		sub	sp, sp, #8
 2019 0088 0030A0E1 		mov	r3, r0
 2020 008c 0D304BE5 		strb	r3, [fp, #-13]
  33:../src/pbs.c  **** 
  34:../src/pbs.c  ****     if(scancode == PB_LEFT){
 2021              		.loc 1 34 0
 2022 0090 0D305BE5 		ldrb	r3, [fp, #-13]	@ zero_extendqisi2
 2023 0094 400053E3 		cmp	r3, #64
 2024 0098 0700001A 		bne	.L9
  35:../src/pbs.c  **** 		if(pb_scan() == PB_LEFT)
 2025              		.loc 1 35 0
 2026 009c FEFFFFEB 		bl	pb_scan
 2027 00a0 0030A0E1 		mov	r3, r0
 2028 00a4 400053E3 		cmp	r3, #64
 2029 00a8 0100001A 		bne	.L10
  36:../src/pbs.c  **** 			return ~(PB_UP);//PB_DOWN;
 2030              		.loc 1 36 0
 2031 00ac FF30A0E3 		mov	r3, #255
 2032 00b0 0D0000EA 		b	.L11
 2033              	.L10:
  37:../src/pbs.c  **** 		else
  38:../src/pbs.c  **** 			return ~(PB_DOWN);//PB_UP;
 2034              		.loc 1 38 0
 2035 00b4 FE30A0E3 		mov	r3, #254
 2036 00b8 0B0000EA 		b	.L11
 2037              	.L9:
  39:../src/pbs.c  **** 	} else if(scancode == PB_RIGHT) {
 2038              		.loc 1 39 0
 2039 00bc 0D305BE5 		ldrb	r3, [fp, #-13]	@ zero_extendqisi2
 2040 00c0 800053E3 		cmp	r3, #128
 2041 00c4 0700001A 		bne	.L12
  40:../src/pbs.c  **** 		if(pb_scan() == PB_RIGHT)
 2042              		.loc 1 40 0
 2043 00c8 FEFFFFEB 		bl	pb_scan
 2044 00cc 0030A0E1 		mov	r3, r0
 2045 00d0 800053E3 		cmp	r3, #128
 2046 00d4 0100001A 		bne	.L13
  41:../src/pbs.c  **** 			return ~(PB_UP);//PB_DOWN;
 2047              		.loc 1 41 0
 2048 00d8 FF30A0E3 		mov	r3, #255
 2049 00dc 020000EA 		b	.L11
 2050              	.L13:
  42:../src/pbs.c  **** 		else
  43:../src/pbs.c  **** 			return ~(PB_DOWN);//PB_UP;
 2051              		.loc 1 43 0
 2052 00e0 FE30A0E3 		mov	r3, #254
 2053 00e4 000000EA 		b	.L11
 2054              	.L12:
  44:../src/pbs.c  **** 	}
  45:../src/pbs.c  **** 
  46:../src/pbs.c  **** 	return PB_FAILURE;
 2055              		.loc 1 46 0
 2056 00e8 FF30A0E3 		mov	r3, #255
 2057              	.L11:
  47:../src/pbs.c  **** }
 2058              		.loc 1 47 0
 2059 00ec 0300A0E1 		mov	r0, r3
 2060 00f0 0CD04BE2 		sub	sp, fp, #12
 2061 00f4 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2062 00f8 1EFF2FE1 		bx	lr
 2063              		.cfi_endproc
 2064              	.LFE2:
 2066              		.align	2
 2067              		.global	pb_wait_keydown
 2069              	pb_wait_keydown:
 2070              	.LFB3:
  48:../src/pbs.c  **** 
  49:../src/pbs.c  **** /*
  50:../src/pbs.c  **** ** Espera a que se presione el pulsador indicado
  51:../src/pbs.c  **** */
  52:../src/pbs.c  **** void pb_wait_keydown( uint8 scancode ) {
 2071              		.loc 1 52 0
 2072              		.cfi_startproc
 2073              		@ Function supports interworking.
 2074              		@ args = 0, pretend = 0, frame = 8
 2075              		@ frame_needed = 1, uses_anonymous_args = 0
 2076 00fc 0DC0A0E1 		mov	ip, sp
 2077              	.LCFI6:
 2078              		.cfi_def_cfa_register 12
 2079 0100 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2080 0104 04B04CE2 		sub	fp, ip, #4
 2081              		.cfi_offset 14, -8
 2082              		.cfi_offset 13, -12
 2083              		.cfi_offset 11, -16
 2084              	.LCFI7:
 2085              		.cfi_def_cfa 11, 4
 2086 0108 08D04DE2 		sub	sp, sp, #8
 2087 010c 0030A0E1 		mov	r3, r0
 2088 0110 0D304BE5 		strb	r3, [fp, #-13]
  53:../src/pbs.c  **** 
  54:../src/pbs.c  **** }
 2089              		.loc 1 54 0
 2090 0114 0CD04BE2 		sub	sp, fp, #12
 2091 0118 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2092 011c 1EFF2FE1 		bx	lr
 2093              		.cfi_endproc
 2094              	.LFE3:
 2096              		.align	2
 2097              		.global	pb_wait_keyup
 2099              	pb_wait_keyup:
 2100              	.LFB4:
  55:../src/pbs.c  **** 
  56:../src/pbs.c  **** /*
  57:../src/pbs.c  **** ** Espera a que se presione y despresione el pulsador indicado
  58:../src/pbs.c  **** */
  59:../src/pbs.c  **** void pb_wait_keyup( uint8 scancode ) {
 2101              		.loc 1 59 0
 2102              		.cfi_startproc
 2103              		@ Function supports interworking.
 2104              		@ args = 0, pretend = 0, frame = 8
 2105              		@ frame_needed = 1, uses_anonymous_args = 0
 2106 0120 0DC0A0E1 		mov	ip, sp
 2107              	.LCFI8:
 2108              		.cfi_def_cfa_register 12
 2109 0124 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2110 0128 04B04CE2 		sub	fp, ip, #4
 2111              		.cfi_offset 14, -8
 2112              		.cfi_offset 13, -12
 2113              		.cfi_offset 11, -16
 2114              	.LCFI9:
 2115              		.cfi_def_cfa 11, 4
 2116 012c 08D04DE2 		sub	sp, sp, #8
 2117 0130 0030A0E1 		mov	r3, r0
 2118 0134 0D304BE5 		strb	r3, [fp, #-13]
  60:../src/pbs.c  **** 
  61:../src/pbs.c  **** }
 2119              		.loc 1 61 0
 2120 0138 0CD04BE2 		sub	sp, fp, #12
 2121 013c 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2122 0140 1EFF2FE1 		bx	lr
 2123              		.cfi_endproc
 2124              	.LFE4:
 2126              		.align	2
 2127              		.global	pb_wait_any_keydown
 2129              	pb_wait_any_keydown:
 2130              	.LFB5:
  62:../src/pbs.c  **** 
  63:../src/pbs.c  **** /*
  64:../src/pbs.c  **** ** Espera a que se presione cualquier pulsador
  65:../src/pbs.c  **** */
  66:../src/pbs.c  **** void pb_wait_any_keydown( void ) {
 2131              		.loc 1 66 0
 2132              		.cfi_startproc
 2133              		@ Function supports interworking.
 2134              		@ args = 0, pretend = 0, frame = 0
 2135              		@ frame_needed = 1, uses_anonymous_args = 0
 2136 0144 0DC0A0E1 		mov	ip, sp
 2137              	.LCFI10:
 2138              		.cfi_def_cfa_register 12
 2139 0148 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2140 014c 04B04CE2 		sub	fp, ip, #4
 2141              		.cfi_offset 14, -8
 2142              		.cfi_offset 13, -12
 2143              		.cfi_offset 11, -16
 2144              	.LCFI11:
 2145              		.cfi_def_cfa 11, 4
  67:../src/pbs.c  **** 
  68:../src/pbs.c  **** }
 2146              		.loc 1 68 0
 2147 0150 0CD04BE2 		sub	sp, fp, #12
 2148 0154 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2149 0158 1EFF2FE1 		bx	lr
 2150              		.cfi_endproc
 2151              	.LFE5:
 2153              		.align	2
 2154              		.global	pb_wait_any_keyup
 2156              	pb_wait_any_keyup:
 2157              	.LFB6:
  69:../src/pbs.c  **** 
  70:../src/pbs.c  **** /*
  71:../src/pbs.c  **** ** Espera a que se presione y depresione cualquier pulsador
  72:../src/pbs.c  **** */
  73:../src/pbs.c  **** void pb_wait_any_keyup( void ) {
 2158              		.loc 1 73 0
 2159              		.cfi_startproc
 2160              		@ Function supports interworking.
 2161              		@ args = 0, pretend = 0, frame = 0
 2162              		@ frame_needed = 1, uses_anonymous_args = 0
 2163 015c 0DC0A0E1 		mov	ip, sp
 2164              	.LCFI12:
 2165              		.cfi_def_cfa_register 12
 2166 0160 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2167 0164 04B04CE2 		sub	fp, ip, #4
 2168              		.cfi_offset 14, -8
 2169              		.cfi_offset 13, -12
 2170              		.cfi_offset 11, -16
 2171              	.LCFI13:
 2172              		.cfi_def_cfa 11, 4
  74:../src/pbs.c  ****     while( (PDATG & PB_LEFT) && (PDATG & PB_RIGHT) ); // espera la presión de cualquier pulsador
 2173              		.loc 1 74 0
 2174 0168 0000A0E1 		mov	r0, r0	@ nop
 2175              	.L19:
 2176              		.loc 1 74 0 is_stmt 0 discriminator 1
 2177 016c 68309FE5 		ldr	r3, .L21
 2178 0170 003093E5 		ldr	r3, [r3, #0]
 2179 0174 403003E2 		and	r3, r3, #64
 2180 0178 000053E3 		cmp	r3, #0
 2181 017c 0400000A 		beq	.L18
 2182              		.loc 1 74 0 discriminator 2
 2183 0180 54309FE5 		ldr	r3, .L21
 2184 0184 003093E5 		ldr	r3, [r3, #0]
 2185 0188 803003E2 		and	r3, r3, #128
 2186 018c 000053E3 		cmp	r3, #0
 2187 0190 F5FFFF1A 		bne	.L19
 2188              	.L18:
  75:../src/pbs.c  ****     sw_delay_ms( PB_KEYDOWN_DELAY ); // espera SW (el timer 3 está ocupado) fin de rebotes
 2189              		.loc 1 75 0 is_stmt 1
 2190 0194 1E00A0E3 		mov	r0, #30
 2191 0198 FEFFFFEB 		bl	sw_delay_ms
  76:../src/pbs.c  ****     while( !(PDATG & PB_LEFT) || !(PDATG & PB_RIGHT) ); // espera la depresión de cualquier pulsad
 2192              		.loc 1 76 0
 2193 019c 0000A0E1 		mov	r0, r0	@ nop
 2194              	.L20:
 2195              		.loc 1 76 0 is_stmt 0 discriminator 1
 2196 01a0 34309FE5 		ldr	r3, .L21
 2197 01a4 003093E5 		ldr	r3, [r3, #0]
 2198 01a8 403003E2 		and	r3, r3, #64
 2199 01ac 000053E3 		cmp	r3, #0
 2200 01b0 FAFFFF0A 		beq	.L20
 2201              		.loc 1 76 0 discriminator 2
 2202 01b4 20309FE5 		ldr	r3, .L21
 2203 01b8 003093E5 		ldr	r3, [r3, #0]
 2204 01bc 803003E2 		and	r3, r3, #128
 2205 01c0 000053E3 		cmp	r3, #0
 2206 01c4 F5FFFF0A 		beq	.L20
  77:../src/pbs.c  ****     sw_delay_ms( PB_KEYUP_DELAY ); // espera SW (el timer 3 está ocupado) fin de rebotes
 2207              		.loc 1 77 0 is_stmt 1
 2208 01c8 6400A0E3 		mov	r0, #100
 2209 01cc FEFFFFEB 		bl	sw_delay_ms
  78:../src/pbs.c  **** }
 2210              		.loc 1 78 0
 2211 01d0 0CD04BE2 		sub	sp, fp, #12
 2212 01d4 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2213 01d8 1EFF2FE1 		bx	lr
 2214              	.L22:
 2215              		.align	2
 2216              	.L21:
 2217 01dc 4400D201 		.word	30539844
 2218              		.cfi_endproc
 2219              	.LFE6:
 2221              		.align	2
 2222              		.global	pb_getchar
 2224              	pb_getchar:
 2225              	.LFB7:
  79:../src/pbs.c  **** 
  80:../src/pbs.c  **** /*
  81:../src/pbs.c  **** ** Espera la presi�n y depresi�n de un pulsador y devuelve su scancode
  82:../src/pbs.c  **** */
  83:../src/pbs.c  **** uint8 pb_getchar( void ) {
 2226              		.loc 1 83 0
 2227              		.cfi_startproc
 2228              		@ Function supports interworking.
 2229              		@ args = 0, pretend = 0, frame = 8
 2230              		@ frame_needed = 1, uses_anonymous_args = 0
 2231 01e0 0DC0A0E1 		mov	ip, sp
 2232              	.LCFI14:
 2233              		.cfi_def_cfa_register 12
 2234 01e4 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2235 01e8 04B04CE2 		sub	fp, ip, #4
 2236              		.cfi_offset 14, -8
 2237              		.cfi_offset 13, -12
 2238              		.cfi_offset 11, -16
 2239              	.LCFI15:
 2240              		.cfi_def_cfa 11, 4
 2241 01ec 08D04DE2 		sub	sp, sp, #8
  84:../src/pbs.c  ****     uint8 scancode;
  85:../src/pbs.c  **** 
  86:../src/pbs.c  ****     while( (PDATG & PB_LEFT) && (PDATG & PB_RIGHT) ); // espera la presión de cualquier pulsador
 2242              		.loc 1 86 0
 2243 01f0 0000A0E1 		mov	r0, r0	@ nop
 2244              	.L25:
 2245              		.loc 1 86 0 is_stmt 0 discriminator 1
 2246 01f4 7C309FE5 		ldr	r3, .L27
 2247 01f8 003093E5 		ldr	r3, [r3, #0]
 2248 01fc 403003E2 		and	r3, r3, #64
 2249 0200 000053E3 		cmp	r3, #0
 2250 0204 0400000A 		beq	.L24
 2251              		.loc 1 86 0 discriminator 2
 2252 0208 68309FE5 		ldr	r3, .L27
 2253 020c 003093E5 		ldr	r3, [r3, #0]
 2254 0210 803003E2 		and	r3, r3, #128
 2255 0214 000053E3 		cmp	r3, #0
 2256 0218 F5FFFF1A 		bne	.L25
 2257              	.L24:
  87:../src/pbs.c  ****     sw_delay_ms( PB_KEYDOWN_DELAY ); // espera SW (el timer 3 está ocupado) fin de rebotes
 2258              		.loc 1 87 0 is_stmt 1
 2259 021c 1E00A0E3 		mov	r0, #30
 2260 0220 FEFFFFEB 		bl	sw_delay_ms
  88:../src/pbs.c  ****     scancode = pb_scan(); // obtiene el código del pulsador presionado
 2261              		.loc 1 88 0
 2262 0224 FEFFFFEB 		bl	pb_scan
 2263 0228 0030A0E1 		mov	r3, r0
 2264 022c 0D304BE5 		strb	r3, [fp, #-13]
  89:../src/pbs.c  ****     while( !(PDATG & PB_LEFT) || !(PDATG & PB_RIGHT) ); // espera la depresión de cualquier pulsad
 2265              		.loc 1 89 0
 2266 0230 0000A0E1 		mov	r0, r0	@ nop
 2267              	.L26:
 2268              		.loc 1 89 0 is_stmt 0 discriminator 1
 2269 0234 3C309FE5 		ldr	r3, .L27
 2270 0238 003093E5 		ldr	r3, [r3, #0]
 2271 023c 403003E2 		and	r3, r3, #64
 2272 0240 000053E3 		cmp	r3, #0
 2273 0244 FAFFFF0A 		beq	.L26
 2274              		.loc 1 89 0 discriminator 2
 2275 0248 28309FE5 		ldr	r3, .L27
 2276 024c 003093E5 		ldr	r3, [r3, #0]
 2277 0250 803003E2 		and	r3, r3, #128
 2278 0254 000053E3 		cmp	r3, #0
 2279 0258 F5FFFF0A 		beq	.L26
  90:../src/pbs.c  ****     sw_delay_ms( PB_KEYUP_DELAY ); // espera SW (el timer 3 está ocupado) fin de rebotes
 2280              		.loc 1 90 0 is_stmt 1
 2281 025c 6400A0E3 		mov	r0, #100
 2282 0260 FEFFFFEB 		bl	sw_delay_ms
  91:../src/pbs.c  **** 
  92:../src/pbs.c  ****     return scancode; // devuelve el código del pulsador presionado
 2283              		.loc 1 92 0
 2284 0264 0D305BE5 		ldrb	r3, [fp, #-13]	@ zero_extendqisi2
  93:../src/pbs.c  **** }
 2285              		.loc 1 93 0
 2286 0268 0300A0E1 		mov	r0, r3
 2287 026c 0CD04BE2 		sub	sp, fp, #12
 2288 0270 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2289 0274 1EFF2FE1 		bx	lr
 2290              	.L28:
 2291              		.align	2
 2292              	.L27:
 2293 0278 4400D201 		.word	30539844
 2294              		.cfi_endproc
 2295              	.LFE7:
 2297              		.align	2
 2298              		.global	pb_getchartime
 2300              	pb_getchartime:
 2301              	.LFB8:
  94:../src/pbs.c  **** 
  95:../src/pbs.c  **** /*
  96:../src/pbs.c  **** ** Espera la presi�n y depresi�n de un pulsador y devuelve su scancode y el intervalo en ms que
  97:../src/pbs.c  **** */
  98:../src/pbs.c  **** uint8 pb_getchartime( uint16 *ms ) {
 2302              		.loc 1 98 0
 2303              		.cfi_startproc
 2304              		@ Function supports interworking.
 2305              		@ args = 0, pretend = 0, frame = 16
 2306              		@ frame_needed = 1, uses_anonymous_args = 0
 2307 027c 0DC0A0E1 		mov	ip, sp
 2308              	.LCFI16:
 2309              		.cfi_def_cfa_register 12
 2310 0280 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2311 0284 04B04CE2 		sub	fp, ip, #4
 2312              		.cfi_offset 14, -8
 2313              		.cfi_offset 13, -12
 2314              		.cfi_offset 11, -16
 2315              	.LCFI17:
 2316              		.cfi_def_cfa 11, 4
 2317 0288 10D04DE2 		sub	sp, sp, #16
 2318 028c 18000BE5 		str	r0, [fp, #-24]
  99:../src/pbs.c  ****     uint8 scancode;
 100:../src/pbs.c  **** 
 101:../src/pbs.c  ****     while( (PDATG & PB_LEFT) && (PDATG & PB_RIGHT) ); // espera la presión de cualquier pulsador
 2319              		.loc 1 101 0
 2320 0290 0000A0E1 		mov	r0, r0	@ nop
 2321              	.L31:
 2322              		.loc 1 101 0 is_stmt 0 discriminator 1
 2323 0294 A8309FE5 		ldr	r3, .L33
 2324 0298 003093E5 		ldr	r3, [r3, #0]
 2325 029c 403003E2 		and	r3, r3, #64
 2326 02a0 000053E3 		cmp	r3, #0
 2327 02a4 0400000A 		beq	.L30
 2328              		.loc 1 101 0 discriminator 2
 2329 02a8 94309FE5 		ldr	r3, .L33
 2330 02ac 003093E5 		ldr	r3, [r3, #0]
 2331 02b0 803003E2 		and	r3, r3, #128
 2332 02b4 000053E3 		cmp	r3, #0
 2333 02b8 F5FFFF1A 		bne	.L31
 2334              	.L30:
 102:../src/pbs.c  ****     timer3_start(); // arranca el timer 3 (0,1 ms de resolución)
 2335              		.loc 1 102 0 is_stmt 1
 2336 02bc FEFFFFEB 		bl	timer3_start
 103:../src/pbs.c  ****     sw_delay_ms( PB_KEYDOWN_DELAY ); // espera SW (el timer 3 está ocupado) fin de rebotes
 2337              		.loc 1 103 0
 2338 02c0 1E00A0E3 		mov	r0, #30
 2339 02c4 FEFFFFEB 		bl	sw_delay_ms
 104:../src/pbs.c  ****     scancode = pb_scan(); // obtiene el código del pulsador presionado
 2340              		.loc 1 104 0
 2341 02c8 FEFFFFEB 		bl	pb_scan
 2342 02cc 0030A0E1 		mov	r3, r0
 2343 02d0 0D304BE5 		strb	r3, [fp, #-13]
 105:../src/pbs.c  ****     while( !(PDATG & PB_LEFT) || !(PDATG & PB_RIGHT) ); // espera la depresión de cualquier pulsad
 2344              		.loc 1 105 0
 2345 02d4 0000A0E1 		mov	r0, r0	@ nop
 2346              	.L32:
 2347              		.loc 1 105 0 is_stmt 0 discriminator 1
 2348 02d8 64309FE5 		ldr	r3, .L33
 2349 02dc 003093E5 		ldr	r3, [r3, #0]
 2350 02e0 403003E2 		and	r3, r3, #64
 2351 02e4 000053E3 		cmp	r3, #0
 2352 02e8 FAFFFF0A 		beq	.L32
 2353              		.loc 1 105 0 discriminator 2
 2354 02ec 50309FE5 		ldr	r3, .L33
 2355 02f0 003093E5 		ldr	r3, [r3, #0]
 2356 02f4 803003E2 		and	r3, r3, #128
 2357 02f8 000053E3 		cmp	r3, #0
 2358 02fc F5FFFF0A 		beq	.L32
 106:../src/pbs.c  ****     *ms = timer3_stop() / 10; // detiene el timer 3 y calcula los ms
 2359              		.loc 1 106 0 is_stmt 1
 2360 0300 FEFFFFEB 		bl	timer3_stop
 2361 0304 0030A0E1 		mov	r3, r0
 2362 0308 0320A0E1 		mov	r2, r3
 2363 030c 34309FE5 		ldr	r3, .L33+4
 2364 0310 921383E0 		umull	r1, r3, r2, r3
 2365 0314 A331A0E1 		mov	r3, r3, lsr #3
 2366 0318 0338A0E1 		mov	r3, r3, asl #16
 2367 031c 2328A0E1 		mov	r2, r3, lsr #16
 2368 0320 18301BE5 		ldr	r3, [fp, #-24]
 2369 0324 B020C3E1 		strh	r2, [r3, #0]	@ movhi
 107:../src/pbs.c  ****     sw_delay_ms( PB_KEYUP_DELAY ); // espera SW (el timer 3 está ocupado) fin de rebotes
 2370              		.loc 1 107 0
 2371 0328 6400A0E3 		mov	r0, #100
 2372 032c FEFFFFEB 		bl	sw_delay_ms
 108:../src/pbs.c  **** 
 109:../src/pbs.c  ****     return scancode; // devuelve el código del pulsador presionado
 2373              		.loc 1 109 0
 2374 0330 0D305BE5 		ldrb	r3, [fp, #-13]	@ zero_extendqisi2
 110:../src/pbs.c  **** }
 2375              		.loc 1 110 0
 2376 0334 0300A0E1 		mov	r0, r3
 2377 0338 0CD04BE2 		sub	sp, fp, #12
 2378 033c 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2379 0340 1EFF2FE1 		bx	lr
 2380              	.L34:
 2381              		.align	2
 2382              	.L33:
 2383 0344 4400D201 		.word	30539844
 2384 0348 CDCCCCCC 		.word	-858993459
 2385              		.cfi_endproc
 2386              	.LFE8:
 2388              		.align	2
 2389              		.global	pb_timeout_getchar
 2391              	pb_timeout_getchar:
 2392              	.LFB9:
 111:../src/pbs.c  **** 
 112:../src/pbs.c  **** /*
 113:../src/pbs.c  **** ** Espera un m�ximo de ms (no mayor de 6553ms) la presi�n y depresi�n de un pulsador y devuel
 114:../src/pbs.c  **** */
 115:../src/pbs.c  **** uint8 pb_timeout_getchar( uint16 ms ) {
 2393              		.loc 1 115 0
 2394              		.cfi_startproc
 2395              		@ Function supports interworking.
 2396              		@ args = 0, pretend = 0, frame = 16
 2397              		@ frame_needed = 1, uses_anonymous_args = 0
 2398 034c 0DC0A0E1 		mov	ip, sp
 2399              	.LCFI18:
 2400              		.cfi_def_cfa_register 12
 2401 0350 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2402 0354 04B04CE2 		sub	fp, ip, #4
 2403              		.cfi_offset 14, -8
 2404              		.cfi_offset 13, -12
 2405              		.cfi_offset 11, -16
 2406              	.LCFI19:
 2407              		.cfi_def_cfa 11, 4
 2408 0358 10D04DE2 		sub	sp, sp, #16
 2409 035c 0030A0E1 		mov	r3, r0
 2410 0360 B6314BE1 		strh	r3, [fp, #-22]	@ movhi
 116:../src/pbs.c  ****     uint8 scancode;
 117:../src/pbs.c  **** 
 118:../src/pbs.c  ****     timer3_start_timeout(ms*10); // arranca el timer 3 (0,1 ms de resolución)
 2411              		.loc 1 118 0
 2412 0364 B6315BE1 		ldrh	r3, [fp, #-22]	@ movhi
 2413 0368 0320A0E1 		mov	r2, r3	@ movhi
 2414 036c 0221A0E1 		mov	r2, r2, asl #2
 2415 0370 033082E0 		add	r3, r2, r3
 2416 0374 8330A0E1 		mov	r3, r3, asl #1
 2417 0378 0338A0E1 		mov	r3, r3, asl #16
 2418 037c 2338A0E1 		mov	r3, r3, lsr #16
 2419 0380 0300A0E1 		mov	r0, r3
 2420 0384 FEFFFFEB 		bl	timer3_start_timeout
 119:../src/pbs.c  ****     while( (PDATG & PB_LEFT) && (PDATG & PB_RIGHT)  && !timer3_timeout()); // espera la presión de
 2421              		.loc 1 119 0
 2422 0388 0000A0E1 		mov	r0, r0	@ nop
 2423              	.L37:
 2424              		.loc 1 119 0 is_stmt 0 discriminator 1
 2425 038c F8309FE5 		ldr	r3, .L43
 2426 0390 003093E5 		ldr	r3, [r3, #0]
 2427 0394 403003E2 		and	r3, r3, #64
 2428 0398 000053E3 		cmp	r3, #0
 2429 039c 0800000A 		beq	.L36
 2430              		.loc 1 119 0 discriminator 2
 2431 03a0 E4309FE5 		ldr	r3, .L43
 2432 03a4 003093E5 		ldr	r3, [r3, #0]
 2433 03a8 803003E2 		and	r3, r3, #128
 2434 03ac 000053E3 		cmp	r3, #0
 2435 03b0 0300000A 		beq	.L36
 2436              		.loc 1 119 0 discriminator 1
 2437 03b4 FEFFFFEB 		bl	timer3_timeout
 2438 03b8 0030A0E1 		mov	r3, r0
 2439 03bc 000053E3 		cmp	r3, #0
 2440 03c0 F1FFFF0A 		beq	.L37
 2441              	.L36:
 120:../src/pbs.c  ****     timer3_stop();
 2442              		.loc 1 120 0 is_stmt 1
 2443 03c4 FEFFFFEB 		bl	timer3_stop
 121:../src/pbs.c  ****     if(timer3_timeout())
 2444              		.loc 1 121 0
 2445 03c8 FEFFFFEB 		bl	timer3_timeout
 2446 03cc 0030A0E1 		mov	r3, r0
 2447 03d0 000053E3 		cmp	r3, #0
 2448 03d4 0100000A 		beq	.L38
 122:../src/pbs.c  ****         return PB_TIMEOUT;
 2449              		.loc 1 122 0
 2450 03d8 FE30A0E3 		mov	r3, #254
 2451 03dc 260000EA 		b	.L39
 2452              	.L38:
 123:../src/pbs.c  ****     else {
 124:../src/pbs.c  ****         timer3_start_timeout(ms*10); // arranca el timer 3 (0,1 ms de resolución)
 2453              		.loc 1 124 0
 2454 03e0 B6315BE1 		ldrh	r3, [fp, #-22]	@ movhi
 2455 03e4 0320A0E1 		mov	r2, r3	@ movhi
 2456 03e8 0221A0E1 		mov	r2, r2, asl #2
 2457 03ec 033082E0 		add	r3, r2, r3
 2458 03f0 8330A0E1 		mov	r3, r3, asl #1
 2459 03f4 0338A0E1 		mov	r3, r3, asl #16
 2460 03f8 2338A0E1 		mov	r3, r3, lsr #16
 2461 03fc 0300A0E1 		mov	r0, r3
 2462 0400 FEFFFFEB 		bl	timer3_start_timeout
 125:../src/pbs.c  ****         sw_delay_ms( PB_KEYDOWN_DELAY ); // espera SW (el timer 3 está ocupado) fin de rebotes
 2463              		.loc 1 125 0
 2464 0404 1E00A0E3 		mov	r0, #30
 2465 0408 FEFFFFEB 		bl	sw_delay_ms
 126:../src/pbs.c  ****         scancode = pb_scan(); // obtiene el código del pulsador presionado
 2466              		.loc 1 126 0
 2467 040c FEFFFFEB 		bl	pb_scan
 2468 0410 0030A0E1 		mov	r3, r0
 2469 0414 0D304BE5 		strb	r3, [fp, #-13]
 127:../src/pbs.c  ****         while( !(PDATG & PB_LEFT) || !(PDATG & PB_RIGHT) && !timer3_timeout()); // espera la depres
 2470              		.loc 1 127 0
 2471 0418 0000A0E1 		mov	r0, r0	@ nop
 2472              	.L40:
 2473              		.loc 1 127 0 is_stmt 0 discriminator 1
 2474 041c 68309FE5 		ldr	r3, .L43
 2475 0420 003093E5 		ldr	r3, [r3, #0]
 2476 0424 403003E2 		and	r3, r3, #64
 2477 0428 000053E3 		cmp	r3, #0
 2478 042c FAFFFF0A 		beq	.L40
 2479              		.loc 1 127 0 discriminator 2
 2480 0430 54309FE5 		ldr	r3, .L43
 2481 0434 003093E5 		ldr	r3, [r3, #0]
 2482 0438 803003E2 		and	r3, r3, #128
 2483 043c 000053E3 		cmp	r3, #0
 2484 0440 0300001A 		bne	.L41
 2485              		.loc 1 127 0 discriminator 1
 2486 0444 FEFFFFEB 		bl	timer3_timeout
 2487 0448 0030A0E1 		mov	r3, r0
 2488 044c 000053E3 		cmp	r3, #0
 2489 0450 F1FFFF0A 		beq	.L40
 2490              	.L41:
 128:../src/pbs.c  ****         timer3_stop();
 2491              		.loc 1 128 0 is_stmt 1
 2492 0454 FEFFFFEB 		bl	timer3_stop
 129:../src/pbs.c  ****         if(timer3_timeout())
 2493              		.loc 1 129 0
 2494 0458 FEFFFFEB 		bl	timer3_timeout
 2495 045c 0030A0E1 		mov	r3, r0
 2496 0460 000053E3 		cmp	r3, #0
 2497 0464 0100000A 		beq	.L42
 130:../src/pbs.c  ****             return PB_TIMEOUT;
 2498              		.loc 1 130 0
 2499 0468 FE30A0E3 		mov	r3, #254
 2500 046c 020000EA 		b	.L39
 2501              	.L42:
 131:../src/pbs.c  ****         else
 132:../src/pbs.c  ****             sw_delay_ms( PB_KEYUP_DELAY ); // espera SW (el timer 3 está ocupado) fin de rebotes
 2502              		.loc 1 132 0
 2503 0470 6400A0E3 		mov	r0, #100
 2504 0474 FEFFFFEB 		bl	sw_delay_ms
 133:../src/pbs.c  ****     }
 134:../src/pbs.c  **** 
 135:../src/pbs.c  ****     return scancode; // devuelve el código del pulsador presionado
 2505              		.loc 1 135 0
 2506 0478 0D305BE5 		ldrb	r3, [fp, #-13]	@ zero_extendqisi2
 2507              	.L39:
 136:../src/pbs.c  **** }
 2508              		.loc 1 136 0
 2509 047c 0300A0E1 		mov	r0, r3
 2510 0480 0CD04BE2 		sub	sp, fp, #12
 2511 0484 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2512 0488 1EFF2FE1 		bx	lr
 2513              	.L44:
 2514              		.align	2
 2515              	.L43:
 2516 048c 4400D201 		.word	30539844
 2517              		.cfi_endproc
 2518              	.LFE9:
 2520              		.align	2
 2521              		.global	pbs_open
 2523              	pbs_open:
 2524              	.LFB10:
 137:../src/pbs.c  **** 
 138:../src/pbs.c  **** /*
 139:../src/pbs.c  **** ** Instala, en la tabla de vectores de interrupci�n, la funci�n isr como RTI de interrupciones 
 140:../src/pbs.c  **** ** Borra interrupciones pendientes por presi�n de un pulsador
 141:../src/pbs.c  **** ** Desenmascara globalmente las interrupciones y espec�ficamente las interrupciones por presi�n
 142:../src/pbs.c  **** */
 143:../src/pbs.c  **** void pbs_open( void (*isr)(void) ) {
 2525              		.loc 1 143 0
 2526              		.cfi_startproc
 2527              		@ Function supports interworking.
 2528              		@ args = 0, pretend = 0, frame = 8
 2529              		@ frame_needed = 1, uses_anonymous_args = 0
 2530 0490 0DC0A0E1 		mov	ip, sp
 2531              	.LCFI20:
 2532              		.cfi_def_cfa_register 12
 2533 0494 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2534 0498 04B04CE2 		sub	fp, ip, #4
 2535              		.cfi_offset 14, -8
 2536              		.cfi_offset 13, -12
 2537              		.cfi_offset 11, -16
 2538              	.LCFI21:
 2539              		.cfi_def_cfa 11, 4
 2540 049c 08D04DE2 		sub	sp, sp, #8
 2541 04a0 10000BE5 		str	r0, [fp, #-16]
 144:../src/pbs.c  ****     pISR_PB = (uint32)isr; // instala la RTI argumento en la tabla virtual de vectores de IRQ
 2542              		.loc 1 144 0
 2543 04a4 3C309FE5 		ldr	r3, .L46
 2544 04a8 10201BE5 		ldr	r2, [fp, #-16]
 2545 04ac 002083E5 		str	r2, [r3, #0]
 145:../src/pbs.c  ****     EXTINTPND = ~(0x0); // borra flag de interrupción pendiente por interrupciones externas
 2546              		.loc 1 145 0
 2547 04b0 34309FE5 		ldr	r3, .L46+4
 2548 04b4 0020E0E3 		mvn	r2, #0
 2549 04b8 002083E5 		str	r2, [r3, #0]
 146:../src/pbs.c  ****     I_ISPC = BIT_EINT4567; // borra flag de interrupción pendiente por interrupciones por presión
 2550              		.loc 1 146 0
 2551 04bc 2C309FE5 		ldr	r3, .L46+8
 2552 04c0 0226A0E3 		mov	r2, #2097152
 2553 04c4 002083E5 		str	r2, [r3, #0]
 147:../src/pbs.c  ****     INTMSK &= ~(BIT_GLOBAL | BIT_EINT4567); // desenmascara globalmente interrupciones e interrupci
 2554              		.loc 1 147 0
 2555 04c8 24309FE5 		ldr	r3, .L46+12
 2556 04cc 20209FE5 		ldr	r2, .L46+12
 2557 04d0 002092E5 		ldr	r2, [r2, #0]
 2558 04d4 4226C2E3 		bic	r2, r2, #69206016
 2559 04d8 002083E5 		str	r2, [r3, #0]
 148:../src/pbs.c  **** }
 2560              		.loc 1 148 0
 2561 04dc 0CD04BE2 		sub	sp, fp, #12
 2562 04e0 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2563 04e4 1EFF2FE1 		bx	lr
 2564              	.L47:
 2565              		.align	2
 2566              	.L46:
 2567 04e8 74FF7F0C 		.word	209715060
 2568 04ec 5400D201 		.word	30539860
 2569 04f0 2400E001 		.word	31457316
 2570 04f4 0C00E001 		.word	31457292
 2571              		.cfi_endproc
 2572              	.LFE10:
 2574              		.align	2
 2575              		.global	pbs_close
 2577              	pbs_close:
 2578              	.LFB11:
 149:../src/pbs.c  **** 
 150:../src/pbs.c  **** /*
 151:../src/pbs.c  **** ** Enmascara las interrupciones por presi�n de un pulsador
 152:../src/pbs.c  **** ** Desinstala la RTI por presi�n de un pulsador
 153:../src/pbs.c  **** */
 154:../src/pbs.c  **** void pbs_close( void ) {
 2579              		.loc 1 154 0
 2580              		.cfi_startproc
 2581              		@ Function supports interworking.
 2582              		@ args = 0, pretend = 0, frame = 0
 2583              		@ frame_needed = 1, uses_anonymous_args = 0
 2584 04f8 0DC0A0E1 		mov	ip, sp
 2585              	.LCFI22:
 2586              		.cfi_def_cfa_register 12
 2587 04fc 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2588 0500 04B04CE2 		sub	fp, ip, #4
 2589              		.cfi_offset 14, -8
 2590              		.cfi_offset 13, -12
 2591              		.cfi_offset 11, -16
 2592              	.LCFI23:
 2593              		.cfi_def_cfa 11, 4
 155:../src/pbs.c  ****     INTMSK |= (BIT_GLOBAL | BIT_EINT4567); // enmascara interrupciones por presión de pulsador
 2594              		.loc 1 155 0
 2595 0504 24309FE5 		ldr	r3, .L49
 2596 0508 20209FE5 		ldr	r2, .L49
 2597 050c 002092E5 		ldr	r2, [r2, #0]
 2598 0510 422682E3 		orr	r2, r2, #69206016
 2599 0514 002083E5 		str	r2, [r3, #0]
 156:../src/pbs.c  ****     pISR_PB = (uint32)isr_PB_dummy; // instala isr_PB_dummy en la tabla virtual de vectores de inte
 2600              		.loc 1 156 0
 2601 0518 14309FE5 		ldr	r3, .L49+4
 2602 051c 14209FE5 		ldr	r2, .L49+8
 2603 0520 002083E5 		str	r2, [r3, #0]
 157:../src/pbs.c  **** }
 2604              		.loc 1 157 0
 2605 0524 0CD04BE2 		sub	sp, fp, #12
 2606 0528 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2607 052c 1EFF2FE1 		bx	lr
 2608              	.L50:
 2609              		.align	2
 2610              	.L49:
 2611 0530 0C00E001 		.word	31457292
 2612 0534 74FF7F0C 		.word	209715060
 2613 0538 00000000 		.word	isr_PB_dummy
 2614              		.cfi_endproc
 2615              	.LFE11:
 2617              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 pbs.c
C:\Users\USUARI~1\AppData\Local\Temp\ccb6Hhar.s:1914   .text:00000000 $a
C:\Users\USUARI~1\AppData\Local\Temp\ccb6Hhar.s:1917   .text:00000000 pbs_init
C:\Users\USUARI~1\AppData\Local\Temp\ccb6Hhar.s:1946   .text:0000001c pb_scan
C:\Users\USUARI~1\AppData\Local\Temp\ccb6Hhar.s:1994   .text:00000074 $d
C:\Users\USUARI~1\AppData\Local\Temp\ccb6Hhar.s:1998   .text:00000078 $a
C:\Users\USUARI~1\AppData\Local\Temp\ccb6Hhar.s:2001   .text:00000078 pb_status
C:\Users\USUARI~1\AppData\Local\Temp\ccb6Hhar.s:2069   .text:000000fc pb_wait_keydown
C:\Users\USUARI~1\AppData\Local\Temp\ccb6Hhar.s:2099   .text:00000120 pb_wait_keyup
C:\Users\USUARI~1\AppData\Local\Temp\ccb6Hhar.s:2129   .text:00000144 pb_wait_any_keydown
C:\Users\USUARI~1\AppData\Local\Temp\ccb6Hhar.s:2156   .text:0000015c pb_wait_any_keyup
C:\Users\USUARI~1\AppData\Local\Temp\ccb6Hhar.s:2217   .text:000001dc $d
C:\Users\USUARI~1\AppData\Local\Temp\ccb6Hhar.s:2221   .text:000001e0 $a
C:\Users\USUARI~1\AppData\Local\Temp\ccb6Hhar.s:2224   .text:000001e0 pb_getchar
C:\Users\USUARI~1\AppData\Local\Temp\ccb6Hhar.s:2293   .text:00000278 $d
C:\Users\USUARI~1\AppData\Local\Temp\ccb6Hhar.s:2297   .text:0000027c $a
C:\Users\USUARI~1\AppData\Local\Temp\ccb6Hhar.s:2300   .text:0000027c pb_getchartime
C:\Users\USUARI~1\AppData\Local\Temp\ccb6Hhar.s:2383   .text:00000344 $d
C:\Users\USUARI~1\AppData\Local\Temp\ccb6Hhar.s:2388   .text:0000034c $a
C:\Users\USUARI~1\AppData\Local\Temp\ccb6Hhar.s:2391   .text:0000034c pb_timeout_getchar
C:\Users\USUARI~1\AppData\Local\Temp\ccb6Hhar.s:2516   .text:0000048c $d
C:\Users\USUARI~1\AppData\Local\Temp\ccb6Hhar.s:2520   .text:00000490 $a
C:\Users\USUARI~1\AppData\Local\Temp\ccb6Hhar.s:2523   .text:00000490 pbs_open
C:\Users\USUARI~1\AppData\Local\Temp\ccb6Hhar.s:2567   .text:000004e8 $d
C:\Users\USUARI~1\AppData\Local\Temp\ccb6Hhar.s:2574   .text:000004f8 $a
C:\Users\USUARI~1\AppData\Local\Temp\ccb6Hhar.s:2577   .text:000004f8 pbs_close
C:\Users\USUARI~1\AppData\Local\Temp\ccb6Hhar.s:2611   .text:00000530 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
timers_init
sw_delay_ms
timer3_start
timer3_stop
timer3_start_timeout
timer3_timeout
isr_PB_dummy
