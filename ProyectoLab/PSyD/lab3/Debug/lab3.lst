
lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000614  0c100000  0c100000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       00000010  0c100614  0c100614  00008614  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .bss          00000003  0c100624  0c100624  00008624  2**0
                  ALLOC
  3 .debug_abbrev 00000222  00000000  00000000  00008624  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000003c9  00000000  00000000  00008846  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000002a1  00000000  00000000  00008c0f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_macinfo 00011590  00000000  00000000  00008eb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_loc    00000268  00000000  00000000  0001a440  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 000000f1  00000000  00000000  0001a6a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_pubtypes 00000087  00000000  00000000  0001a799  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000080  00000000  00000000  0001a820  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000177  00000000  00000000  0001a8a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .comment      0000002a  00000000  00000000  0001aa17  2**0
                  CONTENTS, READONLY
 13 .ARM.attributes 00000032  00000000  00000000  0001aa41  2**0
                  CONTENTS, READONLY
 14 .debug_frame  00000204  00000000  00000000  0001aa74  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0c100000 <main>:
#include <leds.h>

void delay( void );

void main( void )
{
 c100000:	e1a0c00d 	mov	ip, sp
 c100004:	e92dd800 	push	{fp, ip, lr, pc}
 c100008:	e24cb004 	sub	fp, ip, #4
 c10000c:	e24dd008 	sub	sp, sp, #8
    uint8 i;

    sys_init();
 c100010:	eb000172 	bl	c1005e0 <sys_init>
    segs_init();
 c100014:	eb0000d9 	bl	c100380 <segs_init>
    leds_init();
 c100018:	eb000042 	bl	c100128 <leds_init>
    while( 1 )
    {

        /************************************/

        led_on( RIGHT_LED );
 c10001c:	e3a00002 	mov	r0, #2
 c100020:	eb00005a 	bl	c100190 <led_on>
        segs_putchar( led_status( RIGHT_LED ) );
 c100024:	e3a00002 	mov	r0, #2
 c100028:	eb0000c0 	bl	c100330 <led_status>
 c10002c:	e1a03000 	mov	r3, r0
 c100030:	e1a00003 	mov	r0, r3
 c100034:	eb0000e6 	bl	c1003d4 <segs_putchar>
        delay();
 c100038:	eb00002d 	bl	c1000f4 <delay>
        led_off( RIGHT_LED );
 c10003c:	e3a00002 	mov	r0, #2
 c100040:	eb000070 	bl	c100208 <led_off>
        segs_putchar( led_status( RIGHT_LED ) );
 c100044:	e3a00002 	mov	r0, #2
 c100048:	eb0000b8 	bl	c100330 <led_status>
 c10004c:	e1a03000 	mov	r3, r0
 c100050:	e1a00003 	mov	r0, r3
 c100054:	eb0000de 	bl	c1003d4 <segs_putchar>
        delay();
 c100058:	eb000025 	bl	c1000f4 <delay>
        led_on( LEFT_LED );
 c10005c:	e3a00001 	mov	r0, #1
 c100060:	eb00004a 	bl	c100190 <led_on>
        segs_putchar( led_status( LEFT_LED ) );
 c100064:	e3a00001 	mov	r0, #1
 c100068:	eb0000b0 	bl	c100330 <led_status>
 c10006c:	e1a03000 	mov	r3, r0
 c100070:	e1a00003 	mov	r0, r3
 c100074:	eb0000d6 	bl	c1003d4 <segs_putchar>
        delay();
 c100078:	eb00001d 	bl	c1000f4 <delay>
        led_off( LEFT_LED );
 c10007c:	e3a00001 	mov	r0, #1
 c100080:	eb000060 	bl	c100208 <led_off>
        segs_putchar( led_status( LEFT_LED ) );
 c100084:	e3a00001 	mov	r0, #1
 c100088:	eb0000a8 	bl	c100330 <led_status>
 c10008c:	e1a03000 	mov	r3, r0
 c100090:	e1a00003 	mov	r0, r3
 c100094:	eb0000ce 	bl	c1003d4 <segs_putchar>
        delay();
 c100098:	eb000015 	bl	c1000f4 <delay>

        /************************************/

        for( i=0; i<16; i++ )
 c10009c:	e3a03000 	mov	r3, #0
 c1000a0:	e54b300d 	strb	r3, [fp, #-13]
 c1000a4:	ea00000a 	b	c1000d4 <main+0xd4>
        {
            led_toggle( RIGHT_LED );
 c1000a8:	e3a00002 	mov	r0, #2
 c1000ac:	eb000072 	bl	c10027c <led_toggle>
            led_toggle( LEFT_LED );
 c1000b0:	e3a00001 	mov	r0, #1
 c1000b4:	eb000070 	bl	c10027c <led_toggle>
            segs_putchar( i );
 c1000b8:	e55b300d 	ldrb	r3, [fp, #-13]
 c1000bc:	e1a00003 	mov	r0, r3
 c1000c0:	eb0000c3 	bl	c1003d4 <segs_putchar>
            delay();
 c1000c4:	eb00000a 	bl	c1000f4 <delay>
        segs_putchar( led_status( LEFT_LED ) );
        delay();

        /************************************/

        for( i=0; i<16; i++ )
 c1000c8:	e55b300d 	ldrb	r3, [fp, #-13]
 c1000cc:	e2833001 	add	r3, r3, #1
 c1000d0:	e54b300d 	strb	r3, [fp, #-13]
 c1000d4:	e55b300d 	ldrb	r3, [fp, #-13]
 c1000d8:	e353000f 	cmp	r3, #15
 c1000dc:	9afffff1 	bls	c1000a8 <main+0xa8>
            led_toggle( RIGHT_LED );
            led_toggle( LEFT_LED );
            segs_putchar( i );
            delay();
        }
        led_off( RIGHT_LED );
 c1000e0:	e3a00002 	mov	r0, #2
 c1000e4:	eb000047 	bl	c100208 <led_off>
        led_off( LEFT_LED );
 c1000e8:	e3a00001 	mov	r0, #1
 c1000ec:	eb000045 	bl	c100208 <led_off>

        /************************************/

    }
 c1000f0:	eaffffc9 	b	c10001c <main+0x1c>

0c1000f4 <delay>:
}

void delay( void )
{
 c1000f4:	e1a0c00d 	mov	ip, sp
 c1000f8:	e92dd810 	push	{r4, fp, ip, lr, pc}
 c1000fc:	e24cb004 	sub	fp, ip, #4
    register uint32 i;

    for( i=0; i<2000000; i++ );
 c100100:	e3a04000 	mov	r4, #0
 c100104:	ea000000 	b	c10010c <delay+0x18>
 c100108:	e2844001 	add	r4, r4, #1
 c10010c:	e59f3010 	ldr	r3, [pc, #16]	; c100124 <delay+0x30>
 c100110:	e1540003 	cmp	r4, r3
 c100114:	9afffffb 	bls	c100108 <delay+0x14>
}
 c100118:	e24bd010 	sub	sp, fp, #16
 c10011c:	e89d6810 	ldm	sp, {r4, fp, sp, lr}
 c100120:	e12fff1e 	bx	lr
 c100124:	001e847f 	.word	0x001e847f

0c100128 <leds_init>:

/*
** Inicializa los leds y los apaga
*/
void leds_init( void ){
	PCONB &= ~(1<<10) & ~(1<<9);	// PB[10] = out, PF[9] = out
 c100128:	e1a0c00d 	mov	ip, sp
 c10012c:	e92dd800 	push	{fp, ip, lr, pc}
 c100130:	e24cb004 	sub	fp, ip, #4
	PDATB |= (RIGHT_LED<<9) | (LEFT_LED<<9);
 c100134:	e59f3044 	ldr	r3, [pc, #68]	; c100180 <leds_init+0x58>
 c100138:	e59f2040 	ldr	r2, [pc, #64]	; c100180 <leds_init+0x58>
 c10013c:	e5922000 	ldr	r2, [r2]
 c100140:	e3c22c06 	bic	r2, r2, #1536	; 0x600
 c100144:	e5832000 	str	r2, [r3]
	state &= 0;
 c100148:	e59f3034 	ldr	r3, [pc, #52]	; c100184 <leds_init+0x5c>
 c10014c:	e59f2030 	ldr	r2, [pc, #48]	; c100184 <leds_init+0x5c>
 c100150:	e5922000 	ldr	r2, [r2]
 c100154:	e3822c06 	orr	r2, r2, #1536	; 0x600
 c100158:	e5832000 	str	r2, [r3]
}
 c10015c:	e59f3024 	ldr	r3, [pc, #36]	; c100188 <leds_init+0x60>
 c100160:	e3a02000 	mov	r2, #0
 c100164:	e5c32000 	strb	r2, [r3]

 c100168:	e59f301c 	ldr	r3, [pc, #28]	; c10018c <leds_init+0x64>
 c10016c:	e3a02000 	mov	r2, #0
 c100170:	e5c32000 	strb	r2, [r3]
/*
 c100174:	e24bd00c 	sub	sp, fp, #12
 c100178:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10017c:	e12fff1e 	bx	lr
 c100180:	01d20008 	.word	0x01d20008
 c100184:	01d2000c 	.word	0x01d2000c
 c100188:	0c100624 	.word	0x0c100624
 c10018c:	0c100625 	.word	0x0c100625

0c100190 <led_on>:
** Enciende el led indicado
*/
void led_on( uint8 led ){
	PDATB &= ~(led<<9);
	state |= led;
 c100190:	e1a0c00d 	mov	ip, sp
 c100194:	e92dd800 	push	{fp, ip, lr, pc}
 c100198:	e24cb004 	sub	fp, ip, #4
 c10019c:	e24dd008 	sub	sp, sp, #8
 c1001a0:	e1a03000 	mov	r3, r0
 c1001a4:	e54b300d 	strb	r3, [fp, #-13]
}
 c1001a8:	e59f304c 	ldr	r3, [pc, #76]	; c1001fc <led_on+0x6c>
 c1001ac:	e59f2048 	ldr	r2, [pc, #72]	; c1001fc <led_on+0x6c>
 c1001b0:	e5921000 	ldr	r1, [r2]
 c1001b4:	e55b200d 	ldrb	r2, [fp, #-13]
 c1001b8:	e1a02482 	lsl	r2, r2, #9
 c1001bc:	e1e02002 	mvn	r2, r2
 c1001c0:	e0012002 	and	r2, r1, r2
 c1001c4:	e5832000 	str	r2, [r3]

 c1001c8:	e55b300d 	ldrb	r3, [fp, #-13]
 c1001cc:	e3530001 	cmp	r3, #1
 c1001d0:	1a000003 	bne	c1001e4 <led_on+0x54>
/*
 c1001d4:	e59f3024 	ldr	r3, [pc, #36]	; c100200 <led_on+0x70>
 c1001d8:	e3a02001 	mov	r2, #1
 c1001dc:	e5c32000 	strb	r2, [r3]
 c1001e0:	ea000002 	b	c1001f0 <led_on+0x60>
** Apaga el led indicado
*/
 c1001e4:	e59f3018 	ldr	r3, [pc, #24]	; c100204 <led_on+0x74>
 c1001e8:	e3a02001 	mov	r2, #1
 c1001ec:	e5c32000 	strb	r2, [r3]
void led_off( uint8 led ){
 c1001f0:	e24bd00c 	sub	sp, fp, #12
 c1001f4:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1001f8:	e12fff1e 	bx	lr
 c1001fc:	01d2000c 	.word	0x01d2000c
 c100200:	0c100624 	.word	0x0c100624
 c100204:	0c100625 	.word	0x0c100625

0c100208 <led_off>:
	PDATB |= led<<9;
	state &= ~led;
}

/*
 c100208:	e1a0c00d 	mov	ip, sp
 c10020c:	e92dd800 	push	{fp, ip, lr, pc}
 c100210:	e24cb004 	sub	fp, ip, #4
 c100214:	e24dd008 	sub	sp, sp, #8
 c100218:	e1a03000 	mov	r3, r0
 c10021c:	e54b300d 	strb	r3, [fp, #-13]
** Conmuta el led indicado
 c100220:	e59f3048 	ldr	r3, [pc, #72]	; c100270 <led_off+0x68>
 c100224:	e59f2044 	ldr	r2, [pc, #68]	; c100270 <led_off+0x68>
 c100228:	e5921000 	ldr	r1, [r2]
 c10022c:	e55b200d 	ldrb	r2, [fp, #-13]
 c100230:	e1a02482 	lsl	r2, r2, #9
 c100234:	e1812002 	orr	r2, r1, r2
 c100238:	e5832000 	str	r2, [r3]
*/
 c10023c:	e55b300d 	ldrb	r3, [fp, #-13]
 c100240:	e3530001 	cmp	r3, #1
 c100244:	1a000003 	bne	c100258 <led_off+0x50>
void led_toggle( uint8 led ){
 c100248:	e59f3024 	ldr	r3, [pc, #36]	; c100274 <led_off+0x6c>
 c10024c:	e3a02000 	mov	r2, #0
 c100250:	e5c32000 	strb	r2, [r3]
 c100254:	ea000002 	b	c100264 <led_off+0x5c>
	PDATB ^= (led<<9);
	state ^= led;
 c100258:	e59f3018 	ldr	r3, [pc, #24]	; c100278 <led_off+0x70>
 c10025c:	e3a02000 	mov	r2, #0
 c100260:	e5c32000 	strb	r2, [r3]
}
 c100264:	e24bd00c 	sub	sp, fp, #12
 c100268:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10026c:	e12fff1e 	bx	lr
 c100270:	01d2000c 	.word	0x01d2000c
 c100274:	0c100624 	.word	0x0c100624
 c100278:	0c100625 	.word	0x0c100625

0c10027c <led_toggle>:

/*
** Devuelve el estado (ON/OFF) del led indicado
*/
uint8 led_status( uint8 led ){
 c10027c:	e1a0c00d 	mov	ip, sp
 c100280:	e92dd800 	push	{fp, ip, lr, pc}
 c100284:	e24cb004 	sub	fp, ip, #4
 c100288:	e24dd008 	sub	sp, sp, #8
 c10028c:	e1a03000 	mov	r3, r0
 c100290:	e54b300d 	strb	r3, [fp, #-13]
	return (state & led) >> led-1;
 c100294:	e59f3088 	ldr	r3, [pc, #136]	; c100324 <led_toggle+0xa8>
 c100298:	e59f2084 	ldr	r2, [pc, #132]	; c100324 <led_toggle+0xa8>
 c10029c:	e5921000 	ldr	r1, [r2]
 c1002a0:	e55b200d 	ldrb	r2, [fp, #-13]
 c1002a4:	e1a02482 	lsl	r2, r2, #9
 c1002a8:	e0212002 	eor	r2, r1, r2
 c1002ac:	e5832000 	str	r2, [r3]
}
 c1002b0:	e55b300d 	ldrb	r3, [fp, #-13]
 c1002b4:	e3530001 	cmp	r3, #1
 c1002b8:	1a00000b 	bne	c1002ec <led_toggle+0x70>
 c1002bc:	e59f3064 	ldr	r3, [pc, #100]	; c100328 <led_toggle+0xac>
 c1002c0:	e5d33000 	ldrb	r3, [r3]
 c1002c4:	e3530001 	cmp	r3, #1
 c1002c8:	1a000003 	bne	c1002dc <led_toggle+0x60>
 c1002cc:	e59f3054 	ldr	r3, [pc, #84]	; c100328 <led_toggle+0xac>
 c1002d0:	e3a02000 	mov	r2, #0
 c1002d4:	e5c32000 	strb	r2, [r3]
 c1002d8:	ea00000e 	b	c100318 <led_toggle+0x9c>
 c1002dc:	e59f3044 	ldr	r3, [pc, #68]	; c100328 <led_toggle+0xac>
 c1002e0:	e3a02001 	mov	r2, #1
 c1002e4:	e5c32000 	strb	r2, [r3]
 c1002e8:	ea00000a 	b	c100318 <led_toggle+0x9c>
 c1002ec:	e59f3038 	ldr	r3, [pc, #56]	; c10032c <led_toggle+0xb0>
 c1002f0:	e5d33000 	ldrb	r3, [r3]
 c1002f4:	e3530001 	cmp	r3, #1
 c1002f8:	1a000003 	bne	c10030c <led_toggle+0x90>
 c1002fc:	e59f3028 	ldr	r3, [pc, #40]	; c10032c <led_toggle+0xb0>
 c100300:	e3a02000 	mov	r2, #0
 c100304:	e5c32000 	strb	r2, [r3]
 c100308:	ea000002 	b	c100318 <led_toggle+0x9c>
 c10030c:	e59f3018 	ldr	r3, [pc, #24]	; c10032c <led_toggle+0xb0>
 c100310:	e3a02001 	mov	r2, #1
 c100314:	e5c32000 	strb	r2, [r3]
 c100318:	e24bd00c 	sub	sp, fp, #12
 c10031c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c100320:	e12fff1e 	bx	lr
 c100324:	01d2000c 	.word	0x01d2000c
 c100328:	0c100624 	.word	0x0c100624
 c10032c:	0c100625 	.word	0x0c100625

0c100330 <led_status>:
 c100330:	e1a0c00d 	mov	ip, sp
 c100334:	e92dd800 	push	{fp, ip, lr, pc}
 c100338:	e24cb004 	sub	fp, ip, #4
 c10033c:	e24dd008 	sub	sp, sp, #8
 c100340:	e1a03000 	mov	r3, r0
 c100344:	e54b300d 	strb	r3, [fp, #-13]
 c100348:	e55b300d 	ldrb	r3, [fp, #-13]
 c10034c:	e3530001 	cmp	r3, #1
 c100350:	1a000002 	bne	c100360 <led_status+0x30>
 c100354:	e59f301c 	ldr	r3, [pc, #28]	; c100378 <led_status+0x48>
 c100358:	e5d33000 	ldrb	r3, [r3]
 c10035c:	ea000001 	b	c100368 <led_status+0x38>
 c100360:	e59f3014 	ldr	r3, [pc, #20]	; c10037c <led_status+0x4c>
 c100364:	e5d33000 	ldrb	r3, [r3]
 c100368:	e1a00003 	mov	r0, r3
 c10036c:	e24bd00c 	sub	sp, fp, #12
 c100370:	e89d6800 	ldm	sp, {fp, sp, lr}
 c100374:	e12fff1e 	bx	lr
 c100378:	0c100624 	.word	0x0c100624
 c10037c:	0c100625 	.word	0x0c100625

0c100380 <segs_init>:
static uint8 state;

/*
** Inicializa el display 7-segmentos y lo apaga
*/
void segs_init( void ){
 c100380:	e1a0c00d 	mov	ip, sp
 c100384:	e92dd800 	push	{fp, ip, lr, pc}
 c100388:	e24cb004 	sub	fp, ip, #4
	segs_off();
 c10038c:	eb000002 	bl	c10039c <segs_off>
}
 c100390:	e24bd00c 	sub	sp, fp, #12
 c100394:	e89d6800 	ldm	sp, {fp, sp, lr}
 c100398:	e12fff1e 	bx	lr

0c10039c <segs_off>:

/*
** Apaga el display 7-segmentos
*/
void segs_off( void ){
 c10039c:	e1a0c00d 	mov	ip, sp
 c1003a0:	e92dd800 	push	{fp, ip, lr, pc}
 c1003a4:	e24cb004 	sub	fp, ip, #4
	state = SEGS_OFF;
 c1003a8:	e59f3020 	ldr	r3, [pc, #32]	; c1003d0 <segs_off+0x34>
 c1003ac:	e3e02000 	mvn	r2, #0
 c1003b0:	e5c32000 	strb	r2, [r3]
	SEGS = state;
 c1003b4:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c1003b8:	e59f2010 	ldr	r2, [pc, #16]	; c1003d0 <segs_off+0x34>
 c1003bc:	e5d22000 	ldrb	r2, [r2]
 c1003c0:	e5c32000 	strb	r2, [r3]
}
 c1003c4:	e24bd00c 	sub	sp, fp, #12
 c1003c8:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1003cc:	e12fff1e 	bx	lr
 c1003d0:	0c100626 	.word	0x0c100626

0c1003d4 <segs_putchar>:

/*
** Visualiza el número indicado en el display 7-segmentos
*/
void segs_putchar( uint8 n ){
 c1003d4:	e1a0c00d 	mov	ip, sp
 c1003d8:	e92dd800 	push	{fp, ip, lr, pc}
 c1003dc:	e24cb004 	sub	fp, ip, #4
 c1003e0:	e24dd008 	sub	sp, sp, #8
 c1003e4:	e1a03000 	mov	r3, r0
 c1003e8:	e54b300d 	strb	r3, [fp, #-13]
	state = n & 0x0f;
 c1003ec:	e55b300d 	ldrb	r3, [fp, #-13]
 c1003f0:	e203300f 	and	r3, r3, #15
 c1003f4:	e20320ff 	and	r2, r3, #255	; 0xff
 c1003f8:	e59f3024 	ldr	r3, [pc, #36]	; c100424 <segs_putchar+0x50>
 c1003fc:	e5c32000 	strb	r2, [r3]
	SEGS = hex2segs[state];
 c100400:	e3a03785 	mov	r3, #34865152	; 0x2140000
 c100404:	e59f2018 	ldr	r2, [pc, #24]	; c100424 <segs_putchar+0x50>
 c100408:	e5d22000 	ldrb	r2, [r2]
 c10040c:	e59f1014 	ldr	r1, [pc, #20]	; c100428 <segs_putchar+0x54>
 c100410:	e7d12002 	ldrb	r2, [r1, r2]
 c100414:	e5c32000 	strb	r2, [r3]
}
 c100418:	e24bd00c 	sub	sp, fp, #12
 c10041c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c100420:	e12fff1e 	bx	lr
 c100424:	0c100626 	.word	0x0c100626
 c100428:	0c100614 	.word	0x0c100614

0c10042c <segs_status>:

/*
** Devuelve el número que se está visualizando en el display
** 7-segmentos o SEGS_OFF si está apagado
*/
uint8 segs_status( void ){
 c10042c:	e1a0c00d 	mov	ip, sp
 c100430:	e92dd800 	push	{fp, ip, lr, pc}
 c100434:	e24cb004 	sub	fp, ip, #4
	return state;
 c100438:	e59f3010 	ldr	r3, [pc, #16]	; c100450 <segs_status+0x24>
 c10043c:	e5d33000 	ldrb	r3, [r3]
}
 c100440:	e1a00003 	mov	r0, r3
 c100444:	e24bd00c 	sub	sp, fp, #12
 c100448:	e89d6800 	ldm	sp, {fp, sp, lr}
 c10044c:	e12fff1e 	bx	lr
 c100450:	0c100626 	.word	0x0c100626

0c100454 <port_init>:
#include <s3c44b0x.h>
#include <s3cev40.h>
#include <system.h>


static void port_init() {
 c100454:	e1a0c00d 	mov	ip, sp
 c100458:	e92dd800 	push	{fp, ip, lr, pc}
 c10045c:	e24cb004 	sub	fp, ip, #4

	/* Esta en la pagina 56 del Tema 2 */

	PDATA = ~0;
 c100460:	e59f3100 	ldr	r3, [pc, #256]	; c100568 <port_init+0x114>
 c100464:	e3e02000 	mvn	r2, #0
 c100468:	e5832000 	str	r2, [r3]
	PCONA = 0xFE; //(00.1111.1110)
 c10046c:	e59f30f8 	ldr	r3, [pc, #248]	; c10056c <port_init+0x118>
 c100470:	e3a020fe 	mov	r2, #254	; 0xfe
 c100474:	e5832000 	str	r2, [r3]
	PDATB = ~0;
 c100478:	e59f30f0 	ldr	r3, [pc, #240]	; c100570 <port_init+0x11c>
 c10047c:	e3e02000 	mvn	r2, #0
 c100480:	e5832000 	str	r2, [r3]
	PCONB = 0x14F; // (001.0100.1111)
 c100484:	e59f30e8 	ldr	r3, [pc, #232]	; c100574 <port_init+0x120>
 c100488:	e59f20e8 	ldr	r2, [pc, #232]	; c100578 <port_init+0x124>
 c10048c:	e5832000 	str	r2, [r3]
	PDATC = ~0;
 c100490:	e59f30e4 	ldr	r3, [pc, #228]	; c10057c <port_init+0x128>
 c100494:	e3e02000 	mvn	r2, #0
 c100498:	e5832000 	str	r2, [r3]
	PCONC = 0x5FF555FF; // (0101.1111.1111.0101.0101.0101.1111.1111) 
 c10049c:	e59f30dc 	ldr	r3, [pc, #220]	; c100580 <port_init+0x12c>
 c1004a0:	e59f20dc 	ldr	r2, [pc, #220]	; c100584 <port_init+0x130>
 c1004a4:	e5832000 	str	r2, [r3]
	PUPC = 0x94FB; // (1001.0100.1111.1011) 
 c1004a8:	e59f30d8 	ldr	r3, [pc, #216]	; c100588 <port_init+0x134>
 c1004ac:	e59f20d8 	ldr	r2, [pc, #216]	; c10058c <port_init+0x138>
 c1004b0:	e5832000 	str	r2, [r3]
	PDATD = ~0;
 c1004b4:	e59f30d4 	ldr	r3, [pc, #212]	; c100590 <port_init+0x13c>
 c1004b8:	e3e02000 	mvn	r2, #0
 c1004bc:	e5832000 	str	r2, [r3]
	PCOND = 0xAAAA; // (1010.1010.1010.1010)
 c1004c0:	e59f30cc 	ldr	r3, [pc, #204]	; c100594 <port_init+0x140>
 c1004c4:	e59f20cc 	ldr	r2, [pc, #204]	; c100598 <port_init+0x144>
 c1004c8:	e5832000 	str	r2, [r3]
	PUPD = 0xFF; // (1111.1111)
 c1004cc:	e59f30c8 	ldr	r3, [pc, #200]	; c10059c <port_init+0x148>
 c1004d0:	e3a020ff 	mov	r2, #255	; 0xff
 c1004d4:	e5832000 	str	r2, [r3]
	PDATE = ~0;
 c1004d8:	e59f30c0 	ldr	r3, [pc, #192]	; c1005a0 <port_init+0x14c>
 c1004dc:	e3e02000 	mvn	r2, #0
 c1004e0:	e5832000 	str	r2, [r3]
	PCONE = 0x25569; // (10.0101.0101.0110.1001)
 c1004e4:	e59f30b8 	ldr	r3, [pc, #184]	; c1005a4 <port_init+0x150>
 c1004e8:	e59f20b8 	ldr	r2, [pc, #184]	; c1005a8 <port_init+0x154>
 c1004ec:	e5832000 	str	r2, [r3]
	PUPE = 0x1FB; // (1.1111.1011) 
 c1004f0:	e59f30b4 	ldr	r3, [pc, #180]	; c1005ac <port_init+0x158>
 c1004f4:	e59f20b4 	ldr	r2, [pc, #180]	; c1005b0 <port_init+0x15c>
 c1004f8:	e5832000 	str	r2, [r3]
	PDATF = ~0;
 c1004fc:	e59f30b0 	ldr	r3, [pc, #176]	; c1005b4 <port_init+0x160>
 c100500:	e3e02000 	mvn	r2, #0
 c100504:	e5832000 	str	r2, [r3]
	PCONF = 0x251A; // (00.0000.0010.0101.0001.1010)
 c100508:	e59f30a8 	ldr	r3, [pc, #168]	; c1005b8 <port_init+0x164>
 c10050c:	e59f20a8 	ldr	r2, [pc, #168]	; c1005bc <port_init+0x168>
 c100510:	e5832000 	str	r2, [r3]
	PUPF = 0x74; // (0.0111.0100)  
 c100514:	e59f30a4 	ldr	r3, [pc, #164]	; c1005c0 <port_init+0x16c>
 c100518:	e3a02074 	mov	r2, #116	; 0x74
 c10051c:	e5832000 	str	r2, [r3]
	PDATG = ~0;
 c100520:	e59f309c 	ldr	r3, [pc, #156]	; c1005c4 <port_init+0x170>
 c100524:	e3e02000 	mvn	r2, #0
 c100528:	e5832000 	str	r2, [r3]
	PCONG = 0xF5FF; // (1111.0101.1111.1111)
 c10052c:	e59f3094 	ldr	r3, [pc, #148]	; c1005c8 <port_init+0x174>
 c100530:	e59f2094 	ldr	r2, [pc, #148]	; c1005cc <port_init+0x178>
 c100534:	e5832000 	str	r2, [r3]
	PUPG = 0x30; // (0011.0000)
 c100538:	e59f3090 	ldr	r3, [pc, #144]	; c1005d0 <port_init+0x17c>
 c10053c:	e3a02030 	mov	r2, #48	; 0x30
 c100540:	e5832000 	str	r2, [r3]
	SPUCR = 0x7; // (111)
 c100544:	e59f3088 	ldr	r3, [pc, #136]	; c1005d4 <port_init+0x180>
 c100548:	e3a02007 	mov	r2, #7
 c10054c:	e5832000 	str	r2, [r3]
	EXTINT = 0x22000220; // (X010.X010.X000.X000.X000.X010.X010.X000)
 c100550:	e59f3080 	ldr	r3, [pc, #128]	; c1005d8 <port_init+0x184>
 c100554:	e59f2080 	ldr	r2, [pc, #128]	; c1005dc <port_init+0x188>
 c100558:	e5832000 	str	r2, [r3]
}
 c10055c:	e24bd00c 	sub	sp, fp, #12
 c100560:	e89d6800 	ldm	sp, {fp, sp, lr}
 c100564:	e12fff1e 	bx	lr
 c100568:	01d20004 	.word	0x01d20004
 c10056c:	01d20000 	.word	0x01d20000
 c100570:	01d2000c 	.word	0x01d2000c
 c100574:	01d20008 	.word	0x01d20008
 c100578:	0000014f 	.word	0x0000014f
 c10057c:	01d20014 	.word	0x01d20014
 c100580:	01d20010 	.word	0x01d20010
 c100584:	5ff555ff 	.word	0x5ff555ff
 c100588:	01d20018 	.word	0x01d20018
 c10058c:	000094fb 	.word	0x000094fb
 c100590:	01d20020 	.word	0x01d20020
 c100594:	01d2001c 	.word	0x01d2001c
 c100598:	0000aaaa 	.word	0x0000aaaa
 c10059c:	01d20024 	.word	0x01d20024
 c1005a0:	01d2002c 	.word	0x01d2002c
 c1005a4:	01d20028 	.word	0x01d20028
 c1005a8:	00025569 	.word	0x00025569
 c1005ac:	01d20030 	.word	0x01d20030
 c1005b0:	000001fb 	.word	0x000001fb
 c1005b4:	01d20038 	.word	0x01d20038
 c1005b8:	01d20034 	.word	0x01d20034
 c1005bc:	0000251a 	.word	0x0000251a
 c1005c0:	01d2003c 	.word	0x01d2003c
 c1005c4:	01d20044 	.word	0x01d20044
 c1005c8:	01d20040 	.word	0x01d20040
 c1005cc:	0000f5ff 	.word	0x0000f5ff
 c1005d0:	01d20048 	.word	0x01d20048
 c1005d4:	01d2004c 	.word	0x01d2004c
 c1005d8:	01d20050 	.word	0x01d20050
 c1005dc:	22000220 	.word	0x22000220

0c1005e0 <sys_init>:
**      Borra interrupciones pendientes externas e internas
**      IRQ vectorizadas, linea IRQ activada, linea FIQ desactivada
**  Inicializa el UART0
**  Muestra información del sistema por la UART0
*/
void sys_init( void ){
 c1005e0:	e1a0c00d 	mov	ip, sp
 c1005e4:	e92dd800 	push	{fp, ip, lr, pc}
 c1005e8:	e24cb004 	sub	fp, ip, #4

 c1005ec:	ebffff98 	bl	c100454 <port_init>
	/* Mirar pagina 7 y 8 del tema 2 */
 c1005f0:	e24bd00c 	sub	sp, fp, #12
 c1005f4:	e89d6800 	ldm	sp, {fp, sp, lr}
 c1005f8:	e12fff1e 	bx	lr

0c1005fc <sleep>:
	WTCON = 0;
	INTMSK = ~0;
	LOCKTIME = 0xFFF; //Estabilización del PLL: 512 us --> (1 / 8MHz)×4095
	PLLCON = 0x38021; //Frecuencia del MCLK_SLOW: 500 KHz
	CLKSLOW = 0x8; //Frecuencia del MCLK: 64 MHz 
 c1005fc:	e1a0c00d 	mov	ip, sp
 c100600:	e92dd800 	push	{fp, ip, lr, pc}
 c100604:	e24cb004 	sub	fp, ip, #4
	CLCKCON = 0x7FF8; //Modo de funcionamiento normal y Reloj distribuido a todos lo controladores
	 
 c100608:	e24bd00c 	sub	sp, fp, #12
 c10060c:	e89d6800 	ldm	sp, {fp, sp, lr}
 c100610:	e12fff1e 	bx	lr
